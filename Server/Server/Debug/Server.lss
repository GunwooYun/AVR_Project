
Server.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000c6  00800100  00000f20  00000fb4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f20  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000194  008001c6  008001c6  0000107a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000107a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000010d8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  00001118  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ecb  00000000  00000000  000011a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000971  00000000  00000000  00002073  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006bc  00000000  00000000  000029e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001fc  00000000  00000000  000030a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000053e  00000000  00000000  0000329c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005cb  00000000  00000000  000037da  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00003da5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 e2       	ldi	r30, 0x20	; 32
  a0:	ff e0       	ldi	r31, 0x0F	; 15
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a6 3c       	cpi	r26, 0xC6	; 198
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	23 e0       	ldi	r18, 0x03	; 3
  b4:	a6 ec       	ldi	r26, 0xC6	; 198
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	aa 35       	cpi	r26, 0x5A	; 90
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	98 d2       	rcall	.+1328   	; 0x5f4 <main>
  c4:	2b c7       	rjmp	.+3670   	; 0xf1c <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <Init_UART>:
	while(1)
	{
		if((UCSR1A & (1 << RXC1))) break;
	}
	return UDR1;
}
  c8:	82 e0       	ldi	r24, 0x02	; 2
  ca:	82 b9       	out	0x02, r24	; 2
  cc:	8a b1       	in	r24, 0x0a	; 10
  ce:	88 61       	ori	r24, 0x18	; 24
  d0:	8a b9       	out	0x0a, r24	; 10
  d2:	e5 e9       	ldi	r30, 0x95	; 149
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	80 81       	ld	r24, Z
  d8:	86 60       	ori	r24, 0x06	; 6
  da:	80 83       	st	Z, r24
  dc:	8f e5       	ldi	r24, 0x5F	; 95
  de:	89 b9       	out	0x09, r24	; 9
  e0:	08 95       	ret

000000e2 <Init_BLUETOOTH>:
  e2:	88 e0       	ldi	r24, 0x08	; 8
  e4:	81 bb       	out	0x11, r24	; 17
  e6:	10 92 9b 00 	sts	0x009B, r1	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
  ea:	88 e1       	ldi	r24, 0x18	; 24
  ec:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
  f0:	86 e0       	ldi	r24, 0x06	; 6
  f2:	80 93 9d 00 	sts	0x009D, r24	; 0x80009d <__TEXT_REGION_LENGTH__+0x7e009d>
  f6:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
  fa:	87 e0       	ldi	r24, 0x07	; 7
  fc:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
 100:	08 95       	ret

00000102 <UART1_transmit>:
 102:	90 91 9b 00 	lds	r25, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
 106:	95 ff       	sbrs	r25, 5
 108:	fc cf       	rjmp	.-8      	; 0x102 <UART1_transmit>
 10a:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
 10e:	08 95       	ret

00000110 <UART0_transmit>:
void UART0_transmit(uint8_t token)
{
	while(1)
	{
		// transmit buffer is ready to receive new data
		if((UCSR0A & (1 << UDRE0))) break;
 110:	5d 9b       	sbis	0x0b, 5	; 11
 112:	fe cf       	rjmp	.-4      	; 0x110 <UART0_transmit>
	}
	UDR0 = token; // I/O Data Register
 114:	8c b9       	out	0x0c, r24	; 12
 116:	08 95       	ret

00000118 <UART0_receive>:

uint8_t UART0_receive(void)
{
	while(1)
	{
		if((UCSR0A & (1 << RXC1))) break;
 118:	5f 9b       	sbis	0x0b, 7	; 11
 11a:	fe cf       	rjmp	.-4      	; 0x118 <UART0_receive>
	}
	return UDR0;
 11c:	8c b1       	in	r24, 0x0c	; 12
}
 11e:	08 95       	ret

00000120 <getCusInfo>:

char* getCusInfo(uint8_t index)
{
 120:	0f 93       	push	r16
 122:	1f 93       	push	r17
 124:	cf 93       	push	r28
 126:	c8 2f       	mov	r28, r24
	char* pCusInfo;
	pCusInfo = (char *)malloc(sizeof(char) * 30);
 128:	8e e1       	ldi	r24, 0x1E	; 30
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	f2 d2       	rcall	.+1508   	; 0x712 <malloc>
 12e:	8c 01       	movw	r16, r24
	if(pCusInfo == NULL){
 130:	89 2b       	or	r24, r25
 132:	29 f1       	breq	.+74     	; 0x17e <getCusInfo+0x5e>
		// failed malloc
		return NULL;
	}
	sprintf(pCusInfo, "b %s %d %u", csArray[index].cName, csArray[index].cAge, csArray[index].cBal);
 134:	86 e3       	ldi	r24, 0x36	; 54
 136:	c8 9f       	mul	r28, r24
 138:	f0 01       	movw	r30, r0
 13a:	11 24       	eor	r1, r1
 13c:	cf 01       	movw	r24, r30
 13e:	8a 59       	subi	r24, 0x9A	; 154
 140:	9d 4f       	sbci	r25, 0xFD	; 253
 142:	e8 5b       	subi	r30, 0xB8	; 184
 144:	fd 4f       	sbci	r31, 0xFD	; 253
 146:	25 a9       	ldd	r18, Z+53	; 0x35
 148:	2f 93       	push	r18
 14a:	24 a9       	ldd	r18, Z+52	; 0x34
 14c:	2f 93       	push	r18
 14e:	23 a9       	ldd	r18, Z+51	; 0x33
 150:	2f 93       	push	r18
 152:	22 a9       	ldd	r18, Z+50	; 0x32
 154:	2f 93       	push	r18
 156:	9f 93       	push	r25
 158:	8f 93       	push	r24
 15a:	86 e0       	ldi	r24, 0x06	; 6
 15c:	91 e0       	ldi	r25, 0x01	; 1
 15e:	9f 93       	push	r25
 160:	8f 93       	push	r24
 162:	1f 93       	push	r17
 164:	0f 93       	push	r16
 166:	ff d3       	rcall	.+2046   	; 0x966 <sprintf>
	return pCusInfo;
 168:	8d b7       	in	r24, 0x3d	; 61
 16a:	9e b7       	in	r25, 0x3e	; 62
 16c:	0a 96       	adiw	r24, 0x0a	; 10
 16e:	0f b6       	in	r0, 0x3f	; 63
 170:	f8 94       	cli
 172:	9e bf       	out	0x3e, r25	; 62
 174:	0f be       	out	0x3f, r0	; 63
 176:	8d bf       	out	0x3d, r24	; 61
 178:	80 2f       	mov	r24, r16
 17a:	91 2f       	mov	r25, r17
 17c:	02 c0       	rjmp	.+4      	; 0x182 <getCusInfo+0x62>
{
	char* pCusInfo;
	pCusInfo = (char *)malloc(sizeof(char) * 30);
	if(pCusInfo == NULL){
		// failed malloc
		return NULL;
 17e:	80 e0       	ldi	r24, 0x00	; 0
 180:	90 e0       	ldi	r25, 0x00	; 0
	}
	sprintf(pCusInfo, "b %s %d %u", csArray[index].cName, csArray[index].cAge, csArray[index].cBal);
	return pCusInfo;
}
 182:	cf 91       	pop	r28
 184:	1f 91       	pop	r17
 186:	0f 91       	pop	r16
 188:	08 95       	ret

0000018a <getBleInfo>:
char* getBleInfo(uint8_t index)
{
 18a:	0f 93       	push	r16
 18c:	1f 93       	push	r17
 18e:	cf 93       	push	r28
 190:	c8 2f       	mov	r28, r24
	char* pBleInfo;
	pBleInfo = (char *)malloc(sizeof(char) * 30);
 192:	8e e1       	ldi	r24, 0x1E	; 30
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	bd d2       	rcall	.+1402   	; 0x712 <malloc>
 198:	8c 01       	movw	r16, r24
	if(pBleInfo == NULL){
 19a:	89 2b       	or	r24, r25
 19c:	09 f1       	breq	.+66     	; 0x1e0 <getBleInfo+0x56>
		// failed malloc
		return NULL;
	}
	sprintf(pBleInfo, "Name: %s Age : %d\n", csArray[index].cName, csArray[index].cAge);
 19e:	86 e3       	ldi	r24, 0x36	; 54
 1a0:	c8 9f       	mul	r28, r24
 1a2:	f0 01       	movw	r30, r0
 1a4:	11 24       	eor	r1, r1
 1a6:	cf 01       	movw	r24, r30
 1a8:	8a 59       	subi	r24, 0x9A	; 154
 1aa:	9d 4f       	sbci	r25, 0xFD	; 253
 1ac:	e8 5b       	subi	r30, 0xB8	; 184
 1ae:	fd 4f       	sbci	r31, 0xFD	; 253
 1b0:	23 a9       	ldd	r18, Z+51	; 0x33
 1b2:	2f 93       	push	r18
 1b4:	22 a9       	ldd	r18, Z+50	; 0x32
 1b6:	2f 93       	push	r18
 1b8:	9f 93       	push	r25
 1ba:	8f 93       	push	r24
 1bc:	81 e1       	ldi	r24, 0x11	; 17
 1be:	91 e0       	ldi	r25, 0x01	; 1
 1c0:	9f 93       	push	r25
 1c2:	8f 93       	push	r24
 1c4:	1f 93       	push	r17
 1c6:	0f 93       	push	r16
 1c8:	ce d3       	rcall	.+1948   	; 0x966 <sprintf>
	return pBleInfo;
 1ca:	8d b7       	in	r24, 0x3d	; 61
 1cc:	9e b7       	in	r25, 0x3e	; 62
 1ce:	08 96       	adiw	r24, 0x08	; 8
 1d0:	0f b6       	in	r0, 0x3f	; 63
 1d2:	f8 94       	cli
 1d4:	9e bf       	out	0x3e, r25	; 62
 1d6:	0f be       	out	0x3f, r0	; 63
 1d8:	8d bf       	out	0x3d, r24	; 61
 1da:	80 2f       	mov	r24, r16
 1dc:	91 2f       	mov	r25, r17
 1de:	02 c0       	rjmp	.+4      	; 0x1e4 <getBleInfo+0x5a>
{
	char* pBleInfo;
	pBleInfo = (char *)malloc(sizeof(char) * 30);
	if(pBleInfo == NULL){
		// failed malloc
		return NULL;
 1e0:	80 e0       	ldi	r24, 0x00	; 0
 1e2:	90 e0       	ldi	r25, 0x00	; 0
	}
	sprintf(pBleInfo, "Name: %s Age : %d\n", csArray[index].cName, csArray[index].cAge);
	return pBleInfo;
}
 1e4:	cf 91       	pop	r28
 1e6:	1f 91       	pop	r17
 1e8:	0f 91       	pop	r16
 1ea:	08 95       	ret

000001ec <getProInfo>:

char* getProInfo(uint8_t index)
{
 1ec:	0f 93       	push	r16
 1ee:	1f 93       	push	r17
 1f0:	cf 93       	push	r28
 1f2:	c8 2f       	mov	r28, r24
	char* pProInfo;
	pProInfo = (char *)malloc(sizeof(char) * 30);
 1f4:	8e e1       	ldi	r24, 0x1E	; 30
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	8c d2       	rcall	.+1304   	; 0x712 <malloc>
 1fa:	8c 01       	movw	r16, r24
	if(pProInfo == NULL){
 1fc:	89 2b       	or	r24, r25
 1fe:	11 f1       	breq	.+68     	; 0x244 <getProInfo+0x58>
		// failed malloc
		return NULL;
	}
	sprintf(pProInfo, "d %s %d %d", pArray[index].pName, pArray[index].age, pArray[index].price);
 200:	8a e1       	ldi	r24, 0x1A	; 26
 202:	c8 9f       	mul	r28, r24
 204:	f0 01       	movw	r30, r0
 206:	11 24       	eor	r1, r1
 208:	ea 53       	subi	r30, 0x3A	; 58
 20a:	fe 4f       	sbci	r31, 0xFE	; 254
 20c:	85 89       	ldd	r24, Z+21	; 0x15
 20e:	8f 93       	push	r24
 210:	84 89       	ldd	r24, Z+20	; 0x14
 212:	8f 93       	push	r24
 214:	87 89       	ldd	r24, Z+23	; 0x17
 216:	8f 93       	push	r24
 218:	86 89       	ldd	r24, Z+22	; 0x16
 21a:	8f 93       	push	r24
 21c:	ff 93       	push	r31
 21e:	ef 93       	push	r30
 220:	84 e2       	ldi	r24, 0x24	; 36
 222:	91 e0       	ldi	r25, 0x01	; 1
 224:	9f 93       	push	r25
 226:	8f 93       	push	r24
 228:	1f 93       	push	r17
 22a:	0f 93       	push	r16
 22c:	9c d3       	rcall	.+1848   	; 0x966 <sprintf>
	return pProInfo;
 22e:	8d b7       	in	r24, 0x3d	; 61
 230:	9e b7       	in	r25, 0x3e	; 62
 232:	0a 96       	adiw	r24, 0x0a	; 10
 234:	0f b6       	in	r0, 0x3f	; 63
 236:	f8 94       	cli
 238:	9e bf       	out	0x3e, r25	; 62
 23a:	0f be       	out	0x3f, r0	; 63
 23c:	8d bf       	out	0x3d, r24	; 61
 23e:	80 2f       	mov	r24, r16
 240:	91 2f       	mov	r25, r17
 242:	02 c0       	rjmp	.+4      	; 0x248 <getProInfo+0x5c>
{
	char* pProInfo;
	pProInfo = (char *)malloc(sizeof(char) * 30);
	if(pProInfo == NULL){
		// failed malloc
		return NULL;
 244:	80 e0       	ldi	r24, 0x00	; 0
 246:	90 e0       	ldi	r25, 0x00	; 0
	}
	sprintf(pProInfo, "d %s %d %d", pArray[index].pName, pArray[index].age, pArray[index].price);
	return pProInfo;
}
 248:	cf 91       	pop	r28
 24a:	1f 91       	pop	r17
 24c:	0f 91       	pop	r16
 24e:	08 95       	ret

00000250 <getBleStock>:

char* getBleStock(uint8_t index)
{
 250:	0f 93       	push	r16
 252:	1f 93       	push	r17
 254:	cf 93       	push	r28
 256:	c8 2f       	mov	r28, r24
	char* pBleStock;
	pBleStock = (char *)malloc(sizeof(char) * 30);
 258:	8e e1       	ldi	r24, 0x1E	; 30
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	5a d2       	rcall	.+1204   	; 0x712 <malloc>
 25e:	8c 01       	movw	r16, r24
	if(pBleStock == NULL){
 260:	89 2b       	or	r24, r25
 262:	f1 f0       	breq	.+60     	; 0x2a0 <getBleStock+0x50>
		// failed malloc
		return NULL;
	}
	sprintf(pBleStock, "ID: %s Stock : %d\n", pArray[index].pName, pArray[index].stock);
 264:	8a e1       	ldi	r24, 0x1A	; 26
 266:	c8 9f       	mul	r28, r24
 268:	f0 01       	movw	r30, r0
 26a:	11 24       	eor	r1, r1
 26c:	ea 53       	subi	r30, 0x3A	; 58
 26e:	fe 4f       	sbci	r31, 0xFE	; 254
 270:	81 8d       	ldd	r24, Z+25	; 0x19
 272:	8f 93       	push	r24
 274:	80 8d       	ldd	r24, Z+24	; 0x18
 276:	8f 93       	push	r24
 278:	ff 93       	push	r31
 27a:	ef 93       	push	r30
 27c:	8f e2       	ldi	r24, 0x2F	; 47
 27e:	91 e0       	ldi	r25, 0x01	; 1
 280:	9f 93       	push	r25
 282:	8f 93       	push	r24
 284:	1f 93       	push	r17
 286:	0f 93       	push	r16
 288:	6e d3       	rcall	.+1756   	; 0x966 <sprintf>
	return pBleStock;
 28a:	8d b7       	in	r24, 0x3d	; 61
 28c:	9e b7       	in	r25, 0x3e	; 62
 28e:	08 96       	adiw	r24, 0x08	; 8
 290:	0f b6       	in	r0, 0x3f	; 63
 292:	f8 94       	cli
 294:	9e bf       	out	0x3e, r25	; 62
 296:	0f be       	out	0x3f, r0	; 63
 298:	8d bf       	out	0x3d, r24	; 61
 29a:	80 2f       	mov	r24, r16
 29c:	91 2f       	mov	r25, r17
 29e:	02 c0       	rjmp	.+4      	; 0x2a4 <getBleStock+0x54>
{
	char* pBleStock;
	pBleStock = (char *)malloc(sizeof(char) * 30);
	if(pBleStock == NULL){
		// failed malloc
		return NULL;
 2a0:	80 e0       	ldi	r24, 0x00	; 0
 2a2:	90 e0       	ldi	r25, 0x00	; 0
	}
	sprintf(pBleStock, "ID: %s Stock : %d\n", pArray[index].pName, pArray[index].stock);
	return pBleStock;
}
 2a4:	cf 91       	pop	r28
 2a6:	1f 91       	pop	r17
 2a8:	0f 91       	pop	r16
 2aa:	08 95       	ret

000002ac <checkCard>:

int checkCard(char* cn)
{
 2ac:	0f 93       	push	r16
 2ae:	1f 93       	push	r17
 2b0:	cf 93       	push	r28
 2b2:	df 93       	push	r29
 2b4:	8c 01       	movw	r16, r24
	for(int i = 0; i < NUM_OF_CUSTOMER; i++)
 2b6:	c0 e0       	ldi	r28, 0x00	; 0
 2b8:	d0 e0       	ldi	r29, 0x00	; 0
 2ba:	0d c0       	rjmp	.+26     	; 0x2d6 <checkCard+0x2a>
	{
		if(!strcmp(csArray[i].cID, cn))
 2bc:	26 e3       	ldi	r18, 0x36	; 54
 2be:	2c 9f       	mul	r18, r28
 2c0:	c0 01       	movw	r24, r0
 2c2:	2d 9f       	mul	r18, r29
 2c4:	90 0d       	add	r25, r0
 2c6:	11 24       	eor	r1, r1
 2c8:	b8 01       	movw	r22, r16
 2ca:	88 5b       	subi	r24, 0xB8	; 184
 2cc:	9d 4f       	sbci	r25, 0xFD	; 253
 2ce:	42 d3       	rcall	.+1668   	; 0x954 <strcmp>
 2d0:	89 2b       	or	r24, r25
 2d2:	39 f0       	breq	.+14     	; 0x2e2 <checkCard+0x36>
	return pBleStock;
}

int checkCard(char* cn)
{
	for(int i = 0; i < NUM_OF_CUSTOMER; i++)
 2d4:	21 96       	adiw	r28, 0x01	; 1
 2d6:	c5 30       	cpi	r28, 0x05	; 5
 2d8:	d1 05       	cpc	r29, r1
 2da:	84 f3       	brlt	.-32     	; 0x2bc <checkCard+0x10>
	{
		if(!strcmp(csArray[i].cID, cn))
			return i;
	}
	return -1;
 2dc:	8f ef       	ldi	r24, 0xFF	; 255
 2de:	9f ef       	ldi	r25, 0xFF	; 255
 2e0:	02 c0       	rjmp	.+4      	; 0x2e6 <checkCard+0x3a>
int checkCard(char* cn)
{
	for(int i = 0; i < NUM_OF_CUSTOMER; i++)
	{
		if(!strcmp(csArray[i].cID, cn))
			return i;
 2e2:	8c 2f       	mov	r24, r28
 2e4:	9d 2f       	mov	r25, r29
	}
	return -1;
}
 2e6:	df 91       	pop	r29
 2e8:	cf 91       	pop	r28
 2ea:	1f 91       	pop	r17
 2ec:	0f 91       	pop	r16
 2ee:	08 95       	ret

000002f0 <sendInfo>:

void sendInfo(char* info, uint8_t mode)
{
 2f0:	1f 93       	push	r17
 2f2:	cf 93       	push	r28
 2f4:	df 93       	push	r29
 2f6:	ec 01       	movw	r28, r24
 2f8:	16 2f       	mov	r17, r22
	char* sendToken;
	
	if(!strcmp(info, "1")){
 2fa:	62 e4       	ldi	r22, 0x42	; 66
 2fc:	71 e0       	ldi	r23, 0x01	; 1
 2fe:	2a d3       	rcall	.+1620   	; 0x954 <strcmp>
 300:	89 2b       	or	r24, r25
 302:	19 f4       	brne	.+6      	; 0x30a <sendInfo+0x1a>
		UART0_transmit('1');
 304:	81 e3       	ldi	r24, 0x31	; 49
 306:	04 df       	rcall	.-504    	; 0x110 <UART0_transmit>
		return;
 308:	11 c0       	rjmp	.+34     	; 0x32c <sendInfo+0x3c>
	}
	
	if(mode == UART){
 30a:	11 30       	cpi	r17, 0x01	; 1
 30c:	39 f4       	brne	.+14     	; 0x31c <sendInfo+0x2c>
		sendToken = info;
		while(*sendToken){
			UART0_transmit(*sendToken);
 30e:	02 c0       	rjmp	.+4      	; 0x314 <sendInfo+0x24>
 310:	ff de       	rcall	.-514    	; 0x110 <UART0_transmit>
			sendToken++;
 312:	21 96       	adiw	r28, 0x01	; 1
		return;
	}
	
	if(mode == UART){
		sendToken = info;
		while(*sendToken){
 314:	88 81       	ld	r24, Y
 316:	81 11       	cpse	r24, r1
 318:	fb cf       	rjmp	.-10     	; 0x310 <sendInfo+0x20>
 31a:	08 c0       	rjmp	.+16     	; 0x32c <sendInfo+0x3c>
			UART0_transmit(*sendToken);
			sendToken++;
		}
	}
	else if(mode == BLUETOOTH)
 31c:	12 30       	cpi	r17, 0x02	; 2
 31e:	31 f4       	brne	.+12     	; 0x32c <sendInfo+0x3c>
	{
		sendToken = info;
		while(*sendToken){
			UART1_transmit(*sendToken);
 320:	02 c0       	rjmp	.+4      	; 0x326 <sendInfo+0x36>
 322:	ef de       	rcall	.-546    	; 0x102 <UART1_transmit>
			sendToken++;
 324:	21 96       	adiw	r28, 0x01	; 1
		}
	}
	else if(mode == BLUETOOTH)
	{
		sendToken = info;
		while(*sendToken){
 326:	88 81       	ld	r24, Y
 328:	81 11       	cpse	r24, r1
 32a:	fb cf       	rjmp	.-10     	; 0x322 <sendInfo+0x32>
			UART1_transmit(*sendToken);
			sendToken++;
		}
	}
}
 32c:	df 91       	pop	r29
 32e:	cf 91       	pop	r28
 330:	1f 91       	pop	r17
 332:	08 95       	ret

00000334 <calBalance>:

void calBalance(uint8_t cIndex, uint8_t pIndex)
{
	if(csArray[cIndex].cAge < pArray[pIndex].age)
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	26 e3       	ldi	r18, 0x36	; 54
 338:	28 9f       	mul	r18, r24
 33a:	f0 01       	movw	r30, r0
 33c:	29 9f       	mul	r18, r25
 33e:	f0 0d       	add	r31, r0
 340:	11 24       	eor	r1, r1
 342:	e8 5b       	subi	r30, 0xB8	; 184
 344:	fd 4f       	sbci	r31, 0xFD	; 253
 346:	42 a9       	ldd	r20, Z+50	; 0x32
 348:	53 a9       	ldd	r21, Z+51	; 0x33
 34a:	70 e0       	ldi	r23, 0x00	; 0
 34c:	2a e1       	ldi	r18, 0x1A	; 26
 34e:	26 9f       	mul	r18, r22
 350:	f0 01       	movw	r30, r0
 352:	27 9f       	mul	r18, r23
 354:	f0 0d       	add	r31, r0
 356:	11 24       	eor	r1, r1
 358:	ea 53       	subi	r30, 0x3A	; 58
 35a:	fe 4f       	sbci	r31, 0xFE	; 254
 35c:	26 89       	ldd	r18, Z+22	; 0x16
 35e:	37 89       	ldd	r19, Z+23	; 0x17
 360:	42 17       	cp	r20, r18
 362:	53 07       	cpc	r21, r19
 364:	ec f1       	brlt	.+122    	; 0x3e0 <calBalance+0xac>
		return;
	if(pArray[pIndex].stock <= 0) return;
 366:	2a e1       	ldi	r18, 0x1A	; 26
 368:	26 9f       	mul	r18, r22
 36a:	f0 01       	movw	r30, r0
 36c:	27 9f       	mul	r18, r23
 36e:	f0 0d       	add	r31, r0
 370:	11 24       	eor	r1, r1
 372:	ea 53       	subi	r30, 0x3A	; 58
 374:	fe 4f       	sbci	r31, 0xFE	; 254
 376:	20 8d       	ldd	r18, Z+24	; 0x18
 378:	31 8d       	ldd	r19, Z+25	; 0x19
 37a:	12 16       	cp	r1, r18
 37c:	13 06       	cpc	r1, r19
 37e:	84 f5       	brge	.+96     	; 0x3e0 <calBalance+0xac>
	int bal = csArray[cIndex].cBal - pArray[pIndex].price;
 380:	46 e3       	ldi	r20, 0x36	; 54
 382:	48 9f       	mul	r20, r24
 384:	f0 01       	movw	r30, r0
 386:	49 9f       	mul	r20, r25
 388:	f0 0d       	add	r31, r0
 38a:	11 24       	eor	r1, r1
 38c:	e8 5b       	subi	r30, 0xB8	; 184
 38e:	fd 4f       	sbci	r31, 0xFD	; 253
 390:	44 a9       	ldd	r20, Z+52	; 0x34
 392:	55 a9       	ldd	r21, Z+53	; 0x35
 394:	aa e1       	ldi	r26, 0x1A	; 26
 396:	a6 9f       	mul	r26, r22
 398:	f0 01       	movw	r30, r0
 39a:	a7 9f       	mul	r26, r23
 39c:	f0 0d       	add	r31, r0
 39e:	11 24       	eor	r1, r1
 3a0:	ea 53       	subi	r30, 0x3A	; 58
 3a2:	fe 4f       	sbci	r31, 0xFE	; 254
 3a4:	04 88       	ldd	r0, Z+20	; 0x14
 3a6:	f5 89       	ldd	r31, Z+21	; 0x15
 3a8:	e0 2d       	mov	r30, r0
 3aa:	4e 1b       	sub	r20, r30
 3ac:	5f 0b       	sbc	r21, r31
	if(bal > 0){
 3ae:	14 16       	cp	r1, r20
 3b0:	15 06       	cpc	r1, r21
 3b2:	b4 f4       	brge	.+44     	; 0x3e0 <calBalance+0xac>
		csArray[cIndex].cBal = bal;
 3b4:	a6 e3       	ldi	r26, 0x36	; 54
 3b6:	a8 9f       	mul	r26, r24
 3b8:	f0 01       	movw	r30, r0
 3ba:	a9 9f       	mul	r26, r25
 3bc:	f0 0d       	add	r31, r0
 3be:	11 24       	eor	r1, r1
 3c0:	e8 5b       	subi	r30, 0xB8	; 184
 3c2:	fd 4f       	sbci	r31, 0xFD	; 253
 3c4:	55 ab       	std	Z+53, r21	; 0x35
 3c6:	44 ab       	std	Z+52, r20	; 0x34
		pArray[pIndex].stock--;
 3c8:	8a e1       	ldi	r24, 0x1A	; 26
 3ca:	86 9f       	mul	r24, r22
 3cc:	f0 01       	movw	r30, r0
 3ce:	87 9f       	mul	r24, r23
 3d0:	f0 0d       	add	r31, r0
 3d2:	11 24       	eor	r1, r1
 3d4:	ea 53       	subi	r30, 0x3A	; 58
 3d6:	fe 4f       	sbci	r31, 0xFE	; 254
 3d8:	21 50       	subi	r18, 0x01	; 1
 3da:	31 09       	sbc	r19, r1
 3dc:	31 8f       	std	Z+25, r19	; 0x19
 3de:	20 8f       	std	Z+24, r18	; 0x18
 3e0:	08 95       	ret

000003e2 <dataInit>:
	}
}

void dataInit()
{
 3e2:	cf 93       	push	r28
 3e4:	df 93       	push	r29
	/* 고객정보 데이터 저장 */
	strcpy(csArray[0].cID, "a179 15 232 17E");
 3e6:	c8 e4       	ldi	r28, 0x48	; 72
 3e8:	d2 e0       	ldi	r29, 0x02	; 2
 3ea:	80 e1       	ldi	r24, 0x10	; 16
 3ec:	e4 e4       	ldi	r30, 0x44	; 68
 3ee:	f1 e0       	ldi	r31, 0x01	; 1
 3f0:	de 01       	movw	r26, r28
 3f2:	01 90       	ld	r0, Z+
 3f4:	0d 92       	st	X+, r0
 3f6:	8a 95       	dec	r24
 3f8:	e1 f7       	brne	.-8      	; 0x3f2 <dataInit+0x10>
	strcpy(csArray[0].cName, "Tom");
 3fa:	e6 e6       	ldi	r30, 0x66	; 102
 3fc:	f2 e0       	ldi	r31, 0x02	; 2
 3fe:	84 e5       	ldi	r24, 0x54	; 84
 400:	9f e6       	ldi	r25, 0x6F	; 111
 402:	91 83       	std	Z+1, r25	; 0x01
 404:	80 83       	st	Z, r24
 406:	8d e6       	ldi	r24, 0x6D	; 109
 408:	90 e0       	ldi	r25, 0x00	; 0
 40a:	93 83       	std	Z+3, r25	; 0x03
 40c:	82 83       	std	Z+2, r24	; 0x02
	csArray[0].cAge = 21;
 40e:	25 e1       	ldi	r18, 0x15	; 21
 410:	30 e0       	ldi	r19, 0x00	; 0
 412:	3b ab       	std	Y+51, r19	; 0x33
 414:	2a ab       	std	Y+50, r18	; 0x32
	csArray[0].cBal = 10000;
 416:	80 e1       	ldi	r24, 0x10	; 16
 418:	97 e2       	ldi	r25, 0x27	; 39
 41a:	9d ab       	std	Y+53, r25	; 0x35
 41c:	8c ab       	std	Y+52, r24	; 0x34

	strcpy(csArray[1].cID, "a211 153 231 17E");
 41e:	81 e1       	ldi	r24, 0x11	; 17
 420:	e4 e5       	ldi	r30, 0x54	; 84
 422:	f1 e0       	ldi	r31, 0x01	; 1
 424:	ae e7       	ldi	r26, 0x7E	; 126
 426:	b2 e0       	ldi	r27, 0x02	; 2
 428:	01 90       	ld	r0, Z+
 42a:	0d 92       	st	X+, r0
 42c:	8a 95       	dec	r24
 42e:	e1 f7       	brne	.-8      	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
	strcpy(csArray[1].cName, "Jack");
 430:	85 e0       	ldi	r24, 0x05	; 5
 432:	e5 e6       	ldi	r30, 0x65	; 101
 434:	f1 e0       	ldi	r31, 0x01	; 1
 436:	ac e9       	ldi	r26, 0x9C	; 156
 438:	b2 e0       	ldi	r27, 0x02	; 2
 43a:	01 90       	ld	r0, Z+
 43c:	0d 92       	st	X+, r0
 43e:	8a 95       	dec	r24
 440:	e1 f7       	brne	.-8      	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
	csArray[1].cAge = 17;
 442:	81 e1       	ldi	r24, 0x11	; 17
 444:	90 e0       	ldi	r25, 0x00	; 0
 446:	90 93 b1 02 	sts	0x02B1, r25	; 0x8002b1 <csArray+0x69>
 44a:	80 93 b0 02 	sts	0x02B0, r24	; 0x8002b0 <csArray+0x68>
	csArray[1].cBal = 30000;
 44e:	80 e3       	ldi	r24, 0x30	; 48
 450:	95 e7       	ldi	r25, 0x75	; 117
 452:	90 93 b3 02 	sts	0x02B3, r25	; 0x8002b3 <csArray+0x6b>
 456:	80 93 b2 02 	sts	0x02B2, r24	; 0x8002b2 <csArray+0x6a>

	strcpy(csArray[2].cID, "a213 153 231 17E");
 45a:	81 e1       	ldi	r24, 0x11	; 17
 45c:	ea e6       	ldi	r30, 0x6A	; 106
 45e:	f1 e0       	ldi	r31, 0x01	; 1
 460:	a4 eb       	ldi	r26, 0xB4	; 180
 462:	b2 e0       	ldi	r27, 0x02	; 2
 464:	01 90       	ld	r0, Z+
 466:	0d 92       	st	X+, r0
 468:	8a 95       	dec	r24
 46a:	e1 f7       	brne	.-8      	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
	strcpy(csArray[2].cName, "John");
 46c:	85 e0       	ldi	r24, 0x05	; 5
 46e:	eb e7       	ldi	r30, 0x7B	; 123
 470:	f1 e0       	ldi	r31, 0x01	; 1
 472:	a2 ed       	ldi	r26, 0xD2	; 210
 474:	b2 e0       	ldi	r27, 0x02	; 2
 476:	01 90       	ld	r0, Z+
 478:	0d 92       	st	X+, r0
 47a:	8a 95       	dec	r24
 47c:	e1 f7       	brne	.-8      	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
	csArray[2].cAge = 32;
 47e:	80 e2       	ldi	r24, 0x20	; 32
 480:	90 e0       	ldi	r25, 0x00	; 0
 482:	90 93 e7 02 	sts	0x02E7, r25	; 0x8002e7 <csArray+0x9f>
 486:	80 93 e6 02 	sts	0x02E6, r24	; 0x8002e6 <csArray+0x9e>
	csArray[2].cBal = 40000;
 48a:	80 e4       	ldi	r24, 0x40	; 64
 48c:	9c e9       	ldi	r25, 0x9C	; 156
 48e:	90 93 e9 02 	sts	0x02E9, r25	; 0x8002e9 <csArray+0xa1>
 492:	80 93 e8 02 	sts	0x02E8, r24	; 0x8002e8 <csArray+0xa0>

	strcpy(csArray[3].cID, "a211 153 561 17E");
 496:	81 e1       	ldi	r24, 0x11	; 17
 498:	e0 e8       	ldi	r30, 0x80	; 128
 49a:	f1 e0       	ldi	r31, 0x01	; 1
 49c:	aa ee       	ldi	r26, 0xEA	; 234
 49e:	b2 e0       	ldi	r27, 0x02	; 2
 4a0:	01 90       	ld	r0, Z+
 4a2:	0d 92       	st	X+, r0
 4a4:	8a 95       	dec	r24
 4a6:	e1 f7       	brne	.-8      	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
	strcpy(csArray[3].cName, "Jane");
 4a8:	85 e0       	ldi	r24, 0x05	; 5
 4aa:	e1 e9       	ldi	r30, 0x91	; 145
 4ac:	f1 e0       	ldi	r31, 0x01	; 1
 4ae:	a8 e0       	ldi	r26, 0x08	; 8
 4b0:	b3 e0       	ldi	r27, 0x03	; 3
 4b2:	01 90       	ld	r0, Z+
 4b4:	0d 92       	st	X+, r0
 4b6:	8a 95       	dec	r24
 4b8:	e1 f7       	brne	.-8      	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
	csArray[3].cAge = 28;
 4ba:	8c e1       	ldi	r24, 0x1C	; 28
 4bc:	90 e0       	ldi	r25, 0x00	; 0
 4be:	90 93 1d 03 	sts	0x031D, r25	; 0x80031d <csArray+0xd5>
 4c2:	80 93 1c 03 	sts	0x031C, r24	; 0x80031c <csArray+0xd4>
	csArray[3].cBal = 20000;
 4c6:	80 e2       	ldi	r24, 0x20	; 32
 4c8:	9e e4       	ldi	r25, 0x4E	; 78
 4ca:	90 93 1f 03 	sts	0x031F, r25	; 0x80031f <csArray+0xd7>
 4ce:	80 93 1e 03 	sts	0x031E, r24	; 0x80031e <csArray+0xd6>

	strcpy(csArray[4].cID, "a204 153 231 17E");
 4d2:	81 e1       	ldi	r24, 0x11	; 17
 4d4:	e6 e9       	ldi	r30, 0x96	; 150
 4d6:	f1 e0       	ldi	r31, 0x01	; 1
 4d8:	a0 e2       	ldi	r26, 0x20	; 32
 4da:	b3 e0       	ldi	r27, 0x03	; 3
 4dc:	01 90       	ld	r0, Z+
 4de:	0d 92       	st	X+, r0
 4e0:	8a 95       	dec	r24
 4e2:	e1 f7       	brne	.-8      	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
	strcpy(csArray[4].cName, "Mary");
 4e4:	85 e0       	ldi	r24, 0x05	; 5
 4e6:	e7 ea       	ldi	r30, 0xA7	; 167
 4e8:	f1 e0       	ldi	r31, 0x01	; 1
 4ea:	ae e3       	ldi	r26, 0x3E	; 62
 4ec:	b3 e0       	ldi	r27, 0x03	; 3
 4ee:	01 90       	ld	r0, Z+
 4f0:	0d 92       	st	X+, r0
 4f2:	8a 95       	dec	r24
 4f4:	e1 f7       	brne	.-8      	; 0x4ee <__LOCK_REGION_LENGTH__+0xee>
	csArray[4].cAge = 56;
 4f6:	88 e3       	ldi	r24, 0x38	; 56
 4f8:	90 e0       	ldi	r25, 0x00	; 0
 4fa:	90 93 53 03 	sts	0x0353, r25	; 0x800353 <csArray+0x10b>
 4fe:	80 93 52 03 	sts	0x0352, r24	; 0x800352 <csArray+0x10a>
	csArray[4].cBal = 64000;
 502:	80 e0       	ldi	r24, 0x00	; 0
 504:	9a ef       	ldi	r25, 0xFA	; 250
 506:	90 93 55 03 	sts	0x0355, r25	; 0x800355 <csArray+0x10d>
 50a:	80 93 54 03 	sts	0x0354, r24	; 0x800354 <csArray+0x10c>

	/* 상품정보 데이터 저장 */
	strcpy(pArray[0].pName, "N/A");
 50e:	c6 ec       	ldi	r28, 0xC6	; 198
 510:	d1 e0       	ldi	r29, 0x01	; 1
 512:	8e e4       	ldi	r24, 0x4E	; 78
 514:	9f e2       	ldi	r25, 0x2F	; 47
 516:	99 83       	std	Y+1, r25	; 0x01
 518:	88 83       	st	Y, r24
 51a:	81 e4       	ldi	r24, 0x41	; 65
 51c:	90 e0       	ldi	r25, 0x00	; 0
 51e:	9b 83       	std	Y+3, r25	; 0x03
 520:	8a 83       	std	Y+2, r24	; 0x02
	pArray[0].price = 0;
 522:	1d 8a       	std	Y+21, r1	; 0x15
 524:	1c 8a       	std	Y+20, r1	; 0x14
	pArray[0].age = 0;
 526:	1f 8a       	std	Y+23, r1	; 0x17
 528:	1e 8a       	std	Y+22, r1	; 0x16
	pArray[0].stock = 10;
 52a:	8a e0       	ldi	r24, 0x0A	; 10
 52c:	90 e0       	ldi	r25, 0x00	; 0
 52e:	99 8f       	std	Y+25, r25	; 0x19
 530:	88 8f       	std	Y+24, r24	; 0x18
	
	strcpy(pArray[1].pName, "drink");
 532:	86 e0       	ldi	r24, 0x06	; 6
 534:	ec ea       	ldi	r30, 0xAC	; 172
 536:	f1 e0       	ldi	r31, 0x01	; 1
 538:	a0 ee       	ldi	r26, 0xE0	; 224
 53a:	b1 e0       	ldi	r27, 0x01	; 1
 53c:	01 90       	ld	r0, Z+
 53e:	0d 92       	st	X+, r0
 540:	8a 95       	dec	r24
 542:	e1 f7       	brne	.-8      	; 0x53c <__LOCK_REGION_LENGTH__+0x13c>
	pArray[1].price = 1500;
 544:	8c ed       	ldi	r24, 0xDC	; 220
 546:	95 e0       	ldi	r25, 0x05	; 5
 548:	9f a7       	std	Y+47, r25	; 0x2f
 54a:	8e a7       	std	Y+46, r24	; 0x2e
	pArray[1].age = 0;
 54c:	19 aa       	std	Y+49, r1	; 0x31
 54e:	18 aa       	std	Y+48, r1	; 0x30
	pArray[1].stock = 4;
 550:	84 e0       	ldi	r24, 0x04	; 4
 552:	90 e0       	ldi	r25, 0x00	; 0
 554:	9b ab       	std	Y+51, r25	; 0x33
 556:	8a ab       	std	Y+50, r24	; 0x32
	
	strcpy(pArray[2].pName, "cigar");
 558:	46 e0       	ldi	r20, 0x06	; 6
 55a:	e2 eb       	ldi	r30, 0xB2	; 178
 55c:	f1 e0       	ldi	r31, 0x01	; 1
 55e:	aa ef       	ldi	r26, 0xFA	; 250
 560:	b1 e0       	ldi	r27, 0x01	; 1
 562:	01 90       	ld	r0, Z+
 564:	0d 92       	st	X+, r0
 566:	4a 95       	dec	r20
 568:	e1 f7       	brne	.-8      	; 0x562 <__LOCK_REGION_LENGTH__+0x162>
	pArray[2].price = 4000;
 56a:	40 ea       	ldi	r20, 0xA0	; 160
 56c:	5f e0       	ldi	r21, 0x0F	; 15
 56e:	50 93 0f 02 	sts	0x020F, r21	; 0x80020f <__data_end+0x49>
 572:	40 93 0e 02 	sts	0x020E, r20	; 0x80020e <__data_end+0x48>
	pArray[2].age = 19;
 576:	43 e1       	ldi	r20, 0x13	; 19
 578:	50 e0       	ldi	r21, 0x00	; 0
 57a:	50 93 11 02 	sts	0x0211, r21	; 0x800211 <__data_end+0x4b>
 57e:	40 93 10 02 	sts	0x0210, r20	; 0x800210 <__data_end+0x4a>
	pArray[2].stock = 21;
 582:	30 93 13 02 	sts	0x0213, r19	; 0x800213 <__data_end+0x4d>
 586:	20 93 12 02 	sts	0x0212, r18	; 0x800212 <__data_end+0x4c>
	
	strcpy(pArray[3].pName, "snack");
 58a:	26 e0       	ldi	r18, 0x06	; 6
 58c:	e8 eb       	ldi	r30, 0xB8	; 184
 58e:	f1 e0       	ldi	r31, 0x01	; 1
 590:	a4 e1       	ldi	r26, 0x14	; 20
 592:	b2 e0       	ldi	r27, 0x02	; 2
 594:	01 90       	ld	r0, Z+
 596:	0d 92       	st	X+, r0
 598:	2a 95       	dec	r18
 59a:	e1 f7       	brne	.-8      	; 0x594 <__LOCK_REGION_LENGTH__+0x194>
	pArray[3].price = 1700;
 59c:	24 ea       	ldi	r18, 0xA4	; 164
 59e:	36 e0       	ldi	r19, 0x06	; 6
 5a0:	30 93 29 02 	sts	0x0229, r19	; 0x800229 <__data_end+0x63>
 5a4:	20 93 28 02 	sts	0x0228, r18	; 0x800228 <__data_end+0x62>
	pArray[3].age = 0;
 5a8:	10 92 2b 02 	sts	0x022B, r1	; 0x80022b <__data_end+0x65>
 5ac:	10 92 2a 02 	sts	0x022A, r1	; 0x80022a <__data_end+0x64>
	pArray[3].stock = 4;
 5b0:	90 93 2d 02 	sts	0x022D, r25	; 0x80022d <__data_end+0x67>
 5b4:	80 93 2c 02 	sts	0x022C, r24	; 0x80022c <__data_end+0x66>
	
	strcpy(pArray[4].pName, "coffee");
 5b8:	87 e0       	ldi	r24, 0x07	; 7
 5ba:	ee eb       	ldi	r30, 0xBE	; 190
 5bc:	f1 e0       	ldi	r31, 0x01	; 1
 5be:	ae e2       	ldi	r26, 0x2E	; 46
 5c0:	b2 e0       	ldi	r27, 0x02	; 2
 5c2:	01 90       	ld	r0, Z+
 5c4:	0d 92       	st	X+, r0
 5c6:	8a 95       	dec	r24
 5c8:	e1 f7       	brne	.-8      	; 0x5c2 <__LOCK_REGION_LENGTH__+0x1c2>
	pArray[4].price = 2500;
 5ca:	84 ec       	ldi	r24, 0xC4	; 196
 5cc:	99 e0       	ldi	r25, 0x09	; 9
 5ce:	90 93 43 02 	sts	0x0243, r25	; 0x800243 <__data_end+0x7d>
 5d2:	80 93 42 02 	sts	0x0242, r24	; 0x800242 <__data_end+0x7c>
	pArray[4].age = 15;
 5d6:	8f e0       	ldi	r24, 0x0F	; 15
 5d8:	90 e0       	ldi	r25, 0x00	; 0
 5da:	90 93 45 02 	sts	0x0245, r25	; 0x800245 <__data_end+0x7f>
 5de:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <__data_end+0x7e>
	pArray[4].stock = 9;
 5e2:	89 e0       	ldi	r24, 0x09	; 9
 5e4:	90 e0       	ldi	r25, 0x00	; 0
 5e6:	90 93 47 02 	sts	0x0247, r25	; 0x800247 <__data_end+0x81>
 5ea:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <__data_end+0x80>
 5ee:	df 91       	pop	r29
 5f0:	cf 91       	pop	r28
 5f2:	08 95       	ret

000005f4 <main>:
void calBalance(uint8_t index, uint8_t pIndex); //잔액계산

void dataInit(); // 고객정보 초기화

int main(void)
{
 5f4:	cf 93       	push	r28
 5f6:	df 93       	push	r29
 5f8:	cd b7       	in	r28, 0x3d	; 61
 5fa:	de b7       	in	r29, 0x3e	; 62
 5fc:	6e 97       	sbiw	r28, 0x1e	; 30
 5fe:	0f b6       	in	r0, 0x3f	; 63
 600:	f8 94       	cli
 602:	de bf       	out	0x3e, r29	; 62
 604:	0f be       	out	0x3f, r0	; 63
 606:	cd bf       	out	0x3d, r28	; 61
	Init_UART();
 608:	5f dd       	rcall	.-1346   	; 0xc8 <Init_UART>
	Init_BLUETOOTH();
 60a:	6b dd       	rcall	.-1322   	; 0xe2 <Init_BLUETOOTH>
	dataInit();
 60c:	ea de       	rcall	.-556    	; 0x3e2 <dataInit>
 60e:	fe 01       	movw	r30, r28
	
	uint8_t cardToken; // 수신받은 문자
	char cardNum[30] = {0}; // 수신받은 카드 번호
 610:	31 96       	adiw	r30, 0x01	; 1
 612:	8e e1       	ldi	r24, 0x1E	; 30
 614:	df 01       	movw	r26, r30
 616:	1d 92       	st	X+, r1
 618:	8a 95       	dec	r24
 61a:	e9 f7       	brne	.-6      	; 0x616 <main+0x22>
 61c:	ee 24       	eor	r14, r14
	uint8_t cardIdx; // 카드조회 인덱스
	int csIndex = -1; // 고객정보 배열 인덱스
 61e:	ea 94       	dec	r14
 620:	fe 2c       	mov	r15, r14
 622:	fe 01       	movw	r30, r28
	
    /* Replace with your application code */
    while (1) 
    {
		cardIdx = 0;
		memset(cardNum, 0, sizeof(cardNum));
 624:	31 96       	adiw	r30, 0x01	; 1
 626:	8e e1       	ldi	r24, 0x1E	; 30
 628:	df 01       	movw	r26, r30
 62a:	1d 92       	st	X+, r1
 62c:	8a 95       	dec	r24
 62e:	e9 f7       	brne	.-6      	; 0x62a <main+0x36>
	
	
    /* Replace with your application code */
    while (1) 
    {
		cardIdx = 0;
 630:	10 e0       	ldi	r17, 0x00	; 0
		memset(cardNum, 0, sizeof(cardNum));
		while(1){
			cardToken = UART0_receive();			
 632:	72 dd       	rcall	.-1308   	; 0x118 <UART0_receive>
 634:	91 e0       	ldi	r25, 0x01	; 1
			cardNum[cardIdx++] = cardToken;
 636:	91 0f       	add	r25, r17
 638:	e1 e0       	ldi	r30, 0x01	; 1
 63a:	f0 e0       	ldi	r31, 0x00	; 0
 63c:	ec 0f       	add	r30, r28
 63e:	fd 1f       	adc	r31, r29
 640:	e1 0f       	add	r30, r17
 642:	f1 1d       	adc	r31, r1
 644:	80 83       	st	Z, r24
 646:	19 2f       	mov	r17, r25
 648:	85 34       	cpi	r24, 0x45	; 69
			if(cardToken == 'E'){
 64a:	99 f7       	brne	.-26     	; 0x632 <main+0x3e>
 64c:	de 01       	movw	r26, r28
				cardNum[cardIdx] = '\0';
 64e:	11 96       	adiw	r26, 0x01	; 1
 650:	fd 01       	movw	r30, r26
 652:	e9 0f       	add	r30, r25
 654:	f1 1d       	adc	r31, r1
 656:	10 82       	st	Z, r1
 658:	fd 01       	movw	r30, r26
				break;
				}
		}
		/* 고객 정보 조회 및 전송 */
		if(((strlen(cardNum) > 13) && (strlen(cardNum) < 20)) && (cardNum[0] == 'a')){
 65a:	01 90       	ld	r0, Z+
 65c:	00 20       	and	r0, r0
 65e:	e9 f7       	brne	.-6      	; 0x65a <main+0x66>
 660:	31 97       	sbiw	r30, 0x01	; 1
 662:	ea 1b       	sub	r30, r26
 664:	fb 0b       	sbc	r31, r27
 666:	ee 30       	cpi	r30, 0x0E	; 14
 668:	f1 05       	cpc	r31, r1
 66a:	30 f1       	brcs	.+76     	; 0x6b8 <main+0xc4>
 66c:	74 97       	sbiw	r30, 0x14	; 20
 66e:	20 f5       	brcc	.+72     	; 0x6b8 <main+0xc4>
 670:	89 81       	ldd	r24, Y+1	; 0x01
 672:	81 36       	cpi	r24, 0x61	; 97
 674:	09 f5       	brne	.+66     	; 0x6b8 <main+0xc4>
			csIndex = checkCard(cardNum); // 카드번호로 고객 조회
 676:	cd 01       	movw	r24, r26
 678:	19 de       	rcall	.-974    	; 0x2ac <checkCard>
 67a:	7c 01       	movw	r14, r24
 67c:	99 23       	and	r25, r25
			
			if(csIndex < 0){
 67e:	2c f4       	brge	.+10     	; 0x68a <main+0x96>
				/* 고객정보 조회 실패 */
				sendInfo("1", 1);
 680:	61 e0       	ldi	r22, 0x01	; 1
 682:	82 e4       	ldi	r24, 0x42	; 66
 684:	91 e0       	ldi	r25, 0x01	; 1
 686:	34 de       	rcall	.-920    	; 0x2f0 <sendInfo>
 688:	cc cf       	rjmp	.-104    	; 0x622 <main+0x2e>
			}
			else{
				/* 고객 정보 조회 성공 */
				char* cusInfoStr = getCusInfo(csIndex);
 68a:	4a dd       	rcall	.-1388   	; 0x120 <getCusInfo>
 68c:	8c 01       	movw	r16, r24
 68e:	89 2b       	or	r24, r25
				if(cusInfoStr == NULL){
 690:	41 f2       	breq	.-112    	; 0x622 <main+0x2e>
					continue;
				}
				char* cusInfoBle = getBleInfo(csIndex);
 692:	8e 2d       	mov	r24, r14
 694:	7a dd       	rcall	.-1292   	; 0x18a <getBleInfo>
 696:	6c 01       	movw	r12, r24
				if(cusInfoBle == NULL){
 698:	89 2b       	or	r24, r25
 69a:	19 f4       	brne	.+6      	; 0x6a2 <main+0xae>
					free(cusInfoStr);
 69c:	c8 01       	movw	r24, r16
 69e:	d1 d0       	rcall	.+418    	; 0x842 <free>
					continue;
 6a0:	c0 cf       	rjmp	.-128    	; 0x622 <main+0x2e>
				}
				sendInfo(cusInfoStr,UART); // 고객정보 UART 전송
 6a2:	61 e0       	ldi	r22, 0x01	; 1
 6a4:	c8 01       	movw	r24, r16
 6a6:	24 de       	rcall	.-952    	; 0x2f0 <sendInfo>
				sendInfo(cusInfoBle,BLUETOOTH); // 고객정보 블루투스 전송
 6a8:	62 e0       	ldi	r22, 0x02	; 2
 6aa:	c6 01       	movw	r24, r12
 6ac:	21 de       	rcall	.-958    	; 0x2f0 <sendInfo>
				//sendInfo(cusInfoStr,BLUETOOTH); // Test
				
				free(cusInfoStr);
 6ae:	c8 01       	movw	r24, r16
 6b0:	c8 d0       	rcall	.+400    	; 0x842 <free>
 6b2:	c6 01       	movw	r24, r12
				free(cusInfoBle);
 6b4:	c6 d0       	rcall	.+396    	; 0x842 <free>
 6b6:	b5 cf       	rjmp	.-150    	; 0x622 <main+0x2e>
 6b8:	89 81       	ldd	r24, Y+1	; 0x01
			}
		}		

		/* 상품 정보 조회 및 전송 */
		else if(cardNum[0] == 'c'){
 6ba:	83 36       	cpi	r24, 0x63	; 99
 6bc:	09 f0       	breq	.+2      	; 0x6c0 <main+0xcc>
 6be:	b1 cf       	rjmp	.-158    	; 0x622 <main+0x2e>
 6c0:	8f e4       	ldi	r24, 0x4F	; 79
			UART1_transmit('O');
 6c2:	1f dd       	rcall	.-1474   	; 0x102 <UART1_transmit>
 6c4:	ff 20       	and	r15, r15
			if(csIndex < 0){
 6c6:	1c f4       	brge	.+6      	; 0x6ce <main+0xda>
 6c8:	88 e5       	ldi	r24, 0x58	; 88
				UART0_transmit('X');
 6ca:	22 dd       	rcall	.-1468   	; 0x110 <UART0_transmit>
 6cc:	aa cf       	rjmp	.-172    	; 0x622 <main+0x2e>
				continue;
 6ce:	0a 81       	ldd	r16, Y+2	; 0x02
			}
			
			int pIdx = cardNum[1]-'0';
 6d0:	00 2e       	mov	r0, r16
 6d2:	00 0c       	add	r0, r0
 6d4:	11 0b       	sbc	r17, r17
 6d6:	00 53       	subi	r16, 0x30	; 48
 6d8:	11 09       	sbc	r17, r1
			char* proInfoStr = getProInfo(pIdx);
 6da:	80 2f       	mov	r24, r16
 6dc:	87 dd       	rcall	.-1266   	; 0x1ec <getProInfo>
 6de:	6c 01       	movw	r12, r24
			if(proInfoStr == NULL){
 6e0:	89 2b       	or	r24, r25
 6e2:	09 f4       	brne	.+2      	; 0x6e6 <main+0xf2>
				continue;
			}
			char* stoInfoStr = getBleStock(pIdx);
 6e4:	9e cf       	rjmp	.-196    	; 0x622 <main+0x2e>
 6e6:	80 2f       	mov	r24, r16
			if(stoInfoStr == NULL){
 6e8:	b3 dd       	rcall	.-1178   	; 0x250 <getBleStock>
				free(proInfoStr);
 6ea:	5c 01       	movw	r10, r24
 6ec:	89 2b       	or	r24, r25
 6ee:	19 f4       	brne	.+6      	; 0x6f6 <main+0x102>
				continue;
 6f0:	c6 01       	movw	r24, r12
			}
			calBalance(csIndex, pIdx); // 잔액 계산
 6f2:	a7 d0       	rcall	.+334    	; 0x842 <free>
 6f4:	96 cf       	rjmp	.-212    	; 0x622 <main+0x2e>
 6f6:	60 2f       	mov	r22, r16
 6f8:	8e 2d       	mov	r24, r14
			sendInfo(proInfoStr, UART); // 상품 정보 UART 전송
 6fa:	1c de       	rcall	.-968    	; 0x334 <calBalance>
 6fc:	61 e0       	ldi	r22, 0x01	; 1
 6fe:	c6 01       	movw	r24, r12
 700:	f7 dd       	rcall	.-1042   	; 0x2f0 <sendInfo>
			sendInfo(stoInfoStr, BLUETOOTH); // 구매 고객 정보 블루투스 전송
 702:	62 e0       	ldi	r22, 0x02	; 2
 704:	c5 01       	movw	r24, r10
 706:	f4 dd       	rcall	.-1048   	; 0x2f0 <sendInfo>
 708:	c6 01       	movw	r24, r12
			
			free(proInfoStr);
 70a:	9b d0       	rcall	.+310    	; 0x842 <free>
 70c:	c5 01       	movw	r24, r10
 70e:	99 d0       	rcall	.+306    	; 0x842 <free>
			free(stoInfoStr);
 710:	88 cf       	rjmp	.-240    	; 0x622 <main+0x2e>

00000712 <malloc>:
 712:	0f 93       	push	r16
 714:	1f 93       	push	r17
 716:	cf 93       	push	r28
 718:	df 93       	push	r29
 71a:	82 30       	cpi	r24, 0x02	; 2
 71c:	91 05       	cpc	r25, r1
 71e:	10 f4       	brcc	.+4      	; 0x724 <malloc+0x12>
 720:	82 e0       	ldi	r24, 0x02	; 2
 722:	90 e0       	ldi	r25, 0x00	; 0
 724:	e0 91 58 03 	lds	r30, 0x0358	; 0x800358 <__flp>
 728:	f0 91 59 03 	lds	r31, 0x0359	; 0x800359 <__flp+0x1>
 72c:	20 e0       	ldi	r18, 0x00	; 0
 72e:	30 e0       	ldi	r19, 0x00	; 0
 730:	a0 e0       	ldi	r26, 0x00	; 0
 732:	b0 e0       	ldi	r27, 0x00	; 0
 734:	30 97       	sbiw	r30, 0x00	; 0
 736:	19 f1       	breq	.+70     	; 0x77e <malloc+0x6c>
 738:	40 81       	ld	r20, Z
 73a:	51 81       	ldd	r21, Z+1	; 0x01
 73c:	02 81       	ldd	r16, Z+2	; 0x02
 73e:	13 81       	ldd	r17, Z+3	; 0x03
 740:	48 17       	cp	r20, r24
 742:	59 07       	cpc	r21, r25
 744:	c8 f0       	brcs	.+50     	; 0x778 <malloc+0x66>
 746:	84 17       	cp	r24, r20
 748:	95 07       	cpc	r25, r21
 74a:	69 f4       	brne	.+26     	; 0x766 <malloc+0x54>
 74c:	10 97       	sbiw	r26, 0x00	; 0
 74e:	31 f0       	breq	.+12     	; 0x75c <malloc+0x4a>
 750:	12 96       	adiw	r26, 0x02	; 2
 752:	0c 93       	st	X, r16
 754:	12 97       	sbiw	r26, 0x02	; 2
 756:	13 96       	adiw	r26, 0x03	; 3
 758:	1c 93       	st	X, r17
 75a:	27 c0       	rjmp	.+78     	; 0x7aa <malloc+0x98>
 75c:	00 93 58 03 	sts	0x0358, r16	; 0x800358 <__flp>
 760:	10 93 59 03 	sts	0x0359, r17	; 0x800359 <__flp+0x1>
 764:	22 c0       	rjmp	.+68     	; 0x7aa <malloc+0x98>
 766:	21 15       	cp	r18, r1
 768:	31 05       	cpc	r19, r1
 76a:	19 f0       	breq	.+6      	; 0x772 <malloc+0x60>
 76c:	42 17       	cp	r20, r18
 76e:	53 07       	cpc	r21, r19
 770:	18 f4       	brcc	.+6      	; 0x778 <malloc+0x66>
 772:	9a 01       	movw	r18, r20
 774:	bd 01       	movw	r22, r26
 776:	ef 01       	movw	r28, r30
 778:	df 01       	movw	r26, r30
 77a:	f8 01       	movw	r30, r16
 77c:	db cf       	rjmp	.-74     	; 0x734 <malloc+0x22>
 77e:	21 15       	cp	r18, r1
 780:	31 05       	cpc	r19, r1
 782:	f9 f0       	breq	.+62     	; 0x7c2 <malloc+0xb0>
 784:	28 1b       	sub	r18, r24
 786:	39 0b       	sbc	r19, r25
 788:	24 30       	cpi	r18, 0x04	; 4
 78a:	31 05       	cpc	r19, r1
 78c:	80 f4       	brcc	.+32     	; 0x7ae <malloc+0x9c>
 78e:	8a 81       	ldd	r24, Y+2	; 0x02
 790:	9b 81       	ldd	r25, Y+3	; 0x03
 792:	61 15       	cp	r22, r1
 794:	71 05       	cpc	r23, r1
 796:	21 f0       	breq	.+8      	; 0x7a0 <malloc+0x8e>
 798:	fb 01       	movw	r30, r22
 79a:	93 83       	std	Z+3, r25	; 0x03
 79c:	82 83       	std	Z+2, r24	; 0x02
 79e:	04 c0       	rjmp	.+8      	; 0x7a8 <malloc+0x96>
 7a0:	90 93 59 03 	sts	0x0359, r25	; 0x800359 <__flp+0x1>
 7a4:	80 93 58 03 	sts	0x0358, r24	; 0x800358 <__flp>
 7a8:	fe 01       	movw	r30, r28
 7aa:	32 96       	adiw	r30, 0x02	; 2
 7ac:	44 c0       	rjmp	.+136    	; 0x836 <malloc+0x124>
 7ae:	fe 01       	movw	r30, r28
 7b0:	e2 0f       	add	r30, r18
 7b2:	f3 1f       	adc	r31, r19
 7b4:	81 93       	st	Z+, r24
 7b6:	91 93       	st	Z+, r25
 7b8:	22 50       	subi	r18, 0x02	; 2
 7ba:	31 09       	sbc	r19, r1
 7bc:	39 83       	std	Y+1, r19	; 0x01
 7be:	28 83       	st	Y, r18
 7c0:	3a c0       	rjmp	.+116    	; 0x836 <malloc+0x124>
 7c2:	20 91 56 03 	lds	r18, 0x0356	; 0x800356 <__brkval>
 7c6:	30 91 57 03 	lds	r19, 0x0357	; 0x800357 <__brkval+0x1>
 7ca:	23 2b       	or	r18, r19
 7cc:	41 f4       	brne	.+16     	; 0x7de <malloc+0xcc>
 7ce:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 7d2:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 7d6:	30 93 57 03 	sts	0x0357, r19	; 0x800357 <__brkval+0x1>
 7da:	20 93 56 03 	sts	0x0356, r18	; 0x800356 <__brkval>
 7de:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 7e2:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 7e6:	21 15       	cp	r18, r1
 7e8:	31 05       	cpc	r19, r1
 7ea:	41 f4       	brne	.+16     	; 0x7fc <malloc+0xea>
 7ec:	2d b7       	in	r18, 0x3d	; 61
 7ee:	3e b7       	in	r19, 0x3e	; 62
 7f0:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 7f4:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 7f8:	24 1b       	sub	r18, r20
 7fa:	35 0b       	sbc	r19, r21
 7fc:	e0 91 56 03 	lds	r30, 0x0356	; 0x800356 <__brkval>
 800:	f0 91 57 03 	lds	r31, 0x0357	; 0x800357 <__brkval+0x1>
 804:	e2 17       	cp	r30, r18
 806:	f3 07       	cpc	r31, r19
 808:	a0 f4       	brcc	.+40     	; 0x832 <malloc+0x120>
 80a:	2e 1b       	sub	r18, r30
 80c:	3f 0b       	sbc	r19, r31
 80e:	28 17       	cp	r18, r24
 810:	39 07       	cpc	r19, r25
 812:	78 f0       	brcs	.+30     	; 0x832 <malloc+0x120>
 814:	ac 01       	movw	r20, r24
 816:	4e 5f       	subi	r20, 0xFE	; 254
 818:	5f 4f       	sbci	r21, 0xFF	; 255
 81a:	24 17       	cp	r18, r20
 81c:	35 07       	cpc	r19, r21
 81e:	48 f0       	brcs	.+18     	; 0x832 <malloc+0x120>
 820:	4e 0f       	add	r20, r30
 822:	5f 1f       	adc	r21, r31
 824:	50 93 57 03 	sts	0x0357, r21	; 0x800357 <__brkval+0x1>
 828:	40 93 56 03 	sts	0x0356, r20	; 0x800356 <__brkval>
 82c:	81 93       	st	Z+, r24
 82e:	91 93       	st	Z+, r25
 830:	02 c0       	rjmp	.+4      	; 0x836 <malloc+0x124>
 832:	e0 e0       	ldi	r30, 0x00	; 0
 834:	f0 e0       	ldi	r31, 0x00	; 0
 836:	cf 01       	movw	r24, r30
 838:	df 91       	pop	r29
 83a:	cf 91       	pop	r28
 83c:	1f 91       	pop	r17
 83e:	0f 91       	pop	r16
 840:	08 95       	ret

00000842 <free>:
 842:	cf 93       	push	r28
 844:	df 93       	push	r29
 846:	00 97       	sbiw	r24, 0x00	; 0
 848:	09 f4       	brne	.+2      	; 0x84c <free+0xa>
 84a:	81 c0       	rjmp	.+258    	; 0x94e <free+0x10c>
 84c:	fc 01       	movw	r30, r24
 84e:	32 97       	sbiw	r30, 0x02	; 2
 850:	13 82       	std	Z+3, r1	; 0x03
 852:	12 82       	std	Z+2, r1	; 0x02
 854:	a0 91 58 03 	lds	r26, 0x0358	; 0x800358 <__flp>
 858:	b0 91 59 03 	lds	r27, 0x0359	; 0x800359 <__flp+0x1>
 85c:	10 97       	sbiw	r26, 0x00	; 0
 85e:	81 f4       	brne	.+32     	; 0x880 <free+0x3e>
 860:	20 81       	ld	r18, Z
 862:	31 81       	ldd	r19, Z+1	; 0x01
 864:	82 0f       	add	r24, r18
 866:	93 1f       	adc	r25, r19
 868:	20 91 56 03 	lds	r18, 0x0356	; 0x800356 <__brkval>
 86c:	30 91 57 03 	lds	r19, 0x0357	; 0x800357 <__brkval+0x1>
 870:	28 17       	cp	r18, r24
 872:	39 07       	cpc	r19, r25
 874:	51 f5       	brne	.+84     	; 0x8ca <free+0x88>
 876:	f0 93 57 03 	sts	0x0357, r31	; 0x800357 <__brkval+0x1>
 87a:	e0 93 56 03 	sts	0x0356, r30	; 0x800356 <__brkval>
 87e:	67 c0       	rjmp	.+206    	; 0x94e <free+0x10c>
 880:	ed 01       	movw	r28, r26
 882:	20 e0       	ldi	r18, 0x00	; 0
 884:	30 e0       	ldi	r19, 0x00	; 0
 886:	ce 17       	cp	r28, r30
 888:	df 07       	cpc	r29, r31
 88a:	40 f4       	brcc	.+16     	; 0x89c <free+0x5a>
 88c:	4a 81       	ldd	r20, Y+2	; 0x02
 88e:	5b 81       	ldd	r21, Y+3	; 0x03
 890:	9e 01       	movw	r18, r28
 892:	41 15       	cp	r20, r1
 894:	51 05       	cpc	r21, r1
 896:	f1 f0       	breq	.+60     	; 0x8d4 <free+0x92>
 898:	ea 01       	movw	r28, r20
 89a:	f5 cf       	rjmp	.-22     	; 0x886 <free+0x44>
 89c:	d3 83       	std	Z+3, r29	; 0x03
 89e:	c2 83       	std	Z+2, r28	; 0x02
 8a0:	40 81       	ld	r20, Z
 8a2:	51 81       	ldd	r21, Z+1	; 0x01
 8a4:	84 0f       	add	r24, r20
 8a6:	95 1f       	adc	r25, r21
 8a8:	c8 17       	cp	r28, r24
 8aa:	d9 07       	cpc	r29, r25
 8ac:	59 f4       	brne	.+22     	; 0x8c4 <free+0x82>
 8ae:	88 81       	ld	r24, Y
 8b0:	99 81       	ldd	r25, Y+1	; 0x01
 8b2:	84 0f       	add	r24, r20
 8b4:	95 1f       	adc	r25, r21
 8b6:	02 96       	adiw	r24, 0x02	; 2
 8b8:	91 83       	std	Z+1, r25	; 0x01
 8ba:	80 83       	st	Z, r24
 8bc:	8a 81       	ldd	r24, Y+2	; 0x02
 8be:	9b 81       	ldd	r25, Y+3	; 0x03
 8c0:	93 83       	std	Z+3, r25	; 0x03
 8c2:	82 83       	std	Z+2, r24	; 0x02
 8c4:	21 15       	cp	r18, r1
 8c6:	31 05       	cpc	r19, r1
 8c8:	29 f4       	brne	.+10     	; 0x8d4 <free+0x92>
 8ca:	f0 93 59 03 	sts	0x0359, r31	; 0x800359 <__flp+0x1>
 8ce:	e0 93 58 03 	sts	0x0358, r30	; 0x800358 <__flp>
 8d2:	3d c0       	rjmp	.+122    	; 0x94e <free+0x10c>
 8d4:	e9 01       	movw	r28, r18
 8d6:	fb 83       	std	Y+3, r31	; 0x03
 8d8:	ea 83       	std	Y+2, r30	; 0x02
 8da:	49 91       	ld	r20, Y+
 8dc:	59 91       	ld	r21, Y+
 8de:	c4 0f       	add	r28, r20
 8e0:	d5 1f       	adc	r29, r21
 8e2:	ec 17       	cp	r30, r28
 8e4:	fd 07       	cpc	r31, r29
 8e6:	61 f4       	brne	.+24     	; 0x900 <free+0xbe>
 8e8:	80 81       	ld	r24, Z
 8ea:	91 81       	ldd	r25, Z+1	; 0x01
 8ec:	84 0f       	add	r24, r20
 8ee:	95 1f       	adc	r25, r21
 8f0:	02 96       	adiw	r24, 0x02	; 2
 8f2:	e9 01       	movw	r28, r18
 8f4:	99 83       	std	Y+1, r25	; 0x01
 8f6:	88 83       	st	Y, r24
 8f8:	82 81       	ldd	r24, Z+2	; 0x02
 8fa:	93 81       	ldd	r25, Z+3	; 0x03
 8fc:	9b 83       	std	Y+3, r25	; 0x03
 8fe:	8a 83       	std	Y+2, r24	; 0x02
 900:	e0 e0       	ldi	r30, 0x00	; 0
 902:	f0 e0       	ldi	r31, 0x00	; 0
 904:	12 96       	adiw	r26, 0x02	; 2
 906:	8d 91       	ld	r24, X+
 908:	9c 91       	ld	r25, X
 90a:	13 97       	sbiw	r26, 0x03	; 3
 90c:	00 97       	sbiw	r24, 0x00	; 0
 90e:	19 f0       	breq	.+6      	; 0x916 <free+0xd4>
 910:	fd 01       	movw	r30, r26
 912:	dc 01       	movw	r26, r24
 914:	f7 cf       	rjmp	.-18     	; 0x904 <free+0xc2>
 916:	8d 91       	ld	r24, X+
 918:	9c 91       	ld	r25, X
 91a:	11 97       	sbiw	r26, 0x01	; 1
 91c:	9d 01       	movw	r18, r26
 91e:	2e 5f       	subi	r18, 0xFE	; 254
 920:	3f 4f       	sbci	r19, 0xFF	; 255
 922:	82 0f       	add	r24, r18
 924:	93 1f       	adc	r25, r19
 926:	20 91 56 03 	lds	r18, 0x0356	; 0x800356 <__brkval>
 92a:	30 91 57 03 	lds	r19, 0x0357	; 0x800357 <__brkval+0x1>
 92e:	28 17       	cp	r18, r24
 930:	39 07       	cpc	r19, r25
 932:	69 f4       	brne	.+26     	; 0x94e <free+0x10c>
 934:	30 97       	sbiw	r30, 0x00	; 0
 936:	29 f4       	brne	.+10     	; 0x942 <free+0x100>
 938:	10 92 59 03 	sts	0x0359, r1	; 0x800359 <__flp+0x1>
 93c:	10 92 58 03 	sts	0x0358, r1	; 0x800358 <__flp>
 940:	02 c0       	rjmp	.+4      	; 0x946 <free+0x104>
 942:	13 82       	std	Z+3, r1	; 0x03
 944:	12 82       	std	Z+2, r1	; 0x02
 946:	b0 93 57 03 	sts	0x0357, r27	; 0x800357 <__brkval+0x1>
 94a:	a0 93 56 03 	sts	0x0356, r26	; 0x800356 <__brkval>
 94e:	df 91       	pop	r29
 950:	cf 91       	pop	r28
 952:	08 95       	ret

00000954 <strcmp>:
 954:	fb 01       	movw	r30, r22
 956:	dc 01       	movw	r26, r24
 958:	8d 91       	ld	r24, X+
 95a:	01 90       	ld	r0, Z+
 95c:	80 19       	sub	r24, r0
 95e:	01 10       	cpse	r0, r1
 960:	d9 f3       	breq	.-10     	; 0x958 <strcmp+0x4>
 962:	99 0b       	sbc	r25, r25
 964:	08 95       	ret

00000966 <sprintf>:
 966:	0f 93       	push	r16
 968:	1f 93       	push	r17
 96a:	cf 93       	push	r28
 96c:	df 93       	push	r29
 96e:	cd b7       	in	r28, 0x3d	; 61
 970:	de b7       	in	r29, 0x3e	; 62
 972:	2e 97       	sbiw	r28, 0x0e	; 14
 974:	0f b6       	in	r0, 0x3f	; 63
 976:	f8 94       	cli
 978:	de bf       	out	0x3e, r29	; 62
 97a:	0f be       	out	0x3f, r0	; 63
 97c:	cd bf       	out	0x3d, r28	; 61
 97e:	0d 89       	ldd	r16, Y+21	; 0x15
 980:	1e 89       	ldd	r17, Y+22	; 0x16
 982:	86 e0       	ldi	r24, 0x06	; 6
 984:	8c 83       	std	Y+4, r24	; 0x04
 986:	1a 83       	std	Y+2, r17	; 0x02
 988:	09 83       	std	Y+1, r16	; 0x01
 98a:	8f ef       	ldi	r24, 0xFF	; 255
 98c:	9f e7       	ldi	r25, 0x7F	; 127
 98e:	9e 83       	std	Y+6, r25	; 0x06
 990:	8d 83       	std	Y+5, r24	; 0x05
 992:	ae 01       	movw	r20, r28
 994:	47 5e       	subi	r20, 0xE7	; 231
 996:	5f 4f       	sbci	r21, 0xFF	; 255
 998:	6f 89       	ldd	r22, Y+23	; 0x17
 99a:	78 8d       	ldd	r23, Y+24	; 0x18
 99c:	ce 01       	movw	r24, r28
 99e:	01 96       	adiw	r24, 0x01	; 1
 9a0:	10 d0       	rcall	.+32     	; 0x9c2 <vfprintf>
 9a2:	ef 81       	ldd	r30, Y+7	; 0x07
 9a4:	f8 85       	ldd	r31, Y+8	; 0x08
 9a6:	e0 0f       	add	r30, r16
 9a8:	f1 1f       	adc	r31, r17
 9aa:	10 82       	st	Z, r1
 9ac:	2e 96       	adiw	r28, 0x0e	; 14
 9ae:	0f b6       	in	r0, 0x3f	; 63
 9b0:	f8 94       	cli
 9b2:	de bf       	out	0x3e, r29	; 62
 9b4:	0f be       	out	0x3f, r0	; 63
 9b6:	cd bf       	out	0x3d, r28	; 61
 9b8:	df 91       	pop	r29
 9ba:	cf 91       	pop	r28
 9bc:	1f 91       	pop	r17
 9be:	0f 91       	pop	r16
 9c0:	08 95       	ret

000009c2 <vfprintf>:
 9c2:	2f 92       	push	r2
 9c4:	3f 92       	push	r3
 9c6:	4f 92       	push	r4
 9c8:	5f 92       	push	r5
 9ca:	6f 92       	push	r6
 9cc:	7f 92       	push	r7
 9ce:	8f 92       	push	r8
 9d0:	9f 92       	push	r9
 9d2:	af 92       	push	r10
 9d4:	bf 92       	push	r11
 9d6:	cf 92       	push	r12
 9d8:	df 92       	push	r13
 9da:	ef 92       	push	r14
 9dc:	ff 92       	push	r15
 9de:	0f 93       	push	r16
 9e0:	1f 93       	push	r17
 9e2:	cf 93       	push	r28
 9e4:	df 93       	push	r29
 9e6:	cd b7       	in	r28, 0x3d	; 61
 9e8:	de b7       	in	r29, 0x3e	; 62
 9ea:	2b 97       	sbiw	r28, 0x0b	; 11
 9ec:	0f b6       	in	r0, 0x3f	; 63
 9ee:	f8 94       	cli
 9f0:	de bf       	out	0x3e, r29	; 62
 9f2:	0f be       	out	0x3f, r0	; 63
 9f4:	cd bf       	out	0x3d, r28	; 61
 9f6:	6c 01       	movw	r12, r24
 9f8:	7b 01       	movw	r14, r22
 9fa:	8a 01       	movw	r16, r20
 9fc:	fc 01       	movw	r30, r24
 9fe:	17 82       	std	Z+7, r1	; 0x07
 a00:	16 82       	std	Z+6, r1	; 0x06
 a02:	83 81       	ldd	r24, Z+3	; 0x03
 a04:	81 ff       	sbrs	r24, 1
 a06:	bf c1       	rjmp	.+894    	; 0xd86 <vfprintf+0x3c4>
 a08:	ce 01       	movw	r24, r28
 a0a:	01 96       	adiw	r24, 0x01	; 1
 a0c:	3c 01       	movw	r6, r24
 a0e:	f6 01       	movw	r30, r12
 a10:	93 81       	ldd	r25, Z+3	; 0x03
 a12:	f7 01       	movw	r30, r14
 a14:	93 fd       	sbrc	r25, 3
 a16:	85 91       	lpm	r24, Z+
 a18:	93 ff       	sbrs	r25, 3
 a1a:	81 91       	ld	r24, Z+
 a1c:	7f 01       	movw	r14, r30
 a1e:	88 23       	and	r24, r24
 a20:	09 f4       	brne	.+2      	; 0xa24 <vfprintf+0x62>
 a22:	ad c1       	rjmp	.+858    	; 0xd7e <vfprintf+0x3bc>
 a24:	85 32       	cpi	r24, 0x25	; 37
 a26:	39 f4       	brne	.+14     	; 0xa36 <vfprintf+0x74>
 a28:	93 fd       	sbrc	r25, 3
 a2a:	85 91       	lpm	r24, Z+
 a2c:	93 ff       	sbrs	r25, 3
 a2e:	81 91       	ld	r24, Z+
 a30:	7f 01       	movw	r14, r30
 a32:	85 32       	cpi	r24, 0x25	; 37
 a34:	21 f4       	brne	.+8      	; 0xa3e <vfprintf+0x7c>
 a36:	b6 01       	movw	r22, r12
 a38:	90 e0       	ldi	r25, 0x00	; 0
 a3a:	d6 d1       	rcall	.+940    	; 0xde8 <fputc>
 a3c:	e8 cf       	rjmp	.-48     	; 0xa0e <vfprintf+0x4c>
 a3e:	91 2c       	mov	r9, r1
 a40:	21 2c       	mov	r2, r1
 a42:	31 2c       	mov	r3, r1
 a44:	ff e1       	ldi	r31, 0x1F	; 31
 a46:	f3 15       	cp	r31, r3
 a48:	d8 f0       	brcs	.+54     	; 0xa80 <vfprintf+0xbe>
 a4a:	8b 32       	cpi	r24, 0x2B	; 43
 a4c:	79 f0       	breq	.+30     	; 0xa6c <vfprintf+0xaa>
 a4e:	38 f4       	brcc	.+14     	; 0xa5e <vfprintf+0x9c>
 a50:	80 32       	cpi	r24, 0x20	; 32
 a52:	79 f0       	breq	.+30     	; 0xa72 <vfprintf+0xb0>
 a54:	83 32       	cpi	r24, 0x23	; 35
 a56:	a1 f4       	brne	.+40     	; 0xa80 <vfprintf+0xbe>
 a58:	23 2d       	mov	r18, r3
 a5a:	20 61       	ori	r18, 0x10	; 16
 a5c:	1d c0       	rjmp	.+58     	; 0xa98 <vfprintf+0xd6>
 a5e:	8d 32       	cpi	r24, 0x2D	; 45
 a60:	61 f0       	breq	.+24     	; 0xa7a <vfprintf+0xb8>
 a62:	80 33       	cpi	r24, 0x30	; 48
 a64:	69 f4       	brne	.+26     	; 0xa80 <vfprintf+0xbe>
 a66:	23 2d       	mov	r18, r3
 a68:	21 60       	ori	r18, 0x01	; 1
 a6a:	16 c0       	rjmp	.+44     	; 0xa98 <vfprintf+0xd6>
 a6c:	83 2d       	mov	r24, r3
 a6e:	82 60       	ori	r24, 0x02	; 2
 a70:	38 2e       	mov	r3, r24
 a72:	e3 2d       	mov	r30, r3
 a74:	e4 60       	ori	r30, 0x04	; 4
 a76:	3e 2e       	mov	r3, r30
 a78:	2a c0       	rjmp	.+84     	; 0xace <vfprintf+0x10c>
 a7a:	f3 2d       	mov	r31, r3
 a7c:	f8 60       	ori	r31, 0x08	; 8
 a7e:	1d c0       	rjmp	.+58     	; 0xaba <vfprintf+0xf8>
 a80:	37 fc       	sbrc	r3, 7
 a82:	2d c0       	rjmp	.+90     	; 0xade <vfprintf+0x11c>
 a84:	20 ed       	ldi	r18, 0xD0	; 208
 a86:	28 0f       	add	r18, r24
 a88:	2a 30       	cpi	r18, 0x0A	; 10
 a8a:	40 f0       	brcs	.+16     	; 0xa9c <vfprintf+0xda>
 a8c:	8e 32       	cpi	r24, 0x2E	; 46
 a8e:	b9 f4       	brne	.+46     	; 0xabe <vfprintf+0xfc>
 a90:	36 fc       	sbrc	r3, 6
 a92:	75 c1       	rjmp	.+746    	; 0xd7e <vfprintf+0x3bc>
 a94:	23 2d       	mov	r18, r3
 a96:	20 64       	ori	r18, 0x40	; 64
 a98:	32 2e       	mov	r3, r18
 a9a:	19 c0       	rjmp	.+50     	; 0xace <vfprintf+0x10c>
 a9c:	36 fe       	sbrs	r3, 6
 a9e:	06 c0       	rjmp	.+12     	; 0xaac <vfprintf+0xea>
 aa0:	8a e0       	ldi	r24, 0x0A	; 10
 aa2:	98 9e       	mul	r9, r24
 aa4:	20 0d       	add	r18, r0
 aa6:	11 24       	eor	r1, r1
 aa8:	92 2e       	mov	r9, r18
 aaa:	11 c0       	rjmp	.+34     	; 0xace <vfprintf+0x10c>
 aac:	ea e0       	ldi	r30, 0x0A	; 10
 aae:	2e 9e       	mul	r2, r30
 ab0:	20 0d       	add	r18, r0
 ab2:	11 24       	eor	r1, r1
 ab4:	22 2e       	mov	r2, r18
 ab6:	f3 2d       	mov	r31, r3
 ab8:	f0 62       	ori	r31, 0x20	; 32
 aba:	3f 2e       	mov	r3, r31
 abc:	08 c0       	rjmp	.+16     	; 0xace <vfprintf+0x10c>
 abe:	8c 36       	cpi	r24, 0x6C	; 108
 ac0:	21 f4       	brne	.+8      	; 0xaca <vfprintf+0x108>
 ac2:	83 2d       	mov	r24, r3
 ac4:	80 68       	ori	r24, 0x80	; 128
 ac6:	38 2e       	mov	r3, r24
 ac8:	02 c0       	rjmp	.+4      	; 0xace <vfprintf+0x10c>
 aca:	88 36       	cpi	r24, 0x68	; 104
 acc:	41 f4       	brne	.+16     	; 0xade <vfprintf+0x11c>
 ace:	f7 01       	movw	r30, r14
 ad0:	93 fd       	sbrc	r25, 3
 ad2:	85 91       	lpm	r24, Z+
 ad4:	93 ff       	sbrs	r25, 3
 ad6:	81 91       	ld	r24, Z+
 ad8:	7f 01       	movw	r14, r30
 ada:	81 11       	cpse	r24, r1
 adc:	b3 cf       	rjmp	.-154    	; 0xa44 <vfprintf+0x82>
 ade:	98 2f       	mov	r25, r24
 ae0:	9f 7d       	andi	r25, 0xDF	; 223
 ae2:	95 54       	subi	r25, 0x45	; 69
 ae4:	93 30       	cpi	r25, 0x03	; 3
 ae6:	28 f4       	brcc	.+10     	; 0xaf2 <vfprintf+0x130>
 ae8:	0c 5f       	subi	r16, 0xFC	; 252
 aea:	1f 4f       	sbci	r17, 0xFF	; 255
 aec:	9f e3       	ldi	r25, 0x3F	; 63
 aee:	99 83       	std	Y+1, r25	; 0x01
 af0:	0d c0       	rjmp	.+26     	; 0xb0c <vfprintf+0x14a>
 af2:	83 36       	cpi	r24, 0x63	; 99
 af4:	31 f0       	breq	.+12     	; 0xb02 <vfprintf+0x140>
 af6:	83 37       	cpi	r24, 0x73	; 115
 af8:	71 f0       	breq	.+28     	; 0xb16 <vfprintf+0x154>
 afa:	83 35       	cpi	r24, 0x53	; 83
 afc:	09 f0       	breq	.+2      	; 0xb00 <vfprintf+0x13e>
 afe:	55 c0       	rjmp	.+170    	; 0xbaa <vfprintf+0x1e8>
 b00:	20 c0       	rjmp	.+64     	; 0xb42 <vfprintf+0x180>
 b02:	f8 01       	movw	r30, r16
 b04:	80 81       	ld	r24, Z
 b06:	89 83       	std	Y+1, r24	; 0x01
 b08:	0e 5f       	subi	r16, 0xFE	; 254
 b0a:	1f 4f       	sbci	r17, 0xFF	; 255
 b0c:	88 24       	eor	r8, r8
 b0e:	83 94       	inc	r8
 b10:	91 2c       	mov	r9, r1
 b12:	53 01       	movw	r10, r6
 b14:	12 c0       	rjmp	.+36     	; 0xb3a <vfprintf+0x178>
 b16:	28 01       	movw	r4, r16
 b18:	f2 e0       	ldi	r31, 0x02	; 2
 b1a:	4f 0e       	add	r4, r31
 b1c:	51 1c       	adc	r5, r1
 b1e:	f8 01       	movw	r30, r16
 b20:	a0 80       	ld	r10, Z
 b22:	b1 80       	ldd	r11, Z+1	; 0x01
 b24:	36 fe       	sbrs	r3, 6
 b26:	03 c0       	rjmp	.+6      	; 0xb2e <vfprintf+0x16c>
 b28:	69 2d       	mov	r22, r9
 b2a:	70 e0       	ldi	r23, 0x00	; 0
 b2c:	02 c0       	rjmp	.+4      	; 0xb32 <vfprintf+0x170>
 b2e:	6f ef       	ldi	r22, 0xFF	; 255
 b30:	7f ef       	ldi	r23, 0xFF	; 255
 b32:	c5 01       	movw	r24, r10
 b34:	4e d1       	rcall	.+668    	; 0xdd2 <strnlen>
 b36:	4c 01       	movw	r8, r24
 b38:	82 01       	movw	r16, r4
 b3a:	f3 2d       	mov	r31, r3
 b3c:	ff 77       	andi	r31, 0x7F	; 127
 b3e:	3f 2e       	mov	r3, r31
 b40:	15 c0       	rjmp	.+42     	; 0xb6c <vfprintf+0x1aa>
 b42:	28 01       	movw	r4, r16
 b44:	22 e0       	ldi	r18, 0x02	; 2
 b46:	42 0e       	add	r4, r18
 b48:	51 1c       	adc	r5, r1
 b4a:	f8 01       	movw	r30, r16
 b4c:	a0 80       	ld	r10, Z
 b4e:	b1 80       	ldd	r11, Z+1	; 0x01
 b50:	36 fe       	sbrs	r3, 6
 b52:	03 c0       	rjmp	.+6      	; 0xb5a <vfprintf+0x198>
 b54:	69 2d       	mov	r22, r9
 b56:	70 e0       	ldi	r23, 0x00	; 0
 b58:	02 c0       	rjmp	.+4      	; 0xb5e <vfprintf+0x19c>
 b5a:	6f ef       	ldi	r22, 0xFF	; 255
 b5c:	7f ef       	ldi	r23, 0xFF	; 255
 b5e:	c5 01       	movw	r24, r10
 b60:	2d d1       	rcall	.+602    	; 0xdbc <strnlen_P>
 b62:	4c 01       	movw	r8, r24
 b64:	f3 2d       	mov	r31, r3
 b66:	f0 68       	ori	r31, 0x80	; 128
 b68:	3f 2e       	mov	r3, r31
 b6a:	82 01       	movw	r16, r4
 b6c:	33 fc       	sbrc	r3, 3
 b6e:	19 c0       	rjmp	.+50     	; 0xba2 <vfprintf+0x1e0>
 b70:	82 2d       	mov	r24, r2
 b72:	90 e0       	ldi	r25, 0x00	; 0
 b74:	88 16       	cp	r8, r24
 b76:	99 06       	cpc	r9, r25
 b78:	a0 f4       	brcc	.+40     	; 0xba2 <vfprintf+0x1e0>
 b7a:	b6 01       	movw	r22, r12
 b7c:	80 e2       	ldi	r24, 0x20	; 32
 b7e:	90 e0       	ldi	r25, 0x00	; 0
 b80:	33 d1       	rcall	.+614    	; 0xde8 <fputc>
 b82:	2a 94       	dec	r2
 b84:	f5 cf       	rjmp	.-22     	; 0xb70 <vfprintf+0x1ae>
 b86:	f5 01       	movw	r30, r10
 b88:	37 fc       	sbrc	r3, 7
 b8a:	85 91       	lpm	r24, Z+
 b8c:	37 fe       	sbrs	r3, 7
 b8e:	81 91       	ld	r24, Z+
 b90:	5f 01       	movw	r10, r30
 b92:	b6 01       	movw	r22, r12
 b94:	90 e0       	ldi	r25, 0x00	; 0
 b96:	28 d1       	rcall	.+592    	; 0xde8 <fputc>
 b98:	21 10       	cpse	r2, r1
 b9a:	2a 94       	dec	r2
 b9c:	21 e0       	ldi	r18, 0x01	; 1
 b9e:	82 1a       	sub	r8, r18
 ba0:	91 08       	sbc	r9, r1
 ba2:	81 14       	cp	r8, r1
 ba4:	91 04       	cpc	r9, r1
 ba6:	79 f7       	brne	.-34     	; 0xb86 <vfprintf+0x1c4>
 ba8:	e1 c0       	rjmp	.+450    	; 0xd6c <vfprintf+0x3aa>
 baa:	84 36       	cpi	r24, 0x64	; 100
 bac:	11 f0       	breq	.+4      	; 0xbb2 <vfprintf+0x1f0>
 bae:	89 36       	cpi	r24, 0x69	; 105
 bb0:	39 f5       	brne	.+78     	; 0xc00 <vfprintf+0x23e>
 bb2:	f8 01       	movw	r30, r16
 bb4:	37 fe       	sbrs	r3, 7
 bb6:	07 c0       	rjmp	.+14     	; 0xbc6 <vfprintf+0x204>
 bb8:	60 81       	ld	r22, Z
 bba:	71 81       	ldd	r23, Z+1	; 0x01
 bbc:	82 81       	ldd	r24, Z+2	; 0x02
 bbe:	93 81       	ldd	r25, Z+3	; 0x03
 bc0:	0c 5f       	subi	r16, 0xFC	; 252
 bc2:	1f 4f       	sbci	r17, 0xFF	; 255
 bc4:	08 c0       	rjmp	.+16     	; 0xbd6 <vfprintf+0x214>
 bc6:	60 81       	ld	r22, Z
 bc8:	71 81       	ldd	r23, Z+1	; 0x01
 bca:	07 2e       	mov	r0, r23
 bcc:	00 0c       	add	r0, r0
 bce:	88 0b       	sbc	r24, r24
 bd0:	99 0b       	sbc	r25, r25
 bd2:	0e 5f       	subi	r16, 0xFE	; 254
 bd4:	1f 4f       	sbci	r17, 0xFF	; 255
 bd6:	f3 2d       	mov	r31, r3
 bd8:	ff 76       	andi	r31, 0x6F	; 111
 bda:	3f 2e       	mov	r3, r31
 bdc:	97 ff       	sbrs	r25, 7
 bde:	09 c0       	rjmp	.+18     	; 0xbf2 <vfprintf+0x230>
 be0:	90 95       	com	r25
 be2:	80 95       	com	r24
 be4:	70 95       	com	r23
 be6:	61 95       	neg	r22
 be8:	7f 4f       	sbci	r23, 0xFF	; 255
 bea:	8f 4f       	sbci	r24, 0xFF	; 255
 bec:	9f 4f       	sbci	r25, 0xFF	; 255
 bee:	f0 68       	ori	r31, 0x80	; 128
 bf0:	3f 2e       	mov	r3, r31
 bf2:	2a e0       	ldi	r18, 0x0A	; 10
 bf4:	30 e0       	ldi	r19, 0x00	; 0
 bf6:	a3 01       	movw	r20, r6
 bf8:	33 d1       	rcall	.+614    	; 0xe60 <__ultoa_invert>
 bfa:	88 2e       	mov	r8, r24
 bfc:	86 18       	sub	r8, r6
 bfe:	44 c0       	rjmp	.+136    	; 0xc88 <vfprintf+0x2c6>
 c00:	85 37       	cpi	r24, 0x75	; 117
 c02:	31 f4       	brne	.+12     	; 0xc10 <vfprintf+0x24e>
 c04:	23 2d       	mov	r18, r3
 c06:	2f 7e       	andi	r18, 0xEF	; 239
 c08:	b2 2e       	mov	r11, r18
 c0a:	2a e0       	ldi	r18, 0x0A	; 10
 c0c:	30 e0       	ldi	r19, 0x00	; 0
 c0e:	25 c0       	rjmp	.+74     	; 0xc5a <vfprintf+0x298>
 c10:	93 2d       	mov	r25, r3
 c12:	99 7f       	andi	r25, 0xF9	; 249
 c14:	b9 2e       	mov	r11, r25
 c16:	8f 36       	cpi	r24, 0x6F	; 111
 c18:	c1 f0       	breq	.+48     	; 0xc4a <vfprintf+0x288>
 c1a:	18 f4       	brcc	.+6      	; 0xc22 <vfprintf+0x260>
 c1c:	88 35       	cpi	r24, 0x58	; 88
 c1e:	79 f0       	breq	.+30     	; 0xc3e <vfprintf+0x27c>
 c20:	ae c0       	rjmp	.+348    	; 0xd7e <vfprintf+0x3bc>
 c22:	80 37       	cpi	r24, 0x70	; 112
 c24:	19 f0       	breq	.+6      	; 0xc2c <vfprintf+0x26a>
 c26:	88 37       	cpi	r24, 0x78	; 120
 c28:	21 f0       	breq	.+8      	; 0xc32 <vfprintf+0x270>
 c2a:	a9 c0       	rjmp	.+338    	; 0xd7e <vfprintf+0x3bc>
 c2c:	e9 2f       	mov	r30, r25
 c2e:	e0 61       	ori	r30, 0x10	; 16
 c30:	be 2e       	mov	r11, r30
 c32:	b4 fe       	sbrs	r11, 4
 c34:	0d c0       	rjmp	.+26     	; 0xc50 <vfprintf+0x28e>
 c36:	fb 2d       	mov	r31, r11
 c38:	f4 60       	ori	r31, 0x04	; 4
 c3a:	bf 2e       	mov	r11, r31
 c3c:	09 c0       	rjmp	.+18     	; 0xc50 <vfprintf+0x28e>
 c3e:	34 fe       	sbrs	r3, 4
 c40:	0a c0       	rjmp	.+20     	; 0xc56 <vfprintf+0x294>
 c42:	29 2f       	mov	r18, r25
 c44:	26 60       	ori	r18, 0x06	; 6
 c46:	b2 2e       	mov	r11, r18
 c48:	06 c0       	rjmp	.+12     	; 0xc56 <vfprintf+0x294>
 c4a:	28 e0       	ldi	r18, 0x08	; 8
 c4c:	30 e0       	ldi	r19, 0x00	; 0
 c4e:	05 c0       	rjmp	.+10     	; 0xc5a <vfprintf+0x298>
 c50:	20 e1       	ldi	r18, 0x10	; 16
 c52:	30 e0       	ldi	r19, 0x00	; 0
 c54:	02 c0       	rjmp	.+4      	; 0xc5a <vfprintf+0x298>
 c56:	20 e1       	ldi	r18, 0x10	; 16
 c58:	32 e0       	ldi	r19, 0x02	; 2
 c5a:	f8 01       	movw	r30, r16
 c5c:	b7 fe       	sbrs	r11, 7
 c5e:	07 c0       	rjmp	.+14     	; 0xc6e <vfprintf+0x2ac>
 c60:	60 81       	ld	r22, Z
 c62:	71 81       	ldd	r23, Z+1	; 0x01
 c64:	82 81       	ldd	r24, Z+2	; 0x02
 c66:	93 81       	ldd	r25, Z+3	; 0x03
 c68:	0c 5f       	subi	r16, 0xFC	; 252
 c6a:	1f 4f       	sbci	r17, 0xFF	; 255
 c6c:	06 c0       	rjmp	.+12     	; 0xc7a <vfprintf+0x2b8>
 c6e:	60 81       	ld	r22, Z
 c70:	71 81       	ldd	r23, Z+1	; 0x01
 c72:	80 e0       	ldi	r24, 0x00	; 0
 c74:	90 e0       	ldi	r25, 0x00	; 0
 c76:	0e 5f       	subi	r16, 0xFE	; 254
 c78:	1f 4f       	sbci	r17, 0xFF	; 255
 c7a:	a3 01       	movw	r20, r6
 c7c:	f1 d0       	rcall	.+482    	; 0xe60 <__ultoa_invert>
 c7e:	88 2e       	mov	r8, r24
 c80:	86 18       	sub	r8, r6
 c82:	fb 2d       	mov	r31, r11
 c84:	ff 77       	andi	r31, 0x7F	; 127
 c86:	3f 2e       	mov	r3, r31
 c88:	36 fe       	sbrs	r3, 6
 c8a:	0d c0       	rjmp	.+26     	; 0xca6 <vfprintf+0x2e4>
 c8c:	23 2d       	mov	r18, r3
 c8e:	2e 7f       	andi	r18, 0xFE	; 254
 c90:	a2 2e       	mov	r10, r18
 c92:	89 14       	cp	r8, r9
 c94:	58 f4       	brcc	.+22     	; 0xcac <vfprintf+0x2ea>
 c96:	34 fe       	sbrs	r3, 4
 c98:	0b c0       	rjmp	.+22     	; 0xcb0 <vfprintf+0x2ee>
 c9a:	32 fc       	sbrc	r3, 2
 c9c:	09 c0       	rjmp	.+18     	; 0xcb0 <vfprintf+0x2ee>
 c9e:	83 2d       	mov	r24, r3
 ca0:	8e 7e       	andi	r24, 0xEE	; 238
 ca2:	a8 2e       	mov	r10, r24
 ca4:	05 c0       	rjmp	.+10     	; 0xcb0 <vfprintf+0x2ee>
 ca6:	b8 2c       	mov	r11, r8
 ca8:	a3 2c       	mov	r10, r3
 caa:	03 c0       	rjmp	.+6      	; 0xcb2 <vfprintf+0x2f0>
 cac:	b8 2c       	mov	r11, r8
 cae:	01 c0       	rjmp	.+2      	; 0xcb2 <vfprintf+0x2f0>
 cb0:	b9 2c       	mov	r11, r9
 cb2:	a4 fe       	sbrs	r10, 4
 cb4:	0f c0       	rjmp	.+30     	; 0xcd4 <vfprintf+0x312>
 cb6:	fe 01       	movw	r30, r28
 cb8:	e8 0d       	add	r30, r8
 cba:	f1 1d       	adc	r31, r1
 cbc:	80 81       	ld	r24, Z
 cbe:	80 33       	cpi	r24, 0x30	; 48
 cc0:	21 f4       	brne	.+8      	; 0xcca <vfprintf+0x308>
 cc2:	9a 2d       	mov	r25, r10
 cc4:	99 7e       	andi	r25, 0xE9	; 233
 cc6:	a9 2e       	mov	r10, r25
 cc8:	09 c0       	rjmp	.+18     	; 0xcdc <vfprintf+0x31a>
 cca:	a2 fe       	sbrs	r10, 2
 ccc:	06 c0       	rjmp	.+12     	; 0xcda <vfprintf+0x318>
 cce:	b3 94       	inc	r11
 cd0:	b3 94       	inc	r11
 cd2:	04 c0       	rjmp	.+8      	; 0xcdc <vfprintf+0x31a>
 cd4:	8a 2d       	mov	r24, r10
 cd6:	86 78       	andi	r24, 0x86	; 134
 cd8:	09 f0       	breq	.+2      	; 0xcdc <vfprintf+0x31a>
 cda:	b3 94       	inc	r11
 cdc:	a3 fc       	sbrc	r10, 3
 cde:	10 c0       	rjmp	.+32     	; 0xd00 <vfprintf+0x33e>
 ce0:	a0 fe       	sbrs	r10, 0
 ce2:	06 c0       	rjmp	.+12     	; 0xcf0 <vfprintf+0x32e>
 ce4:	b2 14       	cp	r11, r2
 ce6:	80 f4       	brcc	.+32     	; 0xd08 <vfprintf+0x346>
 ce8:	28 0c       	add	r2, r8
 cea:	92 2c       	mov	r9, r2
 cec:	9b 18       	sub	r9, r11
 cee:	0d c0       	rjmp	.+26     	; 0xd0a <vfprintf+0x348>
 cf0:	b2 14       	cp	r11, r2
 cf2:	58 f4       	brcc	.+22     	; 0xd0a <vfprintf+0x348>
 cf4:	b6 01       	movw	r22, r12
 cf6:	80 e2       	ldi	r24, 0x20	; 32
 cf8:	90 e0       	ldi	r25, 0x00	; 0
 cfa:	76 d0       	rcall	.+236    	; 0xde8 <fputc>
 cfc:	b3 94       	inc	r11
 cfe:	f8 cf       	rjmp	.-16     	; 0xcf0 <vfprintf+0x32e>
 d00:	b2 14       	cp	r11, r2
 d02:	18 f4       	brcc	.+6      	; 0xd0a <vfprintf+0x348>
 d04:	2b 18       	sub	r2, r11
 d06:	02 c0       	rjmp	.+4      	; 0xd0c <vfprintf+0x34a>
 d08:	98 2c       	mov	r9, r8
 d0a:	21 2c       	mov	r2, r1
 d0c:	a4 fe       	sbrs	r10, 4
 d0e:	0f c0       	rjmp	.+30     	; 0xd2e <vfprintf+0x36c>
 d10:	b6 01       	movw	r22, r12
 d12:	80 e3       	ldi	r24, 0x30	; 48
 d14:	90 e0       	ldi	r25, 0x00	; 0
 d16:	68 d0       	rcall	.+208    	; 0xde8 <fputc>
 d18:	a2 fe       	sbrs	r10, 2
 d1a:	16 c0       	rjmp	.+44     	; 0xd48 <vfprintf+0x386>
 d1c:	a1 fc       	sbrc	r10, 1
 d1e:	03 c0       	rjmp	.+6      	; 0xd26 <vfprintf+0x364>
 d20:	88 e7       	ldi	r24, 0x78	; 120
 d22:	90 e0       	ldi	r25, 0x00	; 0
 d24:	02 c0       	rjmp	.+4      	; 0xd2a <vfprintf+0x368>
 d26:	88 e5       	ldi	r24, 0x58	; 88
 d28:	90 e0       	ldi	r25, 0x00	; 0
 d2a:	b6 01       	movw	r22, r12
 d2c:	0c c0       	rjmp	.+24     	; 0xd46 <vfprintf+0x384>
 d2e:	8a 2d       	mov	r24, r10
 d30:	86 78       	andi	r24, 0x86	; 134
 d32:	51 f0       	breq	.+20     	; 0xd48 <vfprintf+0x386>
 d34:	a1 fe       	sbrs	r10, 1
 d36:	02 c0       	rjmp	.+4      	; 0xd3c <vfprintf+0x37a>
 d38:	8b e2       	ldi	r24, 0x2B	; 43
 d3a:	01 c0       	rjmp	.+2      	; 0xd3e <vfprintf+0x37c>
 d3c:	80 e2       	ldi	r24, 0x20	; 32
 d3e:	a7 fc       	sbrc	r10, 7
 d40:	8d e2       	ldi	r24, 0x2D	; 45
 d42:	b6 01       	movw	r22, r12
 d44:	90 e0       	ldi	r25, 0x00	; 0
 d46:	50 d0       	rcall	.+160    	; 0xde8 <fputc>
 d48:	89 14       	cp	r8, r9
 d4a:	30 f4       	brcc	.+12     	; 0xd58 <vfprintf+0x396>
 d4c:	b6 01       	movw	r22, r12
 d4e:	80 e3       	ldi	r24, 0x30	; 48
 d50:	90 e0       	ldi	r25, 0x00	; 0
 d52:	4a d0       	rcall	.+148    	; 0xde8 <fputc>
 d54:	9a 94       	dec	r9
 d56:	f8 cf       	rjmp	.-16     	; 0xd48 <vfprintf+0x386>
 d58:	8a 94       	dec	r8
 d5a:	f3 01       	movw	r30, r6
 d5c:	e8 0d       	add	r30, r8
 d5e:	f1 1d       	adc	r31, r1
 d60:	80 81       	ld	r24, Z
 d62:	b6 01       	movw	r22, r12
 d64:	90 e0       	ldi	r25, 0x00	; 0
 d66:	40 d0       	rcall	.+128    	; 0xde8 <fputc>
 d68:	81 10       	cpse	r8, r1
 d6a:	f6 cf       	rjmp	.-20     	; 0xd58 <vfprintf+0x396>
 d6c:	22 20       	and	r2, r2
 d6e:	09 f4       	brne	.+2      	; 0xd72 <vfprintf+0x3b0>
 d70:	4e ce       	rjmp	.-868    	; 0xa0e <vfprintf+0x4c>
 d72:	b6 01       	movw	r22, r12
 d74:	80 e2       	ldi	r24, 0x20	; 32
 d76:	90 e0       	ldi	r25, 0x00	; 0
 d78:	37 d0       	rcall	.+110    	; 0xde8 <fputc>
 d7a:	2a 94       	dec	r2
 d7c:	f7 cf       	rjmp	.-18     	; 0xd6c <vfprintf+0x3aa>
 d7e:	f6 01       	movw	r30, r12
 d80:	86 81       	ldd	r24, Z+6	; 0x06
 d82:	97 81       	ldd	r25, Z+7	; 0x07
 d84:	02 c0       	rjmp	.+4      	; 0xd8a <vfprintf+0x3c8>
 d86:	8f ef       	ldi	r24, 0xFF	; 255
 d88:	9f ef       	ldi	r25, 0xFF	; 255
 d8a:	2b 96       	adiw	r28, 0x0b	; 11
 d8c:	0f b6       	in	r0, 0x3f	; 63
 d8e:	f8 94       	cli
 d90:	de bf       	out	0x3e, r29	; 62
 d92:	0f be       	out	0x3f, r0	; 63
 d94:	cd bf       	out	0x3d, r28	; 61
 d96:	df 91       	pop	r29
 d98:	cf 91       	pop	r28
 d9a:	1f 91       	pop	r17
 d9c:	0f 91       	pop	r16
 d9e:	ff 90       	pop	r15
 da0:	ef 90       	pop	r14
 da2:	df 90       	pop	r13
 da4:	cf 90       	pop	r12
 da6:	bf 90       	pop	r11
 da8:	af 90       	pop	r10
 daa:	9f 90       	pop	r9
 dac:	8f 90       	pop	r8
 dae:	7f 90       	pop	r7
 db0:	6f 90       	pop	r6
 db2:	5f 90       	pop	r5
 db4:	4f 90       	pop	r4
 db6:	3f 90       	pop	r3
 db8:	2f 90       	pop	r2
 dba:	08 95       	ret

00000dbc <strnlen_P>:
 dbc:	fc 01       	movw	r30, r24
 dbe:	05 90       	lpm	r0, Z+
 dc0:	61 50       	subi	r22, 0x01	; 1
 dc2:	70 40       	sbci	r23, 0x00	; 0
 dc4:	01 10       	cpse	r0, r1
 dc6:	d8 f7       	brcc	.-10     	; 0xdbe <strnlen_P+0x2>
 dc8:	80 95       	com	r24
 dca:	90 95       	com	r25
 dcc:	8e 0f       	add	r24, r30
 dce:	9f 1f       	adc	r25, r31
 dd0:	08 95       	ret

00000dd2 <strnlen>:
 dd2:	fc 01       	movw	r30, r24
 dd4:	61 50       	subi	r22, 0x01	; 1
 dd6:	70 40       	sbci	r23, 0x00	; 0
 dd8:	01 90       	ld	r0, Z+
 dda:	01 10       	cpse	r0, r1
 ddc:	d8 f7       	brcc	.-10     	; 0xdd4 <strnlen+0x2>
 dde:	80 95       	com	r24
 de0:	90 95       	com	r25
 de2:	8e 0f       	add	r24, r30
 de4:	9f 1f       	adc	r25, r31
 de6:	08 95       	ret

00000de8 <fputc>:
 de8:	0f 93       	push	r16
 dea:	1f 93       	push	r17
 dec:	cf 93       	push	r28
 dee:	df 93       	push	r29
 df0:	fb 01       	movw	r30, r22
 df2:	23 81       	ldd	r18, Z+3	; 0x03
 df4:	21 fd       	sbrc	r18, 1
 df6:	03 c0       	rjmp	.+6      	; 0xdfe <fputc+0x16>
 df8:	8f ef       	ldi	r24, 0xFF	; 255
 dfa:	9f ef       	ldi	r25, 0xFF	; 255
 dfc:	2c c0       	rjmp	.+88     	; 0xe56 <fputc+0x6e>
 dfe:	22 ff       	sbrs	r18, 2
 e00:	16 c0       	rjmp	.+44     	; 0xe2e <fputc+0x46>
 e02:	46 81       	ldd	r20, Z+6	; 0x06
 e04:	57 81       	ldd	r21, Z+7	; 0x07
 e06:	24 81       	ldd	r18, Z+4	; 0x04
 e08:	35 81       	ldd	r19, Z+5	; 0x05
 e0a:	42 17       	cp	r20, r18
 e0c:	53 07       	cpc	r21, r19
 e0e:	44 f4       	brge	.+16     	; 0xe20 <fputc+0x38>
 e10:	a0 81       	ld	r26, Z
 e12:	b1 81       	ldd	r27, Z+1	; 0x01
 e14:	9d 01       	movw	r18, r26
 e16:	2f 5f       	subi	r18, 0xFF	; 255
 e18:	3f 4f       	sbci	r19, 0xFF	; 255
 e1a:	31 83       	std	Z+1, r19	; 0x01
 e1c:	20 83       	st	Z, r18
 e1e:	8c 93       	st	X, r24
 e20:	26 81       	ldd	r18, Z+6	; 0x06
 e22:	37 81       	ldd	r19, Z+7	; 0x07
 e24:	2f 5f       	subi	r18, 0xFF	; 255
 e26:	3f 4f       	sbci	r19, 0xFF	; 255
 e28:	37 83       	std	Z+7, r19	; 0x07
 e2a:	26 83       	std	Z+6, r18	; 0x06
 e2c:	14 c0       	rjmp	.+40     	; 0xe56 <fputc+0x6e>
 e2e:	8b 01       	movw	r16, r22
 e30:	ec 01       	movw	r28, r24
 e32:	fb 01       	movw	r30, r22
 e34:	00 84       	ldd	r0, Z+8	; 0x08
 e36:	f1 85       	ldd	r31, Z+9	; 0x09
 e38:	e0 2d       	mov	r30, r0
 e3a:	09 95       	icall
 e3c:	89 2b       	or	r24, r25
 e3e:	e1 f6       	brne	.-72     	; 0xdf8 <fputc+0x10>
 e40:	d8 01       	movw	r26, r16
 e42:	16 96       	adiw	r26, 0x06	; 6
 e44:	8d 91       	ld	r24, X+
 e46:	9c 91       	ld	r25, X
 e48:	17 97       	sbiw	r26, 0x07	; 7
 e4a:	01 96       	adiw	r24, 0x01	; 1
 e4c:	17 96       	adiw	r26, 0x07	; 7
 e4e:	9c 93       	st	X, r25
 e50:	8e 93       	st	-X, r24
 e52:	16 97       	sbiw	r26, 0x06	; 6
 e54:	ce 01       	movw	r24, r28
 e56:	df 91       	pop	r29
 e58:	cf 91       	pop	r28
 e5a:	1f 91       	pop	r17
 e5c:	0f 91       	pop	r16
 e5e:	08 95       	ret

00000e60 <__ultoa_invert>:
 e60:	fa 01       	movw	r30, r20
 e62:	aa 27       	eor	r26, r26
 e64:	28 30       	cpi	r18, 0x08	; 8
 e66:	51 f1       	breq	.+84     	; 0xebc <__ultoa_invert+0x5c>
 e68:	20 31       	cpi	r18, 0x10	; 16
 e6a:	81 f1       	breq	.+96     	; 0xecc <__ultoa_invert+0x6c>
 e6c:	e8 94       	clt
 e6e:	6f 93       	push	r22
 e70:	6e 7f       	andi	r22, 0xFE	; 254
 e72:	6e 5f       	subi	r22, 0xFE	; 254
 e74:	7f 4f       	sbci	r23, 0xFF	; 255
 e76:	8f 4f       	sbci	r24, 0xFF	; 255
 e78:	9f 4f       	sbci	r25, 0xFF	; 255
 e7a:	af 4f       	sbci	r26, 0xFF	; 255
 e7c:	b1 e0       	ldi	r27, 0x01	; 1
 e7e:	3e d0       	rcall	.+124    	; 0xefc <__ultoa_invert+0x9c>
 e80:	b4 e0       	ldi	r27, 0x04	; 4
 e82:	3c d0       	rcall	.+120    	; 0xefc <__ultoa_invert+0x9c>
 e84:	67 0f       	add	r22, r23
 e86:	78 1f       	adc	r23, r24
 e88:	89 1f       	adc	r24, r25
 e8a:	9a 1f       	adc	r25, r26
 e8c:	a1 1d       	adc	r26, r1
 e8e:	68 0f       	add	r22, r24
 e90:	79 1f       	adc	r23, r25
 e92:	8a 1f       	adc	r24, r26
 e94:	91 1d       	adc	r25, r1
 e96:	a1 1d       	adc	r26, r1
 e98:	6a 0f       	add	r22, r26
 e9a:	71 1d       	adc	r23, r1
 e9c:	81 1d       	adc	r24, r1
 e9e:	91 1d       	adc	r25, r1
 ea0:	a1 1d       	adc	r26, r1
 ea2:	20 d0       	rcall	.+64     	; 0xee4 <__ultoa_invert+0x84>
 ea4:	09 f4       	brne	.+2      	; 0xea8 <__ultoa_invert+0x48>
 ea6:	68 94       	set
 ea8:	3f 91       	pop	r19
 eaa:	2a e0       	ldi	r18, 0x0A	; 10
 eac:	26 9f       	mul	r18, r22
 eae:	11 24       	eor	r1, r1
 eb0:	30 19       	sub	r19, r0
 eb2:	30 5d       	subi	r19, 0xD0	; 208
 eb4:	31 93       	st	Z+, r19
 eb6:	de f6       	brtc	.-74     	; 0xe6e <__ultoa_invert+0xe>
 eb8:	cf 01       	movw	r24, r30
 eba:	08 95       	ret
 ebc:	46 2f       	mov	r20, r22
 ebe:	47 70       	andi	r20, 0x07	; 7
 ec0:	40 5d       	subi	r20, 0xD0	; 208
 ec2:	41 93       	st	Z+, r20
 ec4:	b3 e0       	ldi	r27, 0x03	; 3
 ec6:	0f d0       	rcall	.+30     	; 0xee6 <__ultoa_invert+0x86>
 ec8:	c9 f7       	brne	.-14     	; 0xebc <__ultoa_invert+0x5c>
 eca:	f6 cf       	rjmp	.-20     	; 0xeb8 <__ultoa_invert+0x58>
 ecc:	46 2f       	mov	r20, r22
 ece:	4f 70       	andi	r20, 0x0F	; 15
 ed0:	40 5d       	subi	r20, 0xD0	; 208
 ed2:	4a 33       	cpi	r20, 0x3A	; 58
 ed4:	18 f0       	brcs	.+6      	; 0xedc <__ultoa_invert+0x7c>
 ed6:	49 5d       	subi	r20, 0xD9	; 217
 ed8:	31 fd       	sbrc	r19, 1
 eda:	40 52       	subi	r20, 0x20	; 32
 edc:	41 93       	st	Z+, r20
 ede:	02 d0       	rcall	.+4      	; 0xee4 <__ultoa_invert+0x84>
 ee0:	a9 f7       	brne	.-22     	; 0xecc <__ultoa_invert+0x6c>
 ee2:	ea cf       	rjmp	.-44     	; 0xeb8 <__ultoa_invert+0x58>
 ee4:	b4 e0       	ldi	r27, 0x04	; 4
 ee6:	a6 95       	lsr	r26
 ee8:	97 95       	ror	r25
 eea:	87 95       	ror	r24
 eec:	77 95       	ror	r23
 eee:	67 95       	ror	r22
 ef0:	ba 95       	dec	r27
 ef2:	c9 f7       	brne	.-14     	; 0xee6 <__ultoa_invert+0x86>
 ef4:	00 97       	sbiw	r24, 0x00	; 0
 ef6:	61 05       	cpc	r22, r1
 ef8:	71 05       	cpc	r23, r1
 efa:	08 95       	ret
 efc:	9b 01       	movw	r18, r22
 efe:	ac 01       	movw	r20, r24
 f00:	0a 2e       	mov	r0, r26
 f02:	06 94       	lsr	r0
 f04:	57 95       	ror	r21
 f06:	47 95       	ror	r20
 f08:	37 95       	ror	r19
 f0a:	27 95       	ror	r18
 f0c:	ba 95       	dec	r27
 f0e:	c9 f7       	brne	.-14     	; 0xf02 <__ultoa_invert+0xa2>
 f10:	62 0f       	add	r22, r18
 f12:	73 1f       	adc	r23, r19
 f14:	84 1f       	adc	r24, r20
 f16:	95 1f       	adc	r25, r21
 f18:	a0 1d       	adc	r26, r0
 f1a:	08 95       	ret

00000f1c <_exit>:
 f1c:	f8 94       	cli

00000f1e <__stop_program>:
 f1e:	ff cf       	rjmp	.-2      	; 0xf1e <__stop_program>
