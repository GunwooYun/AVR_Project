
Server.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000c4  00800100  00000e6e  00000f02  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e6e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000194  008001c4  008001c4  00000fc6  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000fc6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001024  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  00001064  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d34  00000000  00000000  000010d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000921  00000000  00000000  00001e08  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000599  00000000  00000000  00002729  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001b8  00000000  00000000  00002cc4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000511  00000000  00000000  00002e7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000580  00000000  00000000  0000338d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  0000390d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee e6       	ldi	r30, 0x6E	; 110
  a0:	fe e0       	ldi	r31, 0x0E	; 14
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 3c       	cpi	r26, 0xC4	; 196
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	23 e0       	ldi	r18, 0x03	; 3
  b4:	a4 ec       	ldi	r26, 0xC4	; 196
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a8 35       	cpi	r26, 0x58	; 88
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	5e d2       	rcall	.+1212   	; 0x580 <main>
  c4:	d2 c6       	rjmp	.+3492   	; 0xe6a <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <UART0_transmit>:
void UART0_transmit(uint8_t token)
{
	while(1)
	{
		// empty : 1 & 1 -> 1
		if((UCSR0A & (1 << UDRE0))) break;
  c8:	5d 9b       	sbis	0x0b, 5	; 11
  ca:	fe cf       	rjmp	.-4      	; 0xc8 <UART0_transmit>
	}
	UDR0 = token;
  cc:	8c b9       	out	0x0c, r24	; 12
  ce:	08 95       	ret

000000d0 <UART0_receive>:

uint8_t UART0_receive(void)
{
	while(1)
	{
		if((UCSR0A & (1 << RXC1))) break;
  d0:	5f 9b       	sbis	0x0b, 7	; 11
  d2:	fe cf       	rjmp	.-4      	; 0xd0 <UART0_receive>
	}
	return UDR0;
  d4:	8c b1       	in	r24, 0x0c	; 12
}
  d6:	08 95       	ret

000000d8 <getCusInfo>:


char* getCusInfo(uint8_t index)
{
  d8:	0f 93       	push	r16
  da:	1f 93       	push	r17
  dc:	cf 93       	push	r28
  de:	c8 2f       	mov	r28, r24
	char* pCusInfo;
	pCusInfo = (char *)malloc(sizeof(char) * 30);
  e0:	8e e1       	ldi	r24, 0x1E	; 30
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	bd d2       	rcall	.+1402   	; 0x660 <malloc>
  e6:	8c 01       	movw	r16, r24
	if(pCusInfo == NULL){
  e8:	89 2b       	or	r24, r25
  ea:	29 f1       	breq	.+74     	; 0x136 <getCusInfo+0x5e>
		return NULL;
	}
	sprintf(pCusInfo, "b %s %d %d\n", csArray[index].cName, csArray[index].cAge, csArray[index].cBal);
  ec:	86 e3       	ldi	r24, 0x36	; 54
  ee:	c8 9f       	mul	r28, r24
  f0:	f0 01       	movw	r30, r0
  f2:	11 24       	eor	r1, r1
  f4:	cf 01       	movw	r24, r30
  f6:	8c 59       	subi	r24, 0x9C	; 156
  f8:	9d 4f       	sbci	r25, 0xFD	; 253
  fa:	ea 5b       	subi	r30, 0xBA	; 186
  fc:	fd 4f       	sbci	r31, 0xFD	; 253
  fe:	25 a9       	ldd	r18, Z+53	; 0x35
 100:	2f 93       	push	r18
 102:	24 a9       	ldd	r18, Z+52	; 0x34
 104:	2f 93       	push	r18
 106:	23 a9       	ldd	r18, Z+51	; 0x33
 108:	2f 93       	push	r18
 10a:	22 a9       	ldd	r18, Z+50	; 0x32
 10c:	2f 93       	push	r18
 10e:	9f 93       	push	r25
 110:	8f 93       	push	r24
 112:	86 e0       	ldi	r24, 0x06	; 6
 114:	91 e0       	ldi	r25, 0x01	; 1
 116:	9f 93       	push	r25
 118:	8f 93       	push	r24
 11a:	1f 93       	push	r17
 11c:	0f 93       	push	r16
 11e:	ca d3       	rcall	.+1940   	; 0x8b4 <sprintf>
	return pCusInfo;
 120:	8d b7       	in	r24, 0x3d	; 61
 122:	9e b7       	in	r25, 0x3e	; 62
 124:	0a 96       	adiw	r24, 0x0a	; 10
 126:	0f b6       	in	r0, 0x3f	; 63
 128:	f8 94       	cli
 12a:	9e bf       	out	0x3e, r25	; 62
 12c:	0f be       	out	0x3f, r0	; 63
 12e:	8d bf       	out	0x3d, r24	; 61
 130:	80 2f       	mov	r24, r16
 132:	91 2f       	mov	r25, r17
 134:	02 c0       	rjmp	.+4      	; 0x13a <getCusInfo+0x62>
char* getCusInfo(uint8_t index)
{
	char* pCusInfo;
	pCusInfo = (char *)malloc(sizeof(char) * 30);
	if(pCusInfo == NULL){
		return NULL;
 136:	80 e0       	ldi	r24, 0x00	; 0
 138:	90 e0       	ldi	r25, 0x00	; 0
	}
	sprintf(pCusInfo, "b %s %d %d\n", csArray[index].cName, csArray[index].cAge, csArray[index].cBal);
	return pCusInfo;
}
 13a:	cf 91       	pop	r28
 13c:	1f 91       	pop	r17
 13e:	0f 91       	pop	r16
 140:	08 95       	ret

00000142 <getBleInfo>:
char* getBleInfo(uint8_t index)
{
 142:	0f 93       	push	r16
 144:	1f 93       	push	r17
 146:	cf 93       	push	r28
 148:	c8 2f       	mov	r28, r24
	char* pBleInfo;
	pBleInfo = (char *)malloc(sizeof(char) * 30);
 14a:	8e e1       	ldi	r24, 0x1E	; 30
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	88 d2       	rcall	.+1296   	; 0x660 <malloc>
 150:	8c 01       	movw	r16, r24
	if(pBleInfo == NULL){
 152:	89 2b       	or	r24, r25
 154:	09 f1       	breq	.+66     	; 0x198 <getBleInfo+0x56>
		return NULL;
	}
	sprintf(pBleInfo, "Name: %s Age : %d\n", csArray[index].cName, csArray[index].cAge);
 156:	86 e3       	ldi	r24, 0x36	; 54
 158:	c8 9f       	mul	r28, r24
 15a:	f0 01       	movw	r30, r0
 15c:	11 24       	eor	r1, r1
 15e:	cf 01       	movw	r24, r30
 160:	8c 59       	subi	r24, 0x9C	; 156
 162:	9d 4f       	sbci	r25, 0xFD	; 253
 164:	ea 5b       	subi	r30, 0xBA	; 186
 166:	fd 4f       	sbci	r31, 0xFD	; 253
 168:	23 a9       	ldd	r18, Z+51	; 0x33
 16a:	2f 93       	push	r18
 16c:	22 a9       	ldd	r18, Z+50	; 0x32
 16e:	2f 93       	push	r18
 170:	9f 93       	push	r25
 172:	8f 93       	push	r24
 174:	82 e1       	ldi	r24, 0x12	; 18
 176:	91 e0       	ldi	r25, 0x01	; 1
 178:	9f 93       	push	r25
 17a:	8f 93       	push	r24
 17c:	1f 93       	push	r17
 17e:	0f 93       	push	r16
 180:	99 d3       	rcall	.+1842   	; 0x8b4 <sprintf>
	return pBleInfo;
 182:	8d b7       	in	r24, 0x3d	; 61
 184:	9e b7       	in	r25, 0x3e	; 62
 186:	08 96       	adiw	r24, 0x08	; 8
 188:	0f b6       	in	r0, 0x3f	; 63
 18a:	f8 94       	cli
 18c:	9e bf       	out	0x3e, r25	; 62
 18e:	0f be       	out	0x3f, r0	; 63
 190:	8d bf       	out	0x3d, r24	; 61
 192:	80 2f       	mov	r24, r16
 194:	91 2f       	mov	r25, r17
 196:	02 c0       	rjmp	.+4      	; 0x19c <getBleInfo+0x5a>
char* getBleInfo(uint8_t index)
{
	char* pBleInfo;
	pBleInfo = (char *)malloc(sizeof(char) * 30);
	if(pBleInfo == NULL){
		return NULL;
 198:	80 e0       	ldi	r24, 0x00	; 0
 19a:	90 e0       	ldi	r25, 0x00	; 0
	}
	sprintf(pBleInfo, "Name: %s Age : %d\n", csArray[index].cName, csArray[index].cAge);
	return pBleInfo;
	//return "Name: " + (String)csArray[index].cName + " Age : " + (String)csArray[index].cAge+"\n";
}
 19c:	cf 91       	pop	r28
 19e:	1f 91       	pop	r17
 1a0:	0f 91       	pop	r16
 1a2:	08 95       	ret

000001a4 <getProInfo>:
#if 1
char* getProInfo(uint8_t index)
{
 1a4:	0f 93       	push	r16
 1a6:	1f 93       	push	r17
 1a8:	cf 93       	push	r28
 1aa:	c8 2f       	mov	r28, r24
	char* pProInfo;
	pProInfo = (char *)malloc(sizeof(char) * 30);
 1ac:	8e e1       	ldi	r24, 0x1E	; 30
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	57 d2       	rcall	.+1198   	; 0x660 <malloc>
 1b2:	8c 01       	movw	r16, r24
	if(pProInfo == NULL){
 1b4:	89 2b       	or	r24, r25
 1b6:	11 f1       	breq	.+68     	; 0x1fc <getProInfo+0x58>
		return NULL;
	}
	sprintf(pProInfo, "d %s %d %d", pArray[index].pName, pArray[index].age, pArray[index].price);
 1b8:	8a e1       	ldi	r24, 0x1A	; 26
 1ba:	c8 9f       	mul	r28, r24
 1bc:	f0 01       	movw	r30, r0
 1be:	11 24       	eor	r1, r1
 1c0:	ec 53       	subi	r30, 0x3C	; 60
 1c2:	fe 4f       	sbci	r31, 0xFE	; 254
 1c4:	85 89       	ldd	r24, Z+21	; 0x15
 1c6:	8f 93       	push	r24
 1c8:	84 89       	ldd	r24, Z+20	; 0x14
 1ca:	8f 93       	push	r24
 1cc:	87 89       	ldd	r24, Z+23	; 0x17
 1ce:	8f 93       	push	r24
 1d0:	86 89       	ldd	r24, Z+22	; 0x16
 1d2:	8f 93       	push	r24
 1d4:	ff 93       	push	r31
 1d6:	ef 93       	push	r30
 1d8:	85 e2       	ldi	r24, 0x25	; 37
 1da:	91 e0       	ldi	r25, 0x01	; 1
 1dc:	9f 93       	push	r25
 1de:	8f 93       	push	r24
 1e0:	1f 93       	push	r17
 1e2:	0f 93       	push	r16
 1e4:	67 d3       	rcall	.+1742   	; 0x8b4 <sprintf>
	return pProInfo;
 1e6:	8d b7       	in	r24, 0x3d	; 61
 1e8:	9e b7       	in	r25, 0x3e	; 62
 1ea:	0a 96       	adiw	r24, 0x0a	; 10
 1ec:	0f b6       	in	r0, 0x3f	; 63
 1ee:	f8 94       	cli
 1f0:	9e bf       	out	0x3e, r25	; 62
 1f2:	0f be       	out	0x3f, r0	; 63
 1f4:	8d bf       	out	0x3d, r24	; 61
 1f6:	80 2f       	mov	r24, r16
 1f8:	91 2f       	mov	r25, r17
 1fa:	02 c0       	rjmp	.+4      	; 0x200 <getProInfo+0x5c>
char* getProInfo(uint8_t index)
{
	char* pProInfo;
	pProInfo = (char *)malloc(sizeof(char) * 30);
	if(pProInfo == NULL){
		return NULL;
 1fc:	80 e0       	ldi	r24, 0x00	; 0
 1fe:	90 e0       	ldi	r25, 0x00	; 0
	}
	sprintf(pProInfo, "d %s %d %d", pArray[index].pName, pArray[index].age, pArray[index].price);
	return pProInfo;
	//return "d " + (String)productArr[index] + " " + (String)ageArr[index] + " " + (String)price[index];
}
 200:	cf 91       	pop	r28
 202:	1f 91       	pop	r17
 204:	0f 91       	pop	r16
 206:	08 95       	ret

00000208 <getBleStock>:


char* getBleStock(uint8_t index)
{
 208:	0f 93       	push	r16
 20a:	1f 93       	push	r17
 20c:	cf 93       	push	r28
 20e:	c8 2f       	mov	r28, r24
	char* pBleStock;
	pBleStock = (char *)malloc(sizeof(char) * 30);
 210:	8e e1       	ldi	r24, 0x1E	; 30
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	25 d2       	rcall	.+1098   	; 0x660 <malloc>
 216:	8c 01       	movw	r16, r24
	if(pBleStock == NULL){
 218:	89 2b       	or	r24, r25
 21a:	f1 f0       	breq	.+60     	; 0x258 <getBleStock+0x50>
		return NULL;
	}
	sprintf(pBleStock, "ID: %s Stock : %d\n", pArray[index].pName, pArray[index].stock);
 21c:	8a e1       	ldi	r24, 0x1A	; 26
 21e:	c8 9f       	mul	r28, r24
 220:	f0 01       	movw	r30, r0
 222:	11 24       	eor	r1, r1
 224:	ec 53       	subi	r30, 0x3C	; 60
 226:	fe 4f       	sbci	r31, 0xFE	; 254
 228:	81 8d       	ldd	r24, Z+25	; 0x19
 22a:	8f 93       	push	r24
 22c:	80 8d       	ldd	r24, Z+24	; 0x18
 22e:	8f 93       	push	r24
 230:	ff 93       	push	r31
 232:	ef 93       	push	r30
 234:	80 e3       	ldi	r24, 0x30	; 48
 236:	91 e0       	ldi	r25, 0x01	; 1
 238:	9f 93       	push	r25
 23a:	8f 93       	push	r24
 23c:	1f 93       	push	r17
 23e:	0f 93       	push	r16
 240:	39 d3       	rcall	.+1650   	; 0x8b4 <sprintf>
	return pBleStock;
 242:	8d b7       	in	r24, 0x3d	; 61
 244:	9e b7       	in	r25, 0x3e	; 62
 246:	08 96       	adiw	r24, 0x08	; 8
 248:	0f b6       	in	r0, 0x3f	; 63
 24a:	f8 94       	cli
 24c:	9e bf       	out	0x3e, r25	; 62
 24e:	0f be       	out	0x3f, r0	; 63
 250:	8d bf       	out	0x3d, r24	; 61
 252:	80 2f       	mov	r24, r16
 254:	91 2f       	mov	r25, r17
 256:	02 c0       	rjmp	.+4      	; 0x25c <getBleStock+0x54>
char* getBleStock(uint8_t index)
{
	char* pBleStock;
	pBleStock = (char *)malloc(sizeof(char) * 30);
	if(pBleStock == NULL){
		return NULL;
 258:	80 e0       	ldi	r24, 0x00	; 0
 25a:	90 e0       	ldi	r25, 0x00	; 0
	}
	sprintf(pBleStock, "ID: %s Stock : %d\n", pArray[index].pName, pArray[index].stock);
	return pBleStock;
	//return "ID: " + (String)productArr[index] + " Stock : " + (String)stockArr[index]+"\n";
}
 25c:	cf 91       	pop	r28
 25e:	1f 91       	pop	r17
 260:	0f 91       	pop	r16
 262:	08 95       	ret

00000264 <checkCard>:

#endif

uint8_t checkCard(char* cn)
{
 264:	0f 93       	push	r16
 266:	1f 93       	push	r17
 268:	cf 93       	push	r28
 26a:	df 93       	push	r29
 26c:	8c 01       	movw	r16, r24
	for(int i = 0; i < NUM_OF_CUSTOMER; i++)
 26e:	c0 e0       	ldi	r28, 0x00	; 0
 270:	d0 e0       	ldi	r29, 0x00	; 0
 272:	0d c0       	rjmp	.+26     	; 0x28e <checkCard+0x2a>
	{
		if(!strcmp(csArray[i].cID, cn))
 274:	26 e3       	ldi	r18, 0x36	; 54
 276:	2c 9f       	mul	r18, r28
 278:	c0 01       	movw	r24, r0
 27a:	2d 9f       	mul	r18, r29
 27c:	90 0d       	add	r25, r0
 27e:	11 24       	eor	r1, r1
 280:	b8 01       	movw	r22, r16
 282:	8a 5b       	subi	r24, 0xBA	; 186
 284:	9d 4f       	sbci	r25, 0xFD	; 253
 286:	0d d3       	rcall	.+1562   	; 0x8a2 <strcmp>
 288:	89 2b       	or	r24, r25
 28a:	31 f0       	breq	.+12     	; 0x298 <checkCard+0x34>

#endif

uint8_t checkCard(char* cn)
{
	for(int i = 0; i < NUM_OF_CUSTOMER; i++)
 28c:	21 96       	adiw	r28, 0x01	; 1
 28e:	c5 30       	cpi	r28, 0x05	; 5
 290:	d1 05       	cpc	r29, r1
 292:	84 f3       	brlt	.-32     	; 0x274 <checkCard+0x10>
	{
		if(!strcmp(csArray[i].cID, cn))
		return 0;
	}
	return 1;
 294:	81 e0       	ldi	r24, 0x01	; 1
 296:	01 c0       	rjmp	.+2      	; 0x29a <checkCard+0x36>
uint8_t checkCard(char* cn)
{
	for(int i = 0; i < NUM_OF_CUSTOMER; i++)
	{
		if(!strcmp(csArray[i].cID, cn))
		return 0;
 298:	80 e0       	ldi	r24, 0x00	; 0
	}
	return 1;
}
 29a:	df 91       	pop	r29
 29c:	cf 91       	pop	r28
 29e:	1f 91       	pop	r17
 2a0:	0f 91       	pop	r16
 2a2:	08 95       	ret

000002a4 <sendInfo>:

void sendInfo(char* info, uint8_t mode)
{
 2a4:	cf 93       	push	r28
 2a6:	df 93       	push	r29
 2a8:	ec 01       	movw	r28, r24
	char* sendToken;
	if(mode == UART){
 2aa:	61 30       	cpi	r22, 0x01	; 1
 2ac:	31 f4       	brne	.+12     	; 0x2ba <sendInfo+0x16>
 2ae:	02 c0       	rjmp	.+4      	; 0x2b4 <sendInfo+0x10>
		sendToken = info;
		while(*sendToken){
			UART0_transmit(*sendToken);
 2b0:	0b df       	rcall	.-490    	; 0xc8 <UART0_transmit>
			sendToken++;
 2b2:	21 96       	adiw	r28, 0x01	; 1
void sendInfo(char* info, uint8_t mode)
{
	char* sendToken;
	if(mode == UART){
		sendToken = info;
		while(*sendToken){
 2b4:	88 81       	ld	r24, Y
 2b6:	81 11       	cpse	r24, r1
 2b8:	fb cf       	rjmp	.-10     	; 0x2b0 <sendInfo+0xc>
	{
		//ble.print(info);
		//Serial.print("ble Sent String-->  ");
		//Serial.println(info);
	}
}
 2ba:	df 91       	pop	r29
 2bc:	cf 91       	pop	r28
 2be:	08 95       	ret

000002c0 <calBalance>:

void calBalance(uint8_t index, uint8_t pIndex)
{
	if(csArray[index].cAge < pArray[pIndex].age)
 2c0:	90 e0       	ldi	r25, 0x00	; 0
 2c2:	26 e3       	ldi	r18, 0x36	; 54
 2c4:	28 9f       	mul	r18, r24
 2c6:	f0 01       	movw	r30, r0
 2c8:	29 9f       	mul	r18, r25
 2ca:	f0 0d       	add	r31, r0
 2cc:	11 24       	eor	r1, r1
 2ce:	ea 5b       	subi	r30, 0xBA	; 186
 2d0:	fd 4f       	sbci	r31, 0xFD	; 253
 2d2:	42 a9       	ldd	r20, Z+50	; 0x32
 2d4:	53 a9       	ldd	r21, Z+51	; 0x33
 2d6:	70 e0       	ldi	r23, 0x00	; 0
 2d8:	2a e1       	ldi	r18, 0x1A	; 26
 2da:	26 9f       	mul	r18, r22
 2dc:	f0 01       	movw	r30, r0
 2de:	27 9f       	mul	r18, r23
 2e0:	f0 0d       	add	r31, r0
 2e2:	11 24       	eor	r1, r1
 2e4:	ec 53       	subi	r30, 0x3C	; 60
 2e6:	fe 4f       	sbci	r31, 0xFE	; 254
 2e8:	26 89       	ldd	r18, Z+22	; 0x16
 2ea:	37 89       	ldd	r19, Z+23	; 0x17
 2ec:	42 17       	cp	r20, r18
 2ee:	53 07       	cpc	r21, r19
 2f0:	ec f1       	brlt	.+122    	; 0x36c <calBalance+0xac>
		return;
	if(pArray[pIndex].stock <= 0) return;
 2f2:	2a e1       	ldi	r18, 0x1A	; 26
 2f4:	26 9f       	mul	r18, r22
 2f6:	f0 01       	movw	r30, r0
 2f8:	27 9f       	mul	r18, r23
 2fa:	f0 0d       	add	r31, r0
 2fc:	11 24       	eor	r1, r1
 2fe:	ec 53       	subi	r30, 0x3C	; 60
 300:	fe 4f       	sbci	r31, 0xFE	; 254
 302:	20 8d       	ldd	r18, Z+24	; 0x18
 304:	31 8d       	ldd	r19, Z+25	; 0x19
 306:	12 16       	cp	r1, r18
 308:	13 06       	cpc	r1, r19
 30a:	84 f5       	brge	.+96     	; 0x36c <calBalance+0xac>
	int bal = csArray[index].cBal - pArray[pIndex].price;
 30c:	46 e3       	ldi	r20, 0x36	; 54
 30e:	48 9f       	mul	r20, r24
 310:	f0 01       	movw	r30, r0
 312:	49 9f       	mul	r20, r25
 314:	f0 0d       	add	r31, r0
 316:	11 24       	eor	r1, r1
 318:	ea 5b       	subi	r30, 0xBA	; 186
 31a:	fd 4f       	sbci	r31, 0xFD	; 253
 31c:	44 a9       	ldd	r20, Z+52	; 0x34
 31e:	55 a9       	ldd	r21, Z+53	; 0x35
 320:	aa e1       	ldi	r26, 0x1A	; 26
 322:	a6 9f       	mul	r26, r22
 324:	f0 01       	movw	r30, r0
 326:	a7 9f       	mul	r26, r23
 328:	f0 0d       	add	r31, r0
 32a:	11 24       	eor	r1, r1
 32c:	ec 53       	subi	r30, 0x3C	; 60
 32e:	fe 4f       	sbci	r31, 0xFE	; 254
 330:	04 88       	ldd	r0, Z+20	; 0x14
 332:	f5 89       	ldd	r31, Z+21	; 0x15
 334:	e0 2d       	mov	r30, r0
 336:	4e 1b       	sub	r20, r30
 338:	5f 0b       	sbc	r21, r31
	if(bal > 0){
 33a:	14 16       	cp	r1, r20
 33c:	15 06       	cpc	r1, r21
 33e:	b4 f4       	brge	.+44     	; 0x36c <calBalance+0xac>
		csArray[index].cBal = bal;
 340:	a6 e3       	ldi	r26, 0x36	; 54
 342:	a8 9f       	mul	r26, r24
 344:	f0 01       	movw	r30, r0
 346:	a9 9f       	mul	r26, r25
 348:	f0 0d       	add	r31, r0
 34a:	11 24       	eor	r1, r1
 34c:	ea 5b       	subi	r30, 0xBA	; 186
 34e:	fd 4f       	sbci	r31, 0xFD	; 253
 350:	55 ab       	std	Z+53, r21	; 0x35
 352:	44 ab       	std	Z+52, r20	; 0x34
		pArray[pIndex].stock--;
 354:	8a e1       	ldi	r24, 0x1A	; 26
 356:	86 9f       	mul	r24, r22
 358:	f0 01       	movw	r30, r0
 35a:	87 9f       	mul	r24, r23
 35c:	f0 0d       	add	r31, r0
 35e:	11 24       	eor	r1, r1
 360:	ec 53       	subi	r30, 0x3C	; 60
 362:	fe 4f       	sbci	r31, 0xFE	; 254
 364:	21 50       	subi	r18, 0x01	; 1
 366:	31 09       	sbc	r19, r1
 368:	31 8f       	std	Z+25, r19	; 0x19
 36a:	20 8f       	std	Z+24, r18	; 0x18
 36c:	08 95       	ret

0000036e <dataInit>:
	}
}

void dataInit()
{
 36e:	cf 93       	push	r28
 370:	df 93       	push	r29
	/* 고객정보 데이터 저장 */
	strcpy(csArray[0].cID, "a179 15 232 17E");
 372:	c6 e4       	ldi	r28, 0x46	; 70
 374:	d2 e0       	ldi	r29, 0x02	; 2
 376:	80 e1       	ldi	r24, 0x10	; 16
 378:	e3 e4       	ldi	r30, 0x43	; 67
 37a:	f1 e0       	ldi	r31, 0x01	; 1
 37c:	de 01       	movw	r26, r28
 37e:	01 90       	ld	r0, Z+
 380:	0d 92       	st	X+, r0
 382:	8a 95       	dec	r24
 384:	e1 f7       	brne	.-8      	; 0x37e <dataInit+0x10>
	strcpy(csArray[0].cName, "Tom");
 386:	e4 e6       	ldi	r30, 0x64	; 100
 388:	f2 e0       	ldi	r31, 0x02	; 2
 38a:	84 e5       	ldi	r24, 0x54	; 84
 38c:	9f e6       	ldi	r25, 0x6F	; 111
 38e:	91 83       	std	Z+1, r25	; 0x01
 390:	80 83       	st	Z, r24
 392:	8d e6       	ldi	r24, 0x6D	; 109
 394:	90 e0       	ldi	r25, 0x00	; 0
 396:	93 83       	std	Z+3, r25	; 0x03
 398:	82 83       	std	Z+2, r24	; 0x02
	//csArray[0].cID = "a179 15 232 17 \r\n";
	//csArray[0].cName = "Tom";
	csArray[0].cAge = 21;
 39a:	25 e1       	ldi	r18, 0x15	; 21
 39c:	30 e0       	ldi	r19, 0x00	; 0
 39e:	3b ab       	std	Y+51, r19	; 0x33
 3a0:	2a ab       	std	Y+50, r18	; 0x32
	csArray[0].cBal = 10000;
 3a2:	80 e1       	ldi	r24, 0x10	; 16
 3a4:	97 e2       	ldi	r25, 0x27	; 39
 3a6:	9d ab       	std	Y+53, r25	; 0x35
 3a8:	8c ab       	std	Y+52, r24	; 0x34

	strcpy(csArray[1].cID, "a211 153 231 17E");
 3aa:	81 e1       	ldi	r24, 0x11	; 17
 3ac:	e3 e5       	ldi	r30, 0x53	; 83
 3ae:	f1 e0       	ldi	r31, 0x01	; 1
 3b0:	ac e7       	ldi	r26, 0x7C	; 124
 3b2:	b2 e0       	ldi	r27, 0x02	; 2
 3b4:	01 90       	ld	r0, Z+
 3b6:	0d 92       	st	X+, r0
 3b8:	8a 95       	dec	r24
 3ba:	e1 f7       	brne	.-8      	; 0x3b4 <dataInit+0x46>
	strcpy(csArray[1].cName, "Jack");
 3bc:	85 e0       	ldi	r24, 0x05	; 5
 3be:	e4 e6       	ldi	r30, 0x64	; 100
 3c0:	f1 e0       	ldi	r31, 0x01	; 1
 3c2:	aa e9       	ldi	r26, 0x9A	; 154
 3c4:	b2 e0       	ldi	r27, 0x02	; 2
 3c6:	01 90       	ld	r0, Z+
 3c8:	0d 92       	st	X+, r0
 3ca:	8a 95       	dec	r24
 3cc:	e1 f7       	brne	.-8      	; 0x3c6 <dataInit+0x58>
	//csArray[1].cID = "a211 153 231 17 \r\n";
	//csArray[1].cName = "Jack";
	csArray[1].cAge = 17;
 3ce:	81 e1       	ldi	r24, 0x11	; 17
 3d0:	90 e0       	ldi	r25, 0x00	; 0
 3d2:	90 93 af 02 	sts	0x02AF, r25	; 0x8002af <csArray+0x69>
 3d6:	80 93 ae 02 	sts	0x02AE, r24	; 0x8002ae <csArray+0x68>
	csArray[1].cBal = 30000;
 3da:	80 e3       	ldi	r24, 0x30	; 48
 3dc:	95 e7       	ldi	r25, 0x75	; 117
 3de:	90 93 b1 02 	sts	0x02B1, r25	; 0x8002b1 <csArray+0x6b>
 3e2:	80 93 b0 02 	sts	0x02B0, r24	; 0x8002b0 <csArray+0x6a>

	strcpy(csArray[2].cID, "a213 153 231 17E");
 3e6:	81 e1       	ldi	r24, 0x11	; 17
 3e8:	e9 e6       	ldi	r30, 0x69	; 105
 3ea:	f1 e0       	ldi	r31, 0x01	; 1
 3ec:	a2 eb       	ldi	r26, 0xB2	; 178
 3ee:	b2 e0       	ldi	r27, 0x02	; 2
 3f0:	01 90       	ld	r0, Z+
 3f2:	0d 92       	st	X+, r0
 3f4:	8a 95       	dec	r24
 3f6:	e1 f7       	brne	.-8      	; 0x3f0 <dataInit+0x82>
	strcpy(csArray[2].cName, "John");
 3f8:	85 e0       	ldi	r24, 0x05	; 5
 3fa:	ea e7       	ldi	r30, 0x7A	; 122
 3fc:	f1 e0       	ldi	r31, 0x01	; 1
 3fe:	a0 ed       	ldi	r26, 0xD0	; 208
 400:	b2 e0       	ldi	r27, 0x02	; 2
 402:	01 90       	ld	r0, Z+
 404:	0d 92       	st	X+, r0
 406:	8a 95       	dec	r24
 408:	e1 f7       	brne	.-8      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
	//csArray[2].cID = "a213 153 231 17 \r\n";
	//csArray[2].cName = "John";
	csArray[2].cAge = 32;
 40a:	80 e2       	ldi	r24, 0x20	; 32
 40c:	90 e0       	ldi	r25, 0x00	; 0
 40e:	90 93 e5 02 	sts	0x02E5, r25	; 0x8002e5 <csArray+0x9f>
 412:	80 93 e4 02 	sts	0x02E4, r24	; 0x8002e4 <csArray+0x9e>
	csArray[2].cBal = 40000;
 416:	80 e4       	ldi	r24, 0x40	; 64
 418:	9c e9       	ldi	r25, 0x9C	; 156
 41a:	90 93 e7 02 	sts	0x02E7, r25	; 0x8002e7 <csArray+0xa1>
 41e:	80 93 e6 02 	sts	0x02E6, r24	; 0x8002e6 <csArray+0xa0>

	strcpy(csArray[3].cID, "a211 153 561 17E");
 422:	81 e1       	ldi	r24, 0x11	; 17
 424:	ef e7       	ldi	r30, 0x7F	; 127
 426:	f1 e0       	ldi	r31, 0x01	; 1
 428:	a8 ee       	ldi	r26, 0xE8	; 232
 42a:	b2 e0       	ldi	r27, 0x02	; 2
 42c:	01 90       	ld	r0, Z+
 42e:	0d 92       	st	X+, r0
 430:	8a 95       	dec	r24
 432:	e1 f7       	brne	.-8      	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
	strcpy(csArray[3].cName, "Jane");
 434:	85 e0       	ldi	r24, 0x05	; 5
 436:	e0 e9       	ldi	r30, 0x90	; 144
 438:	f1 e0       	ldi	r31, 0x01	; 1
 43a:	a6 e0       	ldi	r26, 0x06	; 6
 43c:	b3 e0       	ldi	r27, 0x03	; 3
 43e:	01 90       	ld	r0, Z+
 440:	0d 92       	st	X+, r0
 442:	8a 95       	dec	r24
 444:	e1 f7       	brne	.-8      	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
	//csArray[3].cID = "a211 153 561 17 \r\n";
	//csArray[3].cName = "Jane";
	csArray[3].cAge = 28;
 446:	8c e1       	ldi	r24, 0x1C	; 28
 448:	90 e0       	ldi	r25, 0x00	; 0
 44a:	90 93 1b 03 	sts	0x031B, r25	; 0x80031b <csArray+0xd5>
 44e:	80 93 1a 03 	sts	0x031A, r24	; 0x80031a <csArray+0xd4>
	csArray[3].cBal = 20000;
 452:	80 e2       	ldi	r24, 0x20	; 32
 454:	9e e4       	ldi	r25, 0x4E	; 78
 456:	90 93 1d 03 	sts	0x031D, r25	; 0x80031d <csArray+0xd7>
 45a:	80 93 1c 03 	sts	0x031C, r24	; 0x80031c <csArray+0xd6>

	strcpy(csArray[4].cID, "a204 153 231 17E");
 45e:	81 e1       	ldi	r24, 0x11	; 17
 460:	e5 e9       	ldi	r30, 0x95	; 149
 462:	f1 e0       	ldi	r31, 0x01	; 1
 464:	ae e1       	ldi	r26, 0x1E	; 30
 466:	b3 e0       	ldi	r27, 0x03	; 3
 468:	01 90       	ld	r0, Z+
 46a:	0d 92       	st	X+, r0
 46c:	8a 95       	dec	r24
 46e:	e1 f7       	brne	.-8      	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
	strcpy(csArray[4].cName, "Mary");
 470:	85 e0       	ldi	r24, 0x05	; 5
 472:	e6 ea       	ldi	r30, 0xA6	; 166
 474:	f1 e0       	ldi	r31, 0x01	; 1
 476:	ac e3       	ldi	r26, 0x3C	; 60
 478:	b3 e0       	ldi	r27, 0x03	; 3
 47a:	01 90       	ld	r0, Z+
 47c:	0d 92       	st	X+, r0
 47e:	8a 95       	dec	r24
 480:	e1 f7       	brne	.-8      	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
	//csArray[4].cID = "a204 153 231 17 \r\n";
	//csArray[4].cName = "Mary";
	csArray[4].cAge = 56;
 482:	88 e3       	ldi	r24, 0x38	; 56
 484:	90 e0       	ldi	r25, 0x00	; 0
 486:	90 93 51 03 	sts	0x0351, r25	; 0x800351 <csArray+0x10b>
 48a:	80 93 50 03 	sts	0x0350, r24	; 0x800350 <csArray+0x10a>
	csArray[4].cBal = 64000;
 48e:	80 e0       	ldi	r24, 0x00	; 0
 490:	9a ef       	ldi	r25, 0xFA	; 250
 492:	90 93 53 03 	sts	0x0353, r25	; 0x800353 <csArray+0x10d>
 496:	80 93 52 03 	sts	0x0352, r24	; 0x800352 <csArray+0x10c>

	/* 상품정보 데이터 저장 */
	strcpy(pArray[0].pName, "N/A");
 49a:	c4 ec       	ldi	r28, 0xC4	; 196
 49c:	d1 e0       	ldi	r29, 0x01	; 1
 49e:	8e e4       	ldi	r24, 0x4E	; 78
 4a0:	9f e2       	ldi	r25, 0x2F	; 47
 4a2:	99 83       	std	Y+1, r25	; 0x01
 4a4:	88 83       	st	Y, r24
 4a6:	81 e4       	ldi	r24, 0x41	; 65
 4a8:	90 e0       	ldi	r25, 0x00	; 0
 4aa:	9b 83       	std	Y+3, r25	; 0x03
 4ac:	8a 83       	std	Y+2, r24	; 0x02
	pArray[0].price = 0;
 4ae:	1d 8a       	std	Y+21, r1	; 0x15
 4b0:	1c 8a       	std	Y+20, r1	; 0x14
	pArray[0].age = 0;
 4b2:	1f 8a       	std	Y+23, r1	; 0x17
 4b4:	1e 8a       	std	Y+22, r1	; 0x16
	pArray[0].stock = 10;
 4b6:	8a e0       	ldi	r24, 0x0A	; 10
 4b8:	90 e0       	ldi	r25, 0x00	; 0
 4ba:	99 8f       	std	Y+25, r25	; 0x19
 4bc:	88 8f       	std	Y+24, r24	; 0x18
	
	strcpy(pArray[1].pName, "drink");
 4be:	86 e0       	ldi	r24, 0x06	; 6
 4c0:	eb ea       	ldi	r30, 0xAB	; 171
 4c2:	f1 e0       	ldi	r31, 0x01	; 1
 4c4:	ae ed       	ldi	r26, 0xDE	; 222
 4c6:	b1 e0       	ldi	r27, 0x01	; 1
 4c8:	01 90       	ld	r0, Z+
 4ca:	0d 92       	st	X+, r0
 4cc:	8a 95       	dec	r24
 4ce:	e1 f7       	brne	.-8      	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
	pArray[1].price = 1500;
 4d0:	8c ed       	ldi	r24, 0xDC	; 220
 4d2:	95 e0       	ldi	r25, 0x05	; 5
 4d4:	9f a7       	std	Y+47, r25	; 0x2f
 4d6:	8e a7       	std	Y+46, r24	; 0x2e
	pArray[1].age = 0;
 4d8:	19 aa       	std	Y+49, r1	; 0x31
 4da:	18 aa       	std	Y+48, r1	; 0x30
	pArray[1].stock = 4;
 4dc:	84 e0       	ldi	r24, 0x04	; 4
 4de:	90 e0       	ldi	r25, 0x00	; 0
 4e0:	9b ab       	std	Y+51, r25	; 0x33
 4e2:	8a ab       	std	Y+50, r24	; 0x32
	
	strcpy(pArray[2].pName, "cigar");
 4e4:	46 e0       	ldi	r20, 0x06	; 6
 4e6:	e1 eb       	ldi	r30, 0xB1	; 177
 4e8:	f1 e0       	ldi	r31, 0x01	; 1
 4ea:	a8 ef       	ldi	r26, 0xF8	; 248
 4ec:	b1 e0       	ldi	r27, 0x01	; 1
 4ee:	01 90       	ld	r0, Z+
 4f0:	0d 92       	st	X+, r0
 4f2:	4a 95       	dec	r20
 4f4:	e1 f7       	brne	.-8      	; 0x4ee <__LOCK_REGION_LENGTH__+0xee>
	pArray[2].price = 4000;
 4f6:	40 ea       	ldi	r20, 0xA0	; 160
 4f8:	5f e0       	ldi	r21, 0x0F	; 15
 4fa:	50 93 0d 02 	sts	0x020D, r21	; 0x80020d <__data_end+0x49>
 4fe:	40 93 0c 02 	sts	0x020C, r20	; 0x80020c <__data_end+0x48>
	pArray[2].age = 19;
 502:	43 e1       	ldi	r20, 0x13	; 19
 504:	50 e0       	ldi	r21, 0x00	; 0
 506:	50 93 0f 02 	sts	0x020F, r21	; 0x80020f <__data_end+0x4b>
 50a:	40 93 0e 02 	sts	0x020E, r20	; 0x80020e <__data_end+0x4a>
	pArray[2].stock = 21;
 50e:	30 93 11 02 	sts	0x0211, r19	; 0x800211 <__data_end+0x4d>
 512:	20 93 10 02 	sts	0x0210, r18	; 0x800210 <__data_end+0x4c>
	
	strcpy(pArray[3].pName, "snack");
 516:	26 e0       	ldi	r18, 0x06	; 6
 518:	e7 eb       	ldi	r30, 0xB7	; 183
 51a:	f1 e0       	ldi	r31, 0x01	; 1
 51c:	a2 e1       	ldi	r26, 0x12	; 18
 51e:	b2 e0       	ldi	r27, 0x02	; 2
 520:	01 90       	ld	r0, Z+
 522:	0d 92       	st	X+, r0
 524:	2a 95       	dec	r18
 526:	e1 f7       	brne	.-8      	; 0x520 <__LOCK_REGION_LENGTH__+0x120>
	pArray[3].price = 1700;
 528:	24 ea       	ldi	r18, 0xA4	; 164
 52a:	36 e0       	ldi	r19, 0x06	; 6
 52c:	30 93 27 02 	sts	0x0227, r19	; 0x800227 <__data_end+0x63>
 530:	20 93 26 02 	sts	0x0226, r18	; 0x800226 <__data_end+0x62>
	pArray[3].age = 0;
 534:	10 92 29 02 	sts	0x0229, r1	; 0x800229 <__data_end+0x65>
 538:	10 92 28 02 	sts	0x0228, r1	; 0x800228 <__data_end+0x64>
	pArray[3].stock = 4;
 53c:	90 93 2b 02 	sts	0x022B, r25	; 0x80022b <__data_end+0x67>
 540:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <__data_end+0x66>
	
	strcpy(pArray[4].pName, "coffee");
 544:	87 e0       	ldi	r24, 0x07	; 7
 546:	ed eb       	ldi	r30, 0xBD	; 189
 548:	f1 e0       	ldi	r31, 0x01	; 1
 54a:	ac e2       	ldi	r26, 0x2C	; 44
 54c:	b2 e0       	ldi	r27, 0x02	; 2
 54e:	01 90       	ld	r0, Z+
 550:	0d 92       	st	X+, r0
 552:	8a 95       	dec	r24
 554:	e1 f7       	brne	.-8      	; 0x54e <__LOCK_REGION_LENGTH__+0x14e>
	pArray[4].price = 2500;
 556:	84 ec       	ldi	r24, 0xC4	; 196
 558:	99 e0       	ldi	r25, 0x09	; 9
 55a:	90 93 41 02 	sts	0x0241, r25	; 0x800241 <__data_end+0x7d>
 55e:	80 93 40 02 	sts	0x0240, r24	; 0x800240 <__data_end+0x7c>
	pArray[4].age = 15;
 562:	8f e0       	ldi	r24, 0x0F	; 15
 564:	90 e0       	ldi	r25, 0x00	; 0
 566:	90 93 43 02 	sts	0x0243, r25	; 0x800243 <__data_end+0x7f>
 56a:	80 93 42 02 	sts	0x0242, r24	; 0x800242 <__data_end+0x7e>
	pArray[4].stock = 9;
 56e:	89 e0       	ldi	r24, 0x09	; 9
 570:	90 e0       	ldi	r25, 0x00	; 0
 572:	90 93 45 02 	sts	0x0245, r25	; 0x800245 <__data_end+0x81>
 576:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <__data_end+0x80>
		
	
 57a:	df 91       	pop	r29
 57c:	cf 91       	pop	r28
 57e:	08 95       	ret

00000580 <main>:
void calBalance(uint8_t index, uint8_t pIndex); //잔액계산

void dataInit(); // 고객정보 초기화

int main(void)
{
 580:	cf 93       	push	r28
 582:	df 93       	push	r29
 584:	cd b7       	in	r28, 0x3d	; 61
 586:	de b7       	in	r29, 0x3e	; 62
 588:	6e 97       	sbiw	r28, 0x1e	; 30
 58a:	0f b6       	in	r0, 0x3f	; 63
 58c:	f8 94       	cli
 58e:	de bf       	out	0x3e, r29	; 62
 590:	0f be       	out	0x3f, r0	; 63
 592:	cd bf       	out	0x3d, r28	; 61
	DDRE = 0x02; // Set TX output
 594:	82 e0       	ldi	r24, 0x02	; 2
 596:	82 b9       	out	0x02, r24	; 2
	UCSR0B |= (1 << RXEN0 | 1 << TXEN0); // RXEN0 : receiver enable, TXEN0 : Transmitter enable
 598:	8a b1       	in	r24, 0x0a	; 10
 59a:	88 61       	ori	r24, 0x18	; 24
 59c:	8a b9       	out	0x0a, r24	; 10
	UCSR0C |= 0x06; // UCSZn1 : 1 UCSZn0 : 1 -> 8-bit
 59e:	e5 e9       	ldi	r30, 0x95	; 149
 5a0:	f0 e0       	ldi	r31, 0x00	; 0
 5a2:	80 81       	ld	r24, Z
 5a4:	86 60       	ori	r24, 0x06	; 6
 5a6:	80 83       	st	Z, r24
	UBRR0L = BAUDRATE_9600; // speed : 9600
 5a8:	8f e5       	ldi	r24, 0x5F	; 95
 5aa:	89 b9       	out	0x09, r24	; 9
	
	uint8_t cardToken; // 수신받은 문자
	char cardNum[30] = {0}; // 수신받은 카드 번호
 5ac:	fe 01       	movw	r30, r28
 5ae:	31 96       	adiw	r30, 0x01	; 1
 5b0:	8e e1       	ldi	r24, 0x1E	; 30
 5b2:	df 01       	movw	r26, r30
 5b4:	1d 92       	st	X+, r1
 5b6:	8a 95       	dec	r24
 5b8:	e9 f7       	brne	.-6      	; 0x5b4 <main+0x34>
	//char* chkCus;
	//char* sendToken;
	uint8_t cardIdx;
	uint8_t csIndex; // 고객정보 배열 인덱스
	
	dataInit(); // 고객정보 초기화
 5ba:	d9 de       	rcall	.-590    	; 0x36e <dataInit>
    /* Replace with your application code */
    while (1) 
    {
		cardIdx = 0;
		while(1){
			cardToken = UART0_receive();
 5bc:	10 e0       	ldi	r17, 0x00	; 0
 5be:	88 dd       	rcall	.-1264   	; 0xd0 <UART0_receive>
			//UART0_transmit(cardToken);
			
			cardNum[cardIdx++] = cardToken;
 5c0:	91 e0       	ldi	r25, 0x01	; 1
 5c2:	91 0f       	add	r25, r17
 5c4:	e1 e0       	ldi	r30, 0x01	; 1
 5c6:	f0 e0       	ldi	r31, 0x00	; 0
 5c8:	ec 0f       	add	r30, r28
 5ca:	fd 1f       	adc	r31, r29
 5cc:	e1 0f       	add	r30, r17
 5ce:	f1 1d       	adc	r31, r1
 5d0:	80 83       	st	Z, r24
 5d2:	19 2f       	mov	r17, r25
			if(cardToken == 'E'){
 5d4:	85 34       	cpi	r24, 0x45	; 69
 5d6:	99 f7       	brne	.-26     	; 0x5be <main+0x3e>
				cardNum[cardIdx] = '\0';
 5d8:	de 01       	movw	r26, r28
 5da:	11 96       	adiw	r26, 0x01	; 1
 5dc:	fd 01       	movw	r30, r26
 5de:	e9 0f       	add	r30, r25
 5e0:	f1 1d       	adc	r31, r1
 5e2:	10 82       	st	Z, r1
				break;
				}
		}
		/* 고객 정보 조회 및 전송 */
		if(((strlen(cardNum) > 13) && (strlen(cardNum) < 20)) && (cardNum[0] == 'a')){
 5e4:	fd 01       	movw	r30, r26
 5e6:	01 90       	ld	r0, Z+
 5e8:	00 20       	and	r0, r0
 5ea:	e9 f7       	brne	.-6      	; 0x5e6 <main+0x66>
 5ec:	31 97       	sbiw	r30, 0x01	; 1
 5ee:	ea 1b       	sub	r30, r26
 5f0:	fb 0b       	sbc	r31, r27
 5f2:	ee 30       	cpi	r30, 0x0E	; 14
 5f4:	f1 05       	cpc	r31, r1
 5f6:	a8 f0       	brcs	.+42     	; 0x622 <main+0xa2>
 5f8:	74 97       	sbiw	r30, 0x14	; 20
 5fa:	98 f4       	brcc	.+38     	; 0x622 <main+0xa2>
 5fc:	89 81       	ldd	r24, Y+1	; 0x01
 5fe:	81 36       	cpi	r24, 0x61	; 97
			csIndex = checkCard(cardNum); // 카드번호로 고객 조회
 600:	81 f4       	brne	.+32     	; 0x622 <main+0xa2>
 602:	cd 01       	movw	r24, r26
 604:	2f de       	rcall	.-930    	; 0x264 <checkCard>
				/* 고객정보 조회 실패 */
				sendInfo("1", 1);
			}
			else{
				/* 고객 정보 조회 성공 */
				char* cusInfoStr = getCusInfo(csIndex);
 606:	08 2f       	mov	r16, r24
 608:	67 dd       	rcall	.-1330   	; 0xd8 <getCusInfo>
				if(cusInfoStr == NULL){
					
				}
				char* cusInfoBle = getBleInfo(csIndex);
 60a:	7c 01       	movw	r14, r24
 60c:	80 2f       	mov	r24, r16
 60e:	99 dd       	rcall	.-1230   	; 0x142 <getBleInfo>
				if(cusInfoBle == NULL){
					
				}
				sendInfo(cusInfoStr,UART);
 610:	6c 01       	movw	r12, r24
 612:	61 e0       	ldi	r22, 0x01	; 1
 614:	c7 01       	movw	r24, r14
				//sendInfo(cusInfoBle,BLUETOOTH);
				
				free(cusInfoStr);
 616:	46 de       	rcall	.-884    	; 0x2a4 <sendInfo>
 618:	c7 01       	movw	r24, r14
 61a:	ba d0       	rcall	.+372    	; 0x790 <free>
				free(cusInfoBle);
 61c:	c6 01       	movw	r24, r12
 61e:	b8 d0       	rcall	.+368    	; 0x790 <free>
 620:	17 c0       	rjmp	.+46     	; 0x650 <main+0xd0>
 622:	89 81       	ldd	r24, Y+1	; 0x01
		}
		//memset(cardNum, 0, sizeof(cardNum));
		
		#if 1
		/* 상품 정보 조회 및 전송 */
		else if(cardNum[0] == 'c'){
 624:	83 36       	cpi	r24, 0x63	; 99
 626:	a1 f4       	brne	.+40     	; 0x650 <main+0xd0>
			int pIdx = cardNum[1]-'0';
 628:	ea 80       	ldd	r14, Y+2	; 0x02
 62a:	f1 2c       	mov	r15, r1
 62c:	b0 e3       	ldi	r27, 0x30	; 48
 62e:	eb 1a       	sub	r14, r27
			char* proInfoStr = getProInfo(pIdx);
 630:	f1 08       	sbc	r15, r1
 632:	8e 2d       	mov	r24, r14
 634:	b7 dd       	rcall	.-1170   	; 0x1a4 <getProInfo>
			if(proInfoStr == NULL){
				// malloc 실패
			}
			char* stoInfoStr = getBleStock(pIdx);
 636:	5c 01       	movw	r10, r24
 638:	8e 2d       	mov	r24, r14
 63a:	e6 dd       	rcall	.-1076   	; 0x208 <getBleStock>
			if(stoInfoStr == NULL){
				// malloc 실패
			}
			calBalance(csIndex, pIdx);
 63c:	6c 01       	movw	r12, r24
 63e:	6e 2d       	mov	r22, r14
 640:	80 2f       	mov	r24, r16
 642:	3e de       	rcall	.-900    	; 0x2c0 <calBalance>
			sendInfo(proInfoStr, UART);
 644:	61 e0       	ldi	r22, 0x01	; 1
 646:	c5 01       	movw	r24, r10
 648:	2d de       	rcall	.-934    	; 0x2a4 <sendInfo>
 64a:	61 e0       	ldi	r22, 0x01	; 1
			sendInfo(stoInfoStr, UART);
 64c:	c6 01       	movw	r24, r12
 64e:	2a de       	rcall	.-940    	; 0x2a4 <sendInfo>
 650:	fe 01       	movw	r30, r28
 652:	31 96       	adiw	r30, 0x01	; 1
			
		}
		memset(cardNum, 0, sizeof(cardNum));
 654:	8e e1       	ldi	r24, 0x1E	; 30
 656:	df 01       	movw	r26, r30
 658:	1d 92       	st	X+, r1
 65a:	8a 95       	dec	r24
 65c:	e9 f7       	brne	.-6      	; 0x658 <main+0xd8>
 65e:	ae cf       	rjmp	.-164    	; 0x5bc <main+0x3c>

00000660 <malloc>:
 660:	0f 93       	push	r16
		#endif
		
    }
 662:	1f 93       	push	r17
 664:	cf 93       	push	r28
 666:	df 93       	push	r29
 668:	82 30       	cpi	r24, 0x02	; 2
 66a:	91 05       	cpc	r25, r1
 66c:	10 f4       	brcc	.+4      	; 0x672 <malloc+0x12>
 66e:	82 e0       	ldi	r24, 0x02	; 2
 670:	90 e0       	ldi	r25, 0x00	; 0
 672:	e0 91 56 03 	lds	r30, 0x0356	; 0x800356 <__flp>
 676:	f0 91 57 03 	lds	r31, 0x0357	; 0x800357 <__flp+0x1>
 67a:	20 e0       	ldi	r18, 0x00	; 0
 67c:	30 e0       	ldi	r19, 0x00	; 0
 67e:	a0 e0       	ldi	r26, 0x00	; 0
 680:	b0 e0       	ldi	r27, 0x00	; 0
 682:	30 97       	sbiw	r30, 0x00	; 0
 684:	19 f1       	breq	.+70     	; 0x6cc <malloc+0x6c>
 686:	40 81       	ld	r20, Z
 688:	51 81       	ldd	r21, Z+1	; 0x01
 68a:	02 81       	ldd	r16, Z+2	; 0x02
 68c:	13 81       	ldd	r17, Z+3	; 0x03
 68e:	48 17       	cp	r20, r24
 690:	59 07       	cpc	r21, r25
 692:	c8 f0       	brcs	.+50     	; 0x6c6 <malloc+0x66>
 694:	84 17       	cp	r24, r20
 696:	95 07       	cpc	r25, r21
 698:	69 f4       	brne	.+26     	; 0x6b4 <malloc+0x54>
 69a:	10 97       	sbiw	r26, 0x00	; 0
 69c:	31 f0       	breq	.+12     	; 0x6aa <malloc+0x4a>
 69e:	12 96       	adiw	r26, 0x02	; 2
 6a0:	0c 93       	st	X, r16
 6a2:	12 97       	sbiw	r26, 0x02	; 2
 6a4:	13 96       	adiw	r26, 0x03	; 3
 6a6:	1c 93       	st	X, r17
 6a8:	27 c0       	rjmp	.+78     	; 0x6f8 <malloc+0x98>
 6aa:	00 93 56 03 	sts	0x0356, r16	; 0x800356 <__flp>
 6ae:	10 93 57 03 	sts	0x0357, r17	; 0x800357 <__flp+0x1>
 6b2:	22 c0       	rjmp	.+68     	; 0x6f8 <malloc+0x98>
 6b4:	21 15       	cp	r18, r1
 6b6:	31 05       	cpc	r19, r1
 6b8:	19 f0       	breq	.+6      	; 0x6c0 <malloc+0x60>
 6ba:	42 17       	cp	r20, r18
 6bc:	53 07       	cpc	r21, r19
 6be:	18 f4       	brcc	.+6      	; 0x6c6 <malloc+0x66>
 6c0:	9a 01       	movw	r18, r20
 6c2:	bd 01       	movw	r22, r26
 6c4:	ef 01       	movw	r28, r30
 6c6:	df 01       	movw	r26, r30
 6c8:	f8 01       	movw	r30, r16
 6ca:	db cf       	rjmp	.-74     	; 0x682 <malloc+0x22>
 6cc:	21 15       	cp	r18, r1
 6ce:	31 05       	cpc	r19, r1
 6d0:	f9 f0       	breq	.+62     	; 0x710 <malloc+0xb0>
 6d2:	28 1b       	sub	r18, r24
 6d4:	39 0b       	sbc	r19, r25
 6d6:	24 30       	cpi	r18, 0x04	; 4
 6d8:	31 05       	cpc	r19, r1
 6da:	80 f4       	brcc	.+32     	; 0x6fc <malloc+0x9c>
 6dc:	8a 81       	ldd	r24, Y+2	; 0x02
 6de:	9b 81       	ldd	r25, Y+3	; 0x03
 6e0:	61 15       	cp	r22, r1
 6e2:	71 05       	cpc	r23, r1
 6e4:	21 f0       	breq	.+8      	; 0x6ee <malloc+0x8e>
 6e6:	fb 01       	movw	r30, r22
 6e8:	93 83       	std	Z+3, r25	; 0x03
 6ea:	82 83       	std	Z+2, r24	; 0x02
 6ec:	04 c0       	rjmp	.+8      	; 0x6f6 <malloc+0x96>
 6ee:	90 93 57 03 	sts	0x0357, r25	; 0x800357 <__flp+0x1>
 6f2:	80 93 56 03 	sts	0x0356, r24	; 0x800356 <__flp>
 6f6:	fe 01       	movw	r30, r28
 6f8:	32 96       	adiw	r30, 0x02	; 2
 6fa:	44 c0       	rjmp	.+136    	; 0x784 <malloc+0x124>
 6fc:	fe 01       	movw	r30, r28
 6fe:	e2 0f       	add	r30, r18
 700:	f3 1f       	adc	r31, r19
 702:	81 93       	st	Z+, r24
 704:	91 93       	st	Z+, r25
 706:	22 50       	subi	r18, 0x02	; 2
 708:	31 09       	sbc	r19, r1
 70a:	39 83       	std	Y+1, r19	; 0x01
 70c:	28 83       	st	Y, r18
 70e:	3a c0       	rjmp	.+116    	; 0x784 <malloc+0x124>
 710:	20 91 54 03 	lds	r18, 0x0354	; 0x800354 <__brkval>
 714:	30 91 55 03 	lds	r19, 0x0355	; 0x800355 <__brkval+0x1>
 718:	23 2b       	or	r18, r19
 71a:	41 f4       	brne	.+16     	; 0x72c <malloc+0xcc>
 71c:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 720:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 724:	30 93 55 03 	sts	0x0355, r19	; 0x800355 <__brkval+0x1>
 728:	20 93 54 03 	sts	0x0354, r18	; 0x800354 <__brkval>
 72c:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 730:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 734:	21 15       	cp	r18, r1
 736:	31 05       	cpc	r19, r1
 738:	41 f4       	brne	.+16     	; 0x74a <malloc+0xea>
 73a:	2d b7       	in	r18, 0x3d	; 61
 73c:	3e b7       	in	r19, 0x3e	; 62
 73e:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 742:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 746:	24 1b       	sub	r18, r20
 748:	35 0b       	sbc	r19, r21
 74a:	e0 91 54 03 	lds	r30, 0x0354	; 0x800354 <__brkval>
 74e:	f0 91 55 03 	lds	r31, 0x0355	; 0x800355 <__brkval+0x1>
 752:	e2 17       	cp	r30, r18
 754:	f3 07       	cpc	r31, r19
 756:	a0 f4       	brcc	.+40     	; 0x780 <malloc+0x120>
 758:	2e 1b       	sub	r18, r30
 75a:	3f 0b       	sbc	r19, r31
 75c:	28 17       	cp	r18, r24
 75e:	39 07       	cpc	r19, r25
 760:	78 f0       	brcs	.+30     	; 0x780 <malloc+0x120>
 762:	ac 01       	movw	r20, r24
 764:	4e 5f       	subi	r20, 0xFE	; 254
 766:	5f 4f       	sbci	r21, 0xFF	; 255
 768:	24 17       	cp	r18, r20
 76a:	35 07       	cpc	r19, r21
 76c:	48 f0       	brcs	.+18     	; 0x780 <malloc+0x120>
 76e:	4e 0f       	add	r20, r30
 770:	5f 1f       	adc	r21, r31
 772:	50 93 55 03 	sts	0x0355, r21	; 0x800355 <__brkval+0x1>
 776:	40 93 54 03 	sts	0x0354, r20	; 0x800354 <__brkval>
 77a:	81 93       	st	Z+, r24
 77c:	91 93       	st	Z+, r25
 77e:	02 c0       	rjmp	.+4      	; 0x784 <malloc+0x124>
 780:	e0 e0       	ldi	r30, 0x00	; 0
 782:	f0 e0       	ldi	r31, 0x00	; 0
 784:	cf 01       	movw	r24, r30
 786:	df 91       	pop	r29
 788:	cf 91       	pop	r28
 78a:	1f 91       	pop	r17
 78c:	0f 91       	pop	r16
 78e:	08 95       	ret

00000790 <free>:
 790:	cf 93       	push	r28
 792:	df 93       	push	r29
 794:	00 97       	sbiw	r24, 0x00	; 0
 796:	09 f4       	brne	.+2      	; 0x79a <free+0xa>
 798:	81 c0       	rjmp	.+258    	; 0x89c <free+0x10c>
 79a:	fc 01       	movw	r30, r24
 79c:	32 97       	sbiw	r30, 0x02	; 2
 79e:	13 82       	std	Z+3, r1	; 0x03
 7a0:	12 82       	std	Z+2, r1	; 0x02
 7a2:	a0 91 56 03 	lds	r26, 0x0356	; 0x800356 <__flp>
 7a6:	b0 91 57 03 	lds	r27, 0x0357	; 0x800357 <__flp+0x1>
 7aa:	10 97       	sbiw	r26, 0x00	; 0
 7ac:	81 f4       	brne	.+32     	; 0x7ce <free+0x3e>
 7ae:	20 81       	ld	r18, Z
 7b0:	31 81       	ldd	r19, Z+1	; 0x01
 7b2:	82 0f       	add	r24, r18
 7b4:	93 1f       	adc	r25, r19
 7b6:	20 91 54 03 	lds	r18, 0x0354	; 0x800354 <__brkval>
 7ba:	30 91 55 03 	lds	r19, 0x0355	; 0x800355 <__brkval+0x1>
 7be:	28 17       	cp	r18, r24
 7c0:	39 07       	cpc	r19, r25
 7c2:	51 f5       	brne	.+84     	; 0x818 <free+0x88>
 7c4:	f0 93 55 03 	sts	0x0355, r31	; 0x800355 <__brkval+0x1>
 7c8:	e0 93 54 03 	sts	0x0354, r30	; 0x800354 <__brkval>
 7cc:	67 c0       	rjmp	.+206    	; 0x89c <free+0x10c>
 7ce:	ed 01       	movw	r28, r26
 7d0:	20 e0       	ldi	r18, 0x00	; 0
 7d2:	30 e0       	ldi	r19, 0x00	; 0
 7d4:	ce 17       	cp	r28, r30
 7d6:	df 07       	cpc	r29, r31
 7d8:	40 f4       	brcc	.+16     	; 0x7ea <free+0x5a>
 7da:	4a 81       	ldd	r20, Y+2	; 0x02
 7dc:	5b 81       	ldd	r21, Y+3	; 0x03
 7de:	9e 01       	movw	r18, r28
 7e0:	41 15       	cp	r20, r1
 7e2:	51 05       	cpc	r21, r1
 7e4:	f1 f0       	breq	.+60     	; 0x822 <free+0x92>
 7e6:	ea 01       	movw	r28, r20
 7e8:	f5 cf       	rjmp	.-22     	; 0x7d4 <free+0x44>
 7ea:	d3 83       	std	Z+3, r29	; 0x03
 7ec:	c2 83       	std	Z+2, r28	; 0x02
 7ee:	40 81       	ld	r20, Z
 7f0:	51 81       	ldd	r21, Z+1	; 0x01
 7f2:	84 0f       	add	r24, r20
 7f4:	95 1f       	adc	r25, r21
 7f6:	c8 17       	cp	r28, r24
 7f8:	d9 07       	cpc	r29, r25
 7fa:	59 f4       	brne	.+22     	; 0x812 <free+0x82>
 7fc:	88 81       	ld	r24, Y
 7fe:	99 81       	ldd	r25, Y+1	; 0x01
 800:	84 0f       	add	r24, r20
 802:	95 1f       	adc	r25, r21
 804:	02 96       	adiw	r24, 0x02	; 2
 806:	91 83       	std	Z+1, r25	; 0x01
 808:	80 83       	st	Z, r24
 80a:	8a 81       	ldd	r24, Y+2	; 0x02
 80c:	9b 81       	ldd	r25, Y+3	; 0x03
 80e:	93 83       	std	Z+3, r25	; 0x03
 810:	82 83       	std	Z+2, r24	; 0x02
 812:	21 15       	cp	r18, r1
 814:	31 05       	cpc	r19, r1
 816:	29 f4       	brne	.+10     	; 0x822 <free+0x92>
 818:	f0 93 57 03 	sts	0x0357, r31	; 0x800357 <__flp+0x1>
 81c:	e0 93 56 03 	sts	0x0356, r30	; 0x800356 <__flp>
 820:	3d c0       	rjmp	.+122    	; 0x89c <free+0x10c>
 822:	e9 01       	movw	r28, r18
 824:	fb 83       	std	Y+3, r31	; 0x03
 826:	ea 83       	std	Y+2, r30	; 0x02
 828:	49 91       	ld	r20, Y+
 82a:	59 91       	ld	r21, Y+
 82c:	c4 0f       	add	r28, r20
 82e:	d5 1f       	adc	r29, r21
 830:	ec 17       	cp	r30, r28
 832:	fd 07       	cpc	r31, r29
 834:	61 f4       	brne	.+24     	; 0x84e <free+0xbe>
 836:	80 81       	ld	r24, Z
 838:	91 81       	ldd	r25, Z+1	; 0x01
 83a:	84 0f       	add	r24, r20
 83c:	95 1f       	adc	r25, r21
 83e:	02 96       	adiw	r24, 0x02	; 2
 840:	e9 01       	movw	r28, r18
 842:	99 83       	std	Y+1, r25	; 0x01
 844:	88 83       	st	Y, r24
 846:	82 81       	ldd	r24, Z+2	; 0x02
 848:	93 81       	ldd	r25, Z+3	; 0x03
 84a:	9b 83       	std	Y+3, r25	; 0x03
 84c:	8a 83       	std	Y+2, r24	; 0x02
 84e:	e0 e0       	ldi	r30, 0x00	; 0
 850:	f0 e0       	ldi	r31, 0x00	; 0
 852:	12 96       	adiw	r26, 0x02	; 2
 854:	8d 91       	ld	r24, X+
 856:	9c 91       	ld	r25, X
 858:	13 97       	sbiw	r26, 0x03	; 3
 85a:	00 97       	sbiw	r24, 0x00	; 0
 85c:	19 f0       	breq	.+6      	; 0x864 <free+0xd4>
 85e:	fd 01       	movw	r30, r26
 860:	dc 01       	movw	r26, r24
 862:	f7 cf       	rjmp	.-18     	; 0x852 <free+0xc2>
 864:	8d 91       	ld	r24, X+
 866:	9c 91       	ld	r25, X
 868:	11 97       	sbiw	r26, 0x01	; 1
 86a:	9d 01       	movw	r18, r26
 86c:	2e 5f       	subi	r18, 0xFE	; 254
 86e:	3f 4f       	sbci	r19, 0xFF	; 255
 870:	82 0f       	add	r24, r18
 872:	93 1f       	adc	r25, r19
 874:	20 91 54 03 	lds	r18, 0x0354	; 0x800354 <__brkval>
 878:	30 91 55 03 	lds	r19, 0x0355	; 0x800355 <__brkval+0x1>
 87c:	28 17       	cp	r18, r24
 87e:	39 07       	cpc	r19, r25
 880:	69 f4       	brne	.+26     	; 0x89c <free+0x10c>
 882:	30 97       	sbiw	r30, 0x00	; 0
 884:	29 f4       	brne	.+10     	; 0x890 <free+0x100>
 886:	10 92 57 03 	sts	0x0357, r1	; 0x800357 <__flp+0x1>
 88a:	10 92 56 03 	sts	0x0356, r1	; 0x800356 <__flp>
 88e:	02 c0       	rjmp	.+4      	; 0x894 <free+0x104>
 890:	13 82       	std	Z+3, r1	; 0x03
 892:	12 82       	std	Z+2, r1	; 0x02
 894:	b0 93 55 03 	sts	0x0355, r27	; 0x800355 <__brkval+0x1>
 898:	a0 93 54 03 	sts	0x0354, r26	; 0x800354 <__brkval>
 89c:	df 91       	pop	r29
 89e:	cf 91       	pop	r28
 8a0:	08 95       	ret

000008a2 <strcmp>:
 8a2:	fb 01       	movw	r30, r22
 8a4:	dc 01       	movw	r26, r24
 8a6:	8d 91       	ld	r24, X+
 8a8:	01 90       	ld	r0, Z+
 8aa:	80 19       	sub	r24, r0
 8ac:	01 10       	cpse	r0, r1
 8ae:	d9 f3       	breq	.-10     	; 0x8a6 <strcmp+0x4>
 8b0:	99 0b       	sbc	r25, r25
 8b2:	08 95       	ret

000008b4 <sprintf>:
 8b4:	0f 93       	push	r16
 8b6:	1f 93       	push	r17
 8b8:	cf 93       	push	r28
 8ba:	df 93       	push	r29
 8bc:	cd b7       	in	r28, 0x3d	; 61
 8be:	de b7       	in	r29, 0x3e	; 62
 8c0:	2e 97       	sbiw	r28, 0x0e	; 14
 8c2:	0f b6       	in	r0, 0x3f	; 63
 8c4:	f8 94       	cli
 8c6:	de bf       	out	0x3e, r29	; 62
 8c8:	0f be       	out	0x3f, r0	; 63
 8ca:	cd bf       	out	0x3d, r28	; 61
 8cc:	0d 89       	ldd	r16, Y+21	; 0x15
 8ce:	1e 89       	ldd	r17, Y+22	; 0x16
 8d0:	86 e0       	ldi	r24, 0x06	; 6
 8d2:	8c 83       	std	Y+4, r24	; 0x04
 8d4:	1a 83       	std	Y+2, r17	; 0x02
 8d6:	09 83       	std	Y+1, r16	; 0x01
 8d8:	8f ef       	ldi	r24, 0xFF	; 255
 8da:	9f e7       	ldi	r25, 0x7F	; 127
 8dc:	9e 83       	std	Y+6, r25	; 0x06
 8de:	8d 83       	std	Y+5, r24	; 0x05
 8e0:	ae 01       	movw	r20, r28
 8e2:	47 5e       	subi	r20, 0xE7	; 231
 8e4:	5f 4f       	sbci	r21, 0xFF	; 255
 8e6:	6f 89       	ldd	r22, Y+23	; 0x17
 8e8:	78 8d       	ldd	r23, Y+24	; 0x18
 8ea:	ce 01       	movw	r24, r28
 8ec:	01 96       	adiw	r24, 0x01	; 1
 8ee:	10 d0       	rcall	.+32     	; 0x910 <vfprintf>
 8f0:	ef 81       	ldd	r30, Y+7	; 0x07
 8f2:	f8 85       	ldd	r31, Y+8	; 0x08
 8f4:	e0 0f       	add	r30, r16
 8f6:	f1 1f       	adc	r31, r17
 8f8:	10 82       	st	Z, r1
 8fa:	2e 96       	adiw	r28, 0x0e	; 14
 8fc:	0f b6       	in	r0, 0x3f	; 63
 8fe:	f8 94       	cli
 900:	de bf       	out	0x3e, r29	; 62
 902:	0f be       	out	0x3f, r0	; 63
 904:	cd bf       	out	0x3d, r28	; 61
 906:	df 91       	pop	r29
 908:	cf 91       	pop	r28
 90a:	1f 91       	pop	r17
 90c:	0f 91       	pop	r16
 90e:	08 95       	ret

00000910 <vfprintf>:
 910:	2f 92       	push	r2
 912:	3f 92       	push	r3
 914:	4f 92       	push	r4
 916:	5f 92       	push	r5
 918:	6f 92       	push	r6
 91a:	7f 92       	push	r7
 91c:	8f 92       	push	r8
 91e:	9f 92       	push	r9
 920:	af 92       	push	r10
 922:	bf 92       	push	r11
 924:	cf 92       	push	r12
 926:	df 92       	push	r13
 928:	ef 92       	push	r14
 92a:	ff 92       	push	r15
 92c:	0f 93       	push	r16
 92e:	1f 93       	push	r17
 930:	cf 93       	push	r28
 932:	df 93       	push	r29
 934:	cd b7       	in	r28, 0x3d	; 61
 936:	de b7       	in	r29, 0x3e	; 62
 938:	2b 97       	sbiw	r28, 0x0b	; 11
 93a:	0f b6       	in	r0, 0x3f	; 63
 93c:	f8 94       	cli
 93e:	de bf       	out	0x3e, r29	; 62
 940:	0f be       	out	0x3f, r0	; 63
 942:	cd bf       	out	0x3d, r28	; 61
 944:	6c 01       	movw	r12, r24
 946:	7b 01       	movw	r14, r22
 948:	8a 01       	movw	r16, r20
 94a:	fc 01       	movw	r30, r24
 94c:	17 82       	std	Z+7, r1	; 0x07
 94e:	16 82       	std	Z+6, r1	; 0x06
 950:	83 81       	ldd	r24, Z+3	; 0x03
 952:	81 ff       	sbrs	r24, 1
 954:	bf c1       	rjmp	.+894    	; 0xcd4 <vfprintf+0x3c4>
 956:	ce 01       	movw	r24, r28
 958:	01 96       	adiw	r24, 0x01	; 1
 95a:	3c 01       	movw	r6, r24
 95c:	f6 01       	movw	r30, r12
 95e:	93 81       	ldd	r25, Z+3	; 0x03
 960:	f7 01       	movw	r30, r14
 962:	93 fd       	sbrc	r25, 3
 964:	85 91       	lpm	r24, Z+
 966:	93 ff       	sbrs	r25, 3
 968:	81 91       	ld	r24, Z+
 96a:	7f 01       	movw	r14, r30
 96c:	88 23       	and	r24, r24
 96e:	09 f4       	brne	.+2      	; 0x972 <vfprintf+0x62>
 970:	ad c1       	rjmp	.+858    	; 0xccc <vfprintf+0x3bc>
 972:	85 32       	cpi	r24, 0x25	; 37
 974:	39 f4       	brne	.+14     	; 0x984 <vfprintf+0x74>
 976:	93 fd       	sbrc	r25, 3
 978:	85 91       	lpm	r24, Z+
 97a:	93 ff       	sbrs	r25, 3
 97c:	81 91       	ld	r24, Z+
 97e:	7f 01       	movw	r14, r30
 980:	85 32       	cpi	r24, 0x25	; 37
 982:	21 f4       	brne	.+8      	; 0x98c <vfprintf+0x7c>
 984:	b6 01       	movw	r22, r12
 986:	90 e0       	ldi	r25, 0x00	; 0
 988:	d6 d1       	rcall	.+940    	; 0xd36 <fputc>
 98a:	e8 cf       	rjmp	.-48     	; 0x95c <vfprintf+0x4c>
 98c:	91 2c       	mov	r9, r1
 98e:	21 2c       	mov	r2, r1
 990:	31 2c       	mov	r3, r1
 992:	ff e1       	ldi	r31, 0x1F	; 31
 994:	f3 15       	cp	r31, r3
 996:	d8 f0       	brcs	.+54     	; 0x9ce <vfprintf+0xbe>
 998:	8b 32       	cpi	r24, 0x2B	; 43
 99a:	79 f0       	breq	.+30     	; 0x9ba <vfprintf+0xaa>
 99c:	38 f4       	brcc	.+14     	; 0x9ac <vfprintf+0x9c>
 99e:	80 32       	cpi	r24, 0x20	; 32
 9a0:	79 f0       	breq	.+30     	; 0x9c0 <vfprintf+0xb0>
 9a2:	83 32       	cpi	r24, 0x23	; 35
 9a4:	a1 f4       	brne	.+40     	; 0x9ce <vfprintf+0xbe>
 9a6:	23 2d       	mov	r18, r3
 9a8:	20 61       	ori	r18, 0x10	; 16
 9aa:	1d c0       	rjmp	.+58     	; 0x9e6 <vfprintf+0xd6>
 9ac:	8d 32       	cpi	r24, 0x2D	; 45
 9ae:	61 f0       	breq	.+24     	; 0x9c8 <vfprintf+0xb8>
 9b0:	80 33       	cpi	r24, 0x30	; 48
 9b2:	69 f4       	brne	.+26     	; 0x9ce <vfprintf+0xbe>
 9b4:	23 2d       	mov	r18, r3
 9b6:	21 60       	ori	r18, 0x01	; 1
 9b8:	16 c0       	rjmp	.+44     	; 0x9e6 <vfprintf+0xd6>
 9ba:	83 2d       	mov	r24, r3
 9bc:	82 60       	ori	r24, 0x02	; 2
 9be:	38 2e       	mov	r3, r24
 9c0:	e3 2d       	mov	r30, r3
 9c2:	e4 60       	ori	r30, 0x04	; 4
 9c4:	3e 2e       	mov	r3, r30
 9c6:	2a c0       	rjmp	.+84     	; 0xa1c <vfprintf+0x10c>
 9c8:	f3 2d       	mov	r31, r3
 9ca:	f8 60       	ori	r31, 0x08	; 8
 9cc:	1d c0       	rjmp	.+58     	; 0xa08 <vfprintf+0xf8>
 9ce:	37 fc       	sbrc	r3, 7
 9d0:	2d c0       	rjmp	.+90     	; 0xa2c <vfprintf+0x11c>
 9d2:	20 ed       	ldi	r18, 0xD0	; 208
 9d4:	28 0f       	add	r18, r24
 9d6:	2a 30       	cpi	r18, 0x0A	; 10
 9d8:	40 f0       	brcs	.+16     	; 0x9ea <vfprintf+0xda>
 9da:	8e 32       	cpi	r24, 0x2E	; 46
 9dc:	b9 f4       	brne	.+46     	; 0xa0c <vfprintf+0xfc>
 9de:	36 fc       	sbrc	r3, 6
 9e0:	75 c1       	rjmp	.+746    	; 0xccc <vfprintf+0x3bc>
 9e2:	23 2d       	mov	r18, r3
 9e4:	20 64       	ori	r18, 0x40	; 64
 9e6:	32 2e       	mov	r3, r18
 9e8:	19 c0       	rjmp	.+50     	; 0xa1c <vfprintf+0x10c>
 9ea:	36 fe       	sbrs	r3, 6
 9ec:	06 c0       	rjmp	.+12     	; 0x9fa <vfprintf+0xea>
 9ee:	8a e0       	ldi	r24, 0x0A	; 10
 9f0:	98 9e       	mul	r9, r24
 9f2:	20 0d       	add	r18, r0
 9f4:	11 24       	eor	r1, r1
 9f6:	92 2e       	mov	r9, r18
 9f8:	11 c0       	rjmp	.+34     	; 0xa1c <vfprintf+0x10c>
 9fa:	ea e0       	ldi	r30, 0x0A	; 10
 9fc:	2e 9e       	mul	r2, r30
 9fe:	20 0d       	add	r18, r0
 a00:	11 24       	eor	r1, r1
 a02:	22 2e       	mov	r2, r18
 a04:	f3 2d       	mov	r31, r3
 a06:	f0 62       	ori	r31, 0x20	; 32
 a08:	3f 2e       	mov	r3, r31
 a0a:	08 c0       	rjmp	.+16     	; 0xa1c <vfprintf+0x10c>
 a0c:	8c 36       	cpi	r24, 0x6C	; 108
 a0e:	21 f4       	brne	.+8      	; 0xa18 <vfprintf+0x108>
 a10:	83 2d       	mov	r24, r3
 a12:	80 68       	ori	r24, 0x80	; 128
 a14:	38 2e       	mov	r3, r24
 a16:	02 c0       	rjmp	.+4      	; 0xa1c <vfprintf+0x10c>
 a18:	88 36       	cpi	r24, 0x68	; 104
 a1a:	41 f4       	brne	.+16     	; 0xa2c <vfprintf+0x11c>
 a1c:	f7 01       	movw	r30, r14
 a1e:	93 fd       	sbrc	r25, 3
 a20:	85 91       	lpm	r24, Z+
 a22:	93 ff       	sbrs	r25, 3
 a24:	81 91       	ld	r24, Z+
 a26:	7f 01       	movw	r14, r30
 a28:	81 11       	cpse	r24, r1
 a2a:	b3 cf       	rjmp	.-154    	; 0x992 <vfprintf+0x82>
 a2c:	98 2f       	mov	r25, r24
 a2e:	9f 7d       	andi	r25, 0xDF	; 223
 a30:	95 54       	subi	r25, 0x45	; 69
 a32:	93 30       	cpi	r25, 0x03	; 3
 a34:	28 f4       	brcc	.+10     	; 0xa40 <vfprintf+0x130>
 a36:	0c 5f       	subi	r16, 0xFC	; 252
 a38:	1f 4f       	sbci	r17, 0xFF	; 255
 a3a:	9f e3       	ldi	r25, 0x3F	; 63
 a3c:	99 83       	std	Y+1, r25	; 0x01
 a3e:	0d c0       	rjmp	.+26     	; 0xa5a <vfprintf+0x14a>
 a40:	83 36       	cpi	r24, 0x63	; 99
 a42:	31 f0       	breq	.+12     	; 0xa50 <vfprintf+0x140>
 a44:	83 37       	cpi	r24, 0x73	; 115
 a46:	71 f0       	breq	.+28     	; 0xa64 <vfprintf+0x154>
 a48:	83 35       	cpi	r24, 0x53	; 83
 a4a:	09 f0       	breq	.+2      	; 0xa4e <vfprintf+0x13e>
 a4c:	55 c0       	rjmp	.+170    	; 0xaf8 <vfprintf+0x1e8>
 a4e:	20 c0       	rjmp	.+64     	; 0xa90 <vfprintf+0x180>
 a50:	f8 01       	movw	r30, r16
 a52:	80 81       	ld	r24, Z
 a54:	89 83       	std	Y+1, r24	; 0x01
 a56:	0e 5f       	subi	r16, 0xFE	; 254
 a58:	1f 4f       	sbci	r17, 0xFF	; 255
 a5a:	88 24       	eor	r8, r8
 a5c:	83 94       	inc	r8
 a5e:	91 2c       	mov	r9, r1
 a60:	53 01       	movw	r10, r6
 a62:	12 c0       	rjmp	.+36     	; 0xa88 <vfprintf+0x178>
 a64:	28 01       	movw	r4, r16
 a66:	f2 e0       	ldi	r31, 0x02	; 2
 a68:	4f 0e       	add	r4, r31
 a6a:	51 1c       	adc	r5, r1
 a6c:	f8 01       	movw	r30, r16
 a6e:	a0 80       	ld	r10, Z
 a70:	b1 80       	ldd	r11, Z+1	; 0x01
 a72:	36 fe       	sbrs	r3, 6
 a74:	03 c0       	rjmp	.+6      	; 0xa7c <vfprintf+0x16c>
 a76:	69 2d       	mov	r22, r9
 a78:	70 e0       	ldi	r23, 0x00	; 0
 a7a:	02 c0       	rjmp	.+4      	; 0xa80 <vfprintf+0x170>
 a7c:	6f ef       	ldi	r22, 0xFF	; 255
 a7e:	7f ef       	ldi	r23, 0xFF	; 255
 a80:	c5 01       	movw	r24, r10
 a82:	4e d1       	rcall	.+668    	; 0xd20 <strnlen>
 a84:	4c 01       	movw	r8, r24
 a86:	82 01       	movw	r16, r4
 a88:	f3 2d       	mov	r31, r3
 a8a:	ff 77       	andi	r31, 0x7F	; 127
 a8c:	3f 2e       	mov	r3, r31
 a8e:	15 c0       	rjmp	.+42     	; 0xaba <vfprintf+0x1aa>
 a90:	28 01       	movw	r4, r16
 a92:	22 e0       	ldi	r18, 0x02	; 2
 a94:	42 0e       	add	r4, r18
 a96:	51 1c       	adc	r5, r1
 a98:	f8 01       	movw	r30, r16
 a9a:	a0 80       	ld	r10, Z
 a9c:	b1 80       	ldd	r11, Z+1	; 0x01
 a9e:	36 fe       	sbrs	r3, 6
 aa0:	03 c0       	rjmp	.+6      	; 0xaa8 <vfprintf+0x198>
 aa2:	69 2d       	mov	r22, r9
 aa4:	70 e0       	ldi	r23, 0x00	; 0
 aa6:	02 c0       	rjmp	.+4      	; 0xaac <vfprintf+0x19c>
 aa8:	6f ef       	ldi	r22, 0xFF	; 255
 aaa:	7f ef       	ldi	r23, 0xFF	; 255
 aac:	c5 01       	movw	r24, r10
 aae:	2d d1       	rcall	.+602    	; 0xd0a <strnlen_P>
 ab0:	4c 01       	movw	r8, r24
 ab2:	f3 2d       	mov	r31, r3
 ab4:	f0 68       	ori	r31, 0x80	; 128
 ab6:	3f 2e       	mov	r3, r31
 ab8:	82 01       	movw	r16, r4
 aba:	33 fc       	sbrc	r3, 3
 abc:	19 c0       	rjmp	.+50     	; 0xaf0 <vfprintf+0x1e0>
 abe:	82 2d       	mov	r24, r2
 ac0:	90 e0       	ldi	r25, 0x00	; 0
 ac2:	88 16       	cp	r8, r24
 ac4:	99 06       	cpc	r9, r25
 ac6:	a0 f4       	brcc	.+40     	; 0xaf0 <vfprintf+0x1e0>
 ac8:	b6 01       	movw	r22, r12
 aca:	80 e2       	ldi	r24, 0x20	; 32
 acc:	90 e0       	ldi	r25, 0x00	; 0
 ace:	33 d1       	rcall	.+614    	; 0xd36 <fputc>
 ad0:	2a 94       	dec	r2
 ad2:	f5 cf       	rjmp	.-22     	; 0xabe <vfprintf+0x1ae>
 ad4:	f5 01       	movw	r30, r10
 ad6:	37 fc       	sbrc	r3, 7
 ad8:	85 91       	lpm	r24, Z+
 ada:	37 fe       	sbrs	r3, 7
 adc:	81 91       	ld	r24, Z+
 ade:	5f 01       	movw	r10, r30
 ae0:	b6 01       	movw	r22, r12
 ae2:	90 e0       	ldi	r25, 0x00	; 0
 ae4:	28 d1       	rcall	.+592    	; 0xd36 <fputc>
 ae6:	21 10       	cpse	r2, r1
 ae8:	2a 94       	dec	r2
 aea:	21 e0       	ldi	r18, 0x01	; 1
 aec:	82 1a       	sub	r8, r18
 aee:	91 08       	sbc	r9, r1
 af0:	81 14       	cp	r8, r1
 af2:	91 04       	cpc	r9, r1
 af4:	79 f7       	brne	.-34     	; 0xad4 <vfprintf+0x1c4>
 af6:	e1 c0       	rjmp	.+450    	; 0xcba <vfprintf+0x3aa>
 af8:	84 36       	cpi	r24, 0x64	; 100
 afa:	11 f0       	breq	.+4      	; 0xb00 <vfprintf+0x1f0>
 afc:	89 36       	cpi	r24, 0x69	; 105
 afe:	39 f5       	brne	.+78     	; 0xb4e <vfprintf+0x23e>
 b00:	f8 01       	movw	r30, r16
 b02:	37 fe       	sbrs	r3, 7
 b04:	07 c0       	rjmp	.+14     	; 0xb14 <vfprintf+0x204>
 b06:	60 81       	ld	r22, Z
 b08:	71 81       	ldd	r23, Z+1	; 0x01
 b0a:	82 81       	ldd	r24, Z+2	; 0x02
 b0c:	93 81       	ldd	r25, Z+3	; 0x03
 b0e:	0c 5f       	subi	r16, 0xFC	; 252
 b10:	1f 4f       	sbci	r17, 0xFF	; 255
 b12:	08 c0       	rjmp	.+16     	; 0xb24 <vfprintf+0x214>
 b14:	60 81       	ld	r22, Z
 b16:	71 81       	ldd	r23, Z+1	; 0x01
 b18:	07 2e       	mov	r0, r23
 b1a:	00 0c       	add	r0, r0
 b1c:	88 0b       	sbc	r24, r24
 b1e:	99 0b       	sbc	r25, r25
 b20:	0e 5f       	subi	r16, 0xFE	; 254
 b22:	1f 4f       	sbci	r17, 0xFF	; 255
 b24:	f3 2d       	mov	r31, r3
 b26:	ff 76       	andi	r31, 0x6F	; 111
 b28:	3f 2e       	mov	r3, r31
 b2a:	97 ff       	sbrs	r25, 7
 b2c:	09 c0       	rjmp	.+18     	; 0xb40 <vfprintf+0x230>
 b2e:	90 95       	com	r25
 b30:	80 95       	com	r24
 b32:	70 95       	com	r23
 b34:	61 95       	neg	r22
 b36:	7f 4f       	sbci	r23, 0xFF	; 255
 b38:	8f 4f       	sbci	r24, 0xFF	; 255
 b3a:	9f 4f       	sbci	r25, 0xFF	; 255
 b3c:	f0 68       	ori	r31, 0x80	; 128
 b3e:	3f 2e       	mov	r3, r31
 b40:	2a e0       	ldi	r18, 0x0A	; 10
 b42:	30 e0       	ldi	r19, 0x00	; 0
 b44:	a3 01       	movw	r20, r6
 b46:	33 d1       	rcall	.+614    	; 0xdae <__ultoa_invert>
 b48:	88 2e       	mov	r8, r24
 b4a:	86 18       	sub	r8, r6
 b4c:	44 c0       	rjmp	.+136    	; 0xbd6 <vfprintf+0x2c6>
 b4e:	85 37       	cpi	r24, 0x75	; 117
 b50:	31 f4       	brne	.+12     	; 0xb5e <vfprintf+0x24e>
 b52:	23 2d       	mov	r18, r3
 b54:	2f 7e       	andi	r18, 0xEF	; 239
 b56:	b2 2e       	mov	r11, r18
 b58:	2a e0       	ldi	r18, 0x0A	; 10
 b5a:	30 e0       	ldi	r19, 0x00	; 0
 b5c:	25 c0       	rjmp	.+74     	; 0xba8 <vfprintf+0x298>
 b5e:	93 2d       	mov	r25, r3
 b60:	99 7f       	andi	r25, 0xF9	; 249
 b62:	b9 2e       	mov	r11, r25
 b64:	8f 36       	cpi	r24, 0x6F	; 111
 b66:	c1 f0       	breq	.+48     	; 0xb98 <vfprintf+0x288>
 b68:	18 f4       	brcc	.+6      	; 0xb70 <vfprintf+0x260>
 b6a:	88 35       	cpi	r24, 0x58	; 88
 b6c:	79 f0       	breq	.+30     	; 0xb8c <vfprintf+0x27c>
 b6e:	ae c0       	rjmp	.+348    	; 0xccc <vfprintf+0x3bc>
 b70:	80 37       	cpi	r24, 0x70	; 112
 b72:	19 f0       	breq	.+6      	; 0xb7a <vfprintf+0x26a>
 b74:	88 37       	cpi	r24, 0x78	; 120
 b76:	21 f0       	breq	.+8      	; 0xb80 <vfprintf+0x270>
 b78:	a9 c0       	rjmp	.+338    	; 0xccc <vfprintf+0x3bc>
 b7a:	e9 2f       	mov	r30, r25
 b7c:	e0 61       	ori	r30, 0x10	; 16
 b7e:	be 2e       	mov	r11, r30
 b80:	b4 fe       	sbrs	r11, 4
 b82:	0d c0       	rjmp	.+26     	; 0xb9e <vfprintf+0x28e>
 b84:	fb 2d       	mov	r31, r11
 b86:	f4 60       	ori	r31, 0x04	; 4
 b88:	bf 2e       	mov	r11, r31
 b8a:	09 c0       	rjmp	.+18     	; 0xb9e <vfprintf+0x28e>
 b8c:	34 fe       	sbrs	r3, 4
 b8e:	0a c0       	rjmp	.+20     	; 0xba4 <vfprintf+0x294>
 b90:	29 2f       	mov	r18, r25
 b92:	26 60       	ori	r18, 0x06	; 6
 b94:	b2 2e       	mov	r11, r18
 b96:	06 c0       	rjmp	.+12     	; 0xba4 <vfprintf+0x294>
 b98:	28 e0       	ldi	r18, 0x08	; 8
 b9a:	30 e0       	ldi	r19, 0x00	; 0
 b9c:	05 c0       	rjmp	.+10     	; 0xba8 <vfprintf+0x298>
 b9e:	20 e1       	ldi	r18, 0x10	; 16
 ba0:	30 e0       	ldi	r19, 0x00	; 0
 ba2:	02 c0       	rjmp	.+4      	; 0xba8 <vfprintf+0x298>
 ba4:	20 e1       	ldi	r18, 0x10	; 16
 ba6:	32 e0       	ldi	r19, 0x02	; 2
 ba8:	f8 01       	movw	r30, r16
 baa:	b7 fe       	sbrs	r11, 7
 bac:	07 c0       	rjmp	.+14     	; 0xbbc <vfprintf+0x2ac>
 bae:	60 81       	ld	r22, Z
 bb0:	71 81       	ldd	r23, Z+1	; 0x01
 bb2:	82 81       	ldd	r24, Z+2	; 0x02
 bb4:	93 81       	ldd	r25, Z+3	; 0x03
 bb6:	0c 5f       	subi	r16, 0xFC	; 252
 bb8:	1f 4f       	sbci	r17, 0xFF	; 255
 bba:	06 c0       	rjmp	.+12     	; 0xbc8 <vfprintf+0x2b8>
 bbc:	60 81       	ld	r22, Z
 bbe:	71 81       	ldd	r23, Z+1	; 0x01
 bc0:	80 e0       	ldi	r24, 0x00	; 0
 bc2:	90 e0       	ldi	r25, 0x00	; 0
 bc4:	0e 5f       	subi	r16, 0xFE	; 254
 bc6:	1f 4f       	sbci	r17, 0xFF	; 255
 bc8:	a3 01       	movw	r20, r6
 bca:	f1 d0       	rcall	.+482    	; 0xdae <__ultoa_invert>
 bcc:	88 2e       	mov	r8, r24
 bce:	86 18       	sub	r8, r6
 bd0:	fb 2d       	mov	r31, r11
 bd2:	ff 77       	andi	r31, 0x7F	; 127
 bd4:	3f 2e       	mov	r3, r31
 bd6:	36 fe       	sbrs	r3, 6
 bd8:	0d c0       	rjmp	.+26     	; 0xbf4 <vfprintf+0x2e4>
 bda:	23 2d       	mov	r18, r3
 bdc:	2e 7f       	andi	r18, 0xFE	; 254
 bde:	a2 2e       	mov	r10, r18
 be0:	89 14       	cp	r8, r9
 be2:	58 f4       	brcc	.+22     	; 0xbfa <vfprintf+0x2ea>
 be4:	34 fe       	sbrs	r3, 4
 be6:	0b c0       	rjmp	.+22     	; 0xbfe <vfprintf+0x2ee>
 be8:	32 fc       	sbrc	r3, 2
 bea:	09 c0       	rjmp	.+18     	; 0xbfe <vfprintf+0x2ee>
 bec:	83 2d       	mov	r24, r3
 bee:	8e 7e       	andi	r24, 0xEE	; 238
 bf0:	a8 2e       	mov	r10, r24
 bf2:	05 c0       	rjmp	.+10     	; 0xbfe <vfprintf+0x2ee>
 bf4:	b8 2c       	mov	r11, r8
 bf6:	a3 2c       	mov	r10, r3
 bf8:	03 c0       	rjmp	.+6      	; 0xc00 <vfprintf+0x2f0>
 bfa:	b8 2c       	mov	r11, r8
 bfc:	01 c0       	rjmp	.+2      	; 0xc00 <vfprintf+0x2f0>
 bfe:	b9 2c       	mov	r11, r9
 c00:	a4 fe       	sbrs	r10, 4
 c02:	0f c0       	rjmp	.+30     	; 0xc22 <vfprintf+0x312>
 c04:	fe 01       	movw	r30, r28
 c06:	e8 0d       	add	r30, r8
 c08:	f1 1d       	adc	r31, r1
 c0a:	80 81       	ld	r24, Z
 c0c:	80 33       	cpi	r24, 0x30	; 48
 c0e:	21 f4       	brne	.+8      	; 0xc18 <vfprintf+0x308>
 c10:	9a 2d       	mov	r25, r10
 c12:	99 7e       	andi	r25, 0xE9	; 233
 c14:	a9 2e       	mov	r10, r25
 c16:	09 c0       	rjmp	.+18     	; 0xc2a <vfprintf+0x31a>
 c18:	a2 fe       	sbrs	r10, 2
 c1a:	06 c0       	rjmp	.+12     	; 0xc28 <vfprintf+0x318>
 c1c:	b3 94       	inc	r11
 c1e:	b3 94       	inc	r11
 c20:	04 c0       	rjmp	.+8      	; 0xc2a <vfprintf+0x31a>
 c22:	8a 2d       	mov	r24, r10
 c24:	86 78       	andi	r24, 0x86	; 134
 c26:	09 f0       	breq	.+2      	; 0xc2a <vfprintf+0x31a>
 c28:	b3 94       	inc	r11
 c2a:	a3 fc       	sbrc	r10, 3
 c2c:	10 c0       	rjmp	.+32     	; 0xc4e <vfprintf+0x33e>
 c2e:	a0 fe       	sbrs	r10, 0
 c30:	06 c0       	rjmp	.+12     	; 0xc3e <vfprintf+0x32e>
 c32:	b2 14       	cp	r11, r2
 c34:	80 f4       	brcc	.+32     	; 0xc56 <vfprintf+0x346>
 c36:	28 0c       	add	r2, r8
 c38:	92 2c       	mov	r9, r2
 c3a:	9b 18       	sub	r9, r11
 c3c:	0d c0       	rjmp	.+26     	; 0xc58 <vfprintf+0x348>
 c3e:	b2 14       	cp	r11, r2
 c40:	58 f4       	brcc	.+22     	; 0xc58 <vfprintf+0x348>
 c42:	b6 01       	movw	r22, r12
 c44:	80 e2       	ldi	r24, 0x20	; 32
 c46:	90 e0       	ldi	r25, 0x00	; 0
 c48:	76 d0       	rcall	.+236    	; 0xd36 <fputc>
 c4a:	b3 94       	inc	r11
 c4c:	f8 cf       	rjmp	.-16     	; 0xc3e <vfprintf+0x32e>
 c4e:	b2 14       	cp	r11, r2
 c50:	18 f4       	brcc	.+6      	; 0xc58 <vfprintf+0x348>
 c52:	2b 18       	sub	r2, r11
 c54:	02 c0       	rjmp	.+4      	; 0xc5a <vfprintf+0x34a>
 c56:	98 2c       	mov	r9, r8
 c58:	21 2c       	mov	r2, r1
 c5a:	a4 fe       	sbrs	r10, 4
 c5c:	0f c0       	rjmp	.+30     	; 0xc7c <vfprintf+0x36c>
 c5e:	b6 01       	movw	r22, r12
 c60:	80 e3       	ldi	r24, 0x30	; 48
 c62:	90 e0       	ldi	r25, 0x00	; 0
 c64:	68 d0       	rcall	.+208    	; 0xd36 <fputc>
 c66:	a2 fe       	sbrs	r10, 2
 c68:	16 c0       	rjmp	.+44     	; 0xc96 <vfprintf+0x386>
 c6a:	a1 fc       	sbrc	r10, 1
 c6c:	03 c0       	rjmp	.+6      	; 0xc74 <vfprintf+0x364>
 c6e:	88 e7       	ldi	r24, 0x78	; 120
 c70:	90 e0       	ldi	r25, 0x00	; 0
 c72:	02 c0       	rjmp	.+4      	; 0xc78 <vfprintf+0x368>
 c74:	88 e5       	ldi	r24, 0x58	; 88
 c76:	90 e0       	ldi	r25, 0x00	; 0
 c78:	b6 01       	movw	r22, r12
 c7a:	0c c0       	rjmp	.+24     	; 0xc94 <vfprintf+0x384>
 c7c:	8a 2d       	mov	r24, r10
 c7e:	86 78       	andi	r24, 0x86	; 134
 c80:	51 f0       	breq	.+20     	; 0xc96 <vfprintf+0x386>
 c82:	a1 fe       	sbrs	r10, 1
 c84:	02 c0       	rjmp	.+4      	; 0xc8a <vfprintf+0x37a>
 c86:	8b e2       	ldi	r24, 0x2B	; 43
 c88:	01 c0       	rjmp	.+2      	; 0xc8c <vfprintf+0x37c>
 c8a:	80 e2       	ldi	r24, 0x20	; 32
 c8c:	a7 fc       	sbrc	r10, 7
 c8e:	8d e2       	ldi	r24, 0x2D	; 45
 c90:	b6 01       	movw	r22, r12
 c92:	90 e0       	ldi	r25, 0x00	; 0
 c94:	50 d0       	rcall	.+160    	; 0xd36 <fputc>
 c96:	89 14       	cp	r8, r9
 c98:	30 f4       	brcc	.+12     	; 0xca6 <vfprintf+0x396>
 c9a:	b6 01       	movw	r22, r12
 c9c:	80 e3       	ldi	r24, 0x30	; 48
 c9e:	90 e0       	ldi	r25, 0x00	; 0
 ca0:	4a d0       	rcall	.+148    	; 0xd36 <fputc>
 ca2:	9a 94       	dec	r9
 ca4:	f8 cf       	rjmp	.-16     	; 0xc96 <vfprintf+0x386>
 ca6:	8a 94       	dec	r8
 ca8:	f3 01       	movw	r30, r6
 caa:	e8 0d       	add	r30, r8
 cac:	f1 1d       	adc	r31, r1
 cae:	80 81       	ld	r24, Z
 cb0:	b6 01       	movw	r22, r12
 cb2:	90 e0       	ldi	r25, 0x00	; 0
 cb4:	40 d0       	rcall	.+128    	; 0xd36 <fputc>
 cb6:	81 10       	cpse	r8, r1
 cb8:	f6 cf       	rjmp	.-20     	; 0xca6 <vfprintf+0x396>
 cba:	22 20       	and	r2, r2
 cbc:	09 f4       	brne	.+2      	; 0xcc0 <vfprintf+0x3b0>
 cbe:	4e ce       	rjmp	.-868    	; 0x95c <vfprintf+0x4c>
 cc0:	b6 01       	movw	r22, r12
 cc2:	80 e2       	ldi	r24, 0x20	; 32
 cc4:	90 e0       	ldi	r25, 0x00	; 0
 cc6:	37 d0       	rcall	.+110    	; 0xd36 <fputc>
 cc8:	2a 94       	dec	r2
 cca:	f7 cf       	rjmp	.-18     	; 0xcba <vfprintf+0x3aa>
 ccc:	f6 01       	movw	r30, r12
 cce:	86 81       	ldd	r24, Z+6	; 0x06
 cd0:	97 81       	ldd	r25, Z+7	; 0x07
 cd2:	02 c0       	rjmp	.+4      	; 0xcd8 <vfprintf+0x3c8>
 cd4:	8f ef       	ldi	r24, 0xFF	; 255
 cd6:	9f ef       	ldi	r25, 0xFF	; 255
 cd8:	2b 96       	adiw	r28, 0x0b	; 11
 cda:	0f b6       	in	r0, 0x3f	; 63
 cdc:	f8 94       	cli
 cde:	de bf       	out	0x3e, r29	; 62
 ce0:	0f be       	out	0x3f, r0	; 63
 ce2:	cd bf       	out	0x3d, r28	; 61
 ce4:	df 91       	pop	r29
 ce6:	cf 91       	pop	r28
 ce8:	1f 91       	pop	r17
 cea:	0f 91       	pop	r16
 cec:	ff 90       	pop	r15
 cee:	ef 90       	pop	r14
 cf0:	df 90       	pop	r13
 cf2:	cf 90       	pop	r12
 cf4:	bf 90       	pop	r11
 cf6:	af 90       	pop	r10
 cf8:	9f 90       	pop	r9
 cfa:	8f 90       	pop	r8
 cfc:	7f 90       	pop	r7
 cfe:	6f 90       	pop	r6
 d00:	5f 90       	pop	r5
 d02:	4f 90       	pop	r4
 d04:	3f 90       	pop	r3
 d06:	2f 90       	pop	r2
 d08:	08 95       	ret

00000d0a <strnlen_P>:
 d0a:	fc 01       	movw	r30, r24
 d0c:	05 90       	lpm	r0, Z+
 d0e:	61 50       	subi	r22, 0x01	; 1
 d10:	70 40       	sbci	r23, 0x00	; 0
 d12:	01 10       	cpse	r0, r1
 d14:	d8 f7       	brcc	.-10     	; 0xd0c <strnlen_P+0x2>
 d16:	80 95       	com	r24
 d18:	90 95       	com	r25
 d1a:	8e 0f       	add	r24, r30
 d1c:	9f 1f       	adc	r25, r31
 d1e:	08 95       	ret

00000d20 <strnlen>:
 d20:	fc 01       	movw	r30, r24
 d22:	61 50       	subi	r22, 0x01	; 1
 d24:	70 40       	sbci	r23, 0x00	; 0
 d26:	01 90       	ld	r0, Z+
 d28:	01 10       	cpse	r0, r1
 d2a:	d8 f7       	brcc	.-10     	; 0xd22 <strnlen+0x2>
 d2c:	80 95       	com	r24
 d2e:	90 95       	com	r25
 d30:	8e 0f       	add	r24, r30
 d32:	9f 1f       	adc	r25, r31
 d34:	08 95       	ret

00000d36 <fputc>:
 d36:	0f 93       	push	r16
 d38:	1f 93       	push	r17
 d3a:	cf 93       	push	r28
 d3c:	df 93       	push	r29
 d3e:	fb 01       	movw	r30, r22
 d40:	23 81       	ldd	r18, Z+3	; 0x03
 d42:	21 fd       	sbrc	r18, 1
 d44:	03 c0       	rjmp	.+6      	; 0xd4c <fputc+0x16>
 d46:	8f ef       	ldi	r24, 0xFF	; 255
 d48:	9f ef       	ldi	r25, 0xFF	; 255
 d4a:	2c c0       	rjmp	.+88     	; 0xda4 <fputc+0x6e>
 d4c:	22 ff       	sbrs	r18, 2
 d4e:	16 c0       	rjmp	.+44     	; 0xd7c <fputc+0x46>
 d50:	46 81       	ldd	r20, Z+6	; 0x06
 d52:	57 81       	ldd	r21, Z+7	; 0x07
 d54:	24 81       	ldd	r18, Z+4	; 0x04
 d56:	35 81       	ldd	r19, Z+5	; 0x05
 d58:	42 17       	cp	r20, r18
 d5a:	53 07       	cpc	r21, r19
 d5c:	44 f4       	brge	.+16     	; 0xd6e <fputc+0x38>
 d5e:	a0 81       	ld	r26, Z
 d60:	b1 81       	ldd	r27, Z+1	; 0x01
 d62:	9d 01       	movw	r18, r26
 d64:	2f 5f       	subi	r18, 0xFF	; 255
 d66:	3f 4f       	sbci	r19, 0xFF	; 255
 d68:	31 83       	std	Z+1, r19	; 0x01
 d6a:	20 83       	st	Z, r18
 d6c:	8c 93       	st	X, r24
 d6e:	26 81       	ldd	r18, Z+6	; 0x06
 d70:	37 81       	ldd	r19, Z+7	; 0x07
 d72:	2f 5f       	subi	r18, 0xFF	; 255
 d74:	3f 4f       	sbci	r19, 0xFF	; 255
 d76:	37 83       	std	Z+7, r19	; 0x07
 d78:	26 83       	std	Z+6, r18	; 0x06
 d7a:	14 c0       	rjmp	.+40     	; 0xda4 <fputc+0x6e>
 d7c:	8b 01       	movw	r16, r22
 d7e:	ec 01       	movw	r28, r24
 d80:	fb 01       	movw	r30, r22
 d82:	00 84       	ldd	r0, Z+8	; 0x08
 d84:	f1 85       	ldd	r31, Z+9	; 0x09
 d86:	e0 2d       	mov	r30, r0
 d88:	09 95       	icall
 d8a:	89 2b       	or	r24, r25
 d8c:	e1 f6       	brne	.-72     	; 0xd46 <fputc+0x10>
 d8e:	d8 01       	movw	r26, r16
 d90:	16 96       	adiw	r26, 0x06	; 6
 d92:	8d 91       	ld	r24, X+
 d94:	9c 91       	ld	r25, X
 d96:	17 97       	sbiw	r26, 0x07	; 7
 d98:	01 96       	adiw	r24, 0x01	; 1
 d9a:	17 96       	adiw	r26, 0x07	; 7
 d9c:	9c 93       	st	X, r25
 d9e:	8e 93       	st	-X, r24
 da0:	16 97       	sbiw	r26, 0x06	; 6
 da2:	ce 01       	movw	r24, r28
 da4:	df 91       	pop	r29
 da6:	cf 91       	pop	r28
 da8:	1f 91       	pop	r17
 daa:	0f 91       	pop	r16
 dac:	08 95       	ret

00000dae <__ultoa_invert>:
 dae:	fa 01       	movw	r30, r20
 db0:	aa 27       	eor	r26, r26
 db2:	28 30       	cpi	r18, 0x08	; 8
 db4:	51 f1       	breq	.+84     	; 0xe0a <__ultoa_invert+0x5c>
 db6:	20 31       	cpi	r18, 0x10	; 16
 db8:	81 f1       	breq	.+96     	; 0xe1a <__ultoa_invert+0x6c>
 dba:	e8 94       	clt
 dbc:	6f 93       	push	r22
 dbe:	6e 7f       	andi	r22, 0xFE	; 254
 dc0:	6e 5f       	subi	r22, 0xFE	; 254
 dc2:	7f 4f       	sbci	r23, 0xFF	; 255
 dc4:	8f 4f       	sbci	r24, 0xFF	; 255
 dc6:	9f 4f       	sbci	r25, 0xFF	; 255
 dc8:	af 4f       	sbci	r26, 0xFF	; 255
 dca:	b1 e0       	ldi	r27, 0x01	; 1
 dcc:	3e d0       	rcall	.+124    	; 0xe4a <__ultoa_invert+0x9c>
 dce:	b4 e0       	ldi	r27, 0x04	; 4
 dd0:	3c d0       	rcall	.+120    	; 0xe4a <__ultoa_invert+0x9c>
 dd2:	67 0f       	add	r22, r23
 dd4:	78 1f       	adc	r23, r24
 dd6:	89 1f       	adc	r24, r25
 dd8:	9a 1f       	adc	r25, r26
 dda:	a1 1d       	adc	r26, r1
 ddc:	68 0f       	add	r22, r24
 dde:	79 1f       	adc	r23, r25
 de0:	8a 1f       	adc	r24, r26
 de2:	91 1d       	adc	r25, r1
 de4:	a1 1d       	adc	r26, r1
 de6:	6a 0f       	add	r22, r26
 de8:	71 1d       	adc	r23, r1
 dea:	81 1d       	adc	r24, r1
 dec:	91 1d       	adc	r25, r1
 dee:	a1 1d       	adc	r26, r1
 df0:	20 d0       	rcall	.+64     	; 0xe32 <__ultoa_invert+0x84>
 df2:	09 f4       	brne	.+2      	; 0xdf6 <__ultoa_invert+0x48>
 df4:	68 94       	set
 df6:	3f 91       	pop	r19
 df8:	2a e0       	ldi	r18, 0x0A	; 10
 dfa:	26 9f       	mul	r18, r22
 dfc:	11 24       	eor	r1, r1
 dfe:	30 19       	sub	r19, r0
 e00:	30 5d       	subi	r19, 0xD0	; 208
 e02:	31 93       	st	Z+, r19
 e04:	de f6       	brtc	.-74     	; 0xdbc <__ultoa_invert+0xe>
 e06:	cf 01       	movw	r24, r30
 e08:	08 95       	ret
 e0a:	46 2f       	mov	r20, r22
 e0c:	47 70       	andi	r20, 0x07	; 7
 e0e:	40 5d       	subi	r20, 0xD0	; 208
 e10:	41 93       	st	Z+, r20
 e12:	b3 e0       	ldi	r27, 0x03	; 3
 e14:	0f d0       	rcall	.+30     	; 0xe34 <__ultoa_invert+0x86>
 e16:	c9 f7       	brne	.-14     	; 0xe0a <__ultoa_invert+0x5c>
 e18:	f6 cf       	rjmp	.-20     	; 0xe06 <__ultoa_invert+0x58>
 e1a:	46 2f       	mov	r20, r22
 e1c:	4f 70       	andi	r20, 0x0F	; 15
 e1e:	40 5d       	subi	r20, 0xD0	; 208
 e20:	4a 33       	cpi	r20, 0x3A	; 58
 e22:	18 f0       	brcs	.+6      	; 0xe2a <__ultoa_invert+0x7c>
 e24:	49 5d       	subi	r20, 0xD9	; 217
 e26:	31 fd       	sbrc	r19, 1
 e28:	40 52       	subi	r20, 0x20	; 32
 e2a:	41 93       	st	Z+, r20
 e2c:	02 d0       	rcall	.+4      	; 0xe32 <__ultoa_invert+0x84>
 e2e:	a9 f7       	brne	.-22     	; 0xe1a <__ultoa_invert+0x6c>
 e30:	ea cf       	rjmp	.-44     	; 0xe06 <__ultoa_invert+0x58>
 e32:	b4 e0       	ldi	r27, 0x04	; 4
 e34:	a6 95       	lsr	r26
 e36:	97 95       	ror	r25
 e38:	87 95       	ror	r24
 e3a:	77 95       	ror	r23
 e3c:	67 95       	ror	r22
 e3e:	ba 95       	dec	r27
 e40:	c9 f7       	brne	.-14     	; 0xe34 <__ultoa_invert+0x86>
 e42:	00 97       	sbiw	r24, 0x00	; 0
 e44:	61 05       	cpc	r22, r1
 e46:	71 05       	cpc	r23, r1
 e48:	08 95       	ret
 e4a:	9b 01       	movw	r18, r22
 e4c:	ac 01       	movw	r20, r24
 e4e:	0a 2e       	mov	r0, r26
 e50:	06 94       	lsr	r0
 e52:	57 95       	ror	r21
 e54:	47 95       	ror	r20
 e56:	37 95       	ror	r19
 e58:	27 95       	ror	r18
 e5a:	ba 95       	dec	r27
 e5c:	c9 f7       	brne	.-14     	; 0xe50 <__ultoa_invert+0xa2>
 e5e:	62 0f       	add	r22, r18
 e60:	73 1f       	adc	r23, r19
 e62:	84 1f       	adc	r24, r20
 e64:	95 1f       	adc	r25, r21
 e66:	a0 1d       	adc	r26, r0
 e68:	08 95       	ret

00000e6a <_exit>:
 e6a:	f8 94       	cli

00000e6c <__stop_program>:
 e6c:	ff cf       	rjmp	.-2      	; 0xe6c <__stop_program>
