
Server.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000008a  00800100  000003fc  00000490  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003fc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000190  0080018a  0080018a  0000051a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000051a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000054c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  0000058c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ae8  00000000  00000000  000005cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000092a  00000000  00000000  000010b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000497  00000000  00000000  000019de  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000094  00000000  00000000  00001e78  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004a7  00000000  00000000  00001f0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001e2  00000000  00000000  000023b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00002595  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec ef       	ldi	r30, 0xFC	; 252
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 38       	cpi	r26, 0x8A	; 138
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	23 e0       	ldi	r18, 0x03	; 3
  b4:	aa e8       	ldi	r26, 0x8A	; 138
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	aa 31       	cpi	r26, 0x1A	; 26
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	33 d1       	rcall	.+614    	; 0x32a <main>
  c4:	99 c1       	rjmp	.+818    	; 0x3f8 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <UART0_transmit>:
{
	
	while(1)
	{
		// empty : 1 & 1 -> 1
		if((UCSR0A & (1 << UDRE0))) break;
  c8:	5d 9b       	sbis	0x0b, 5	; 11
  ca:	fe cf       	rjmp	.-4      	; 0xc8 <UART0_transmit>
	}
	UDR0 = token;
  cc:	8c b9       	out	0x0c, r24	; 12
  ce:	08 95       	ret

000000d0 <UART0_receive>:

uint8_t UART0_receive(void)
{
	while(1)
	{
		if((UCSR0A & (1 << RXC1))) break;
  d0:	5f 9b       	sbis	0x0b, 7	; 11
  d2:	fe cf       	rjmp	.-4      	; 0xd0 <UART0_receive>
	}
	return UDR0;
  d4:	8c b1       	in	r24, 0x0c	; 12
}
  d6:	08 95       	ret

000000d8 <checkCard>:
	return "ID: " + (String)productArr[index] + " Stock : " + (String)stockArr[index]+"\n";
}

#endif
char checkCard(char* cn)
{
  d8:	0f 93       	push	r16
  da:	1f 93       	push	r17
  dc:	cf 93       	push	r28
  de:	df 93       	push	r29
  e0:	8c 01       	movw	r16, r24
	for(int i = 0; i < NUM_OF_CUSTOMER; i++)
  e2:	c0 e0       	ldi	r28, 0x00	; 0
  e4:	d0 e0       	ldi	r29, 0x00	; 0
  e6:	0d c0       	rjmp	.+26     	; 0x102 <checkCard+0x2a>
	{
		if(!strcmp(csArray[i].cID, cn))
  e8:	26 e3       	ldi	r18, 0x36	; 54
  ea:	2c 9f       	mul	r18, r28
  ec:	c0 01       	movw	r24, r0
  ee:	2d 9f       	mul	r18, r29
  f0:	90 0d       	add	r25, r0
  f2:	11 24       	eor	r1, r1
  f4:	b8 01       	movw	r22, r16
  f6:	84 5f       	subi	r24, 0xF4	; 244
  f8:	9d 4f       	sbci	r25, 0xFD	; 253
  fa:	75 d1       	rcall	.+746    	; 0x3e6 <strcmp>
  fc:	89 2b       	or	r24, r25
  fe:	31 f0       	breq	.+12     	; 0x10c <checkCard+0x34>
}

#endif
char checkCard(char* cn)
{
	for(int i = 0; i < NUM_OF_CUSTOMER; i++)
 100:	21 96       	adiw	r28, 0x01	; 1
 102:	c5 30       	cpi	r28, 0x05	; 5
 104:	d1 05       	cpc	r29, r1
 106:	84 f3       	brlt	.-32     	; 0xe8 <checkCard+0x10>
	{
		if(!strcmp(csArray[i].cID, cn))
		return 'O';
	}
	return 'x';
 108:	88 e7       	ldi	r24, 0x78	; 120
 10a:	01 c0       	rjmp	.+2      	; 0x10e <checkCard+0x36>
char checkCard(char* cn)
{
	for(int i = 0; i < NUM_OF_CUSTOMER; i++)
	{
		if(!strcmp(csArray[i].cID, cn))
		return 'O';
 10c:	8f e4       	ldi	r24, 0x4F	; 79
	}
	return 'x';
}
 10e:	df 91       	pop	r29
 110:	cf 91       	pop	r28
 112:	1f 91       	pop	r17
 114:	0f 91       	pop	r16
 116:	08 95       	ret

00000118 <dataInit>:

void dataInit()
{
 118:	cf 93       	push	r28
 11a:	df 93       	push	r29
	/* 고객정보 데이터 저장 */
	strcpy(csArray[0].cID, "a179 15 232 17E");
 11c:	cc e0       	ldi	r28, 0x0C	; 12
 11e:	d2 e0       	ldi	r29, 0x02	; 2
 120:	80 e1       	ldi	r24, 0x10	; 16
 122:	e0 e0       	ldi	r30, 0x00	; 0
 124:	f1 e0       	ldi	r31, 0x01	; 1
 126:	de 01       	movw	r26, r28
 128:	01 90       	ld	r0, Z+
 12a:	0d 92       	st	X+, r0
 12c:	8a 95       	dec	r24
 12e:	e1 f7       	brne	.-8      	; 0x128 <dataInit+0x10>
	strcpy(csArray[0].cName, "Tom");
 130:	ea e2       	ldi	r30, 0x2A	; 42
 132:	f2 e0       	ldi	r31, 0x02	; 2
 134:	84 e5       	ldi	r24, 0x54	; 84
 136:	9f e6       	ldi	r25, 0x6F	; 111
 138:	91 83       	std	Z+1, r25	; 0x01
 13a:	80 83       	st	Z, r24
 13c:	8d e6       	ldi	r24, 0x6D	; 109
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	93 83       	std	Z+3, r25	; 0x03
 142:	82 83       	std	Z+2, r24	; 0x02
	//csArray[0].cID = "a179 15 232 17 \r\n";
	//csArray[0].cName = "Tom";
	csArray[0].cAge = 21;
 144:	25 e1       	ldi	r18, 0x15	; 21
 146:	30 e0       	ldi	r19, 0x00	; 0
 148:	3b ab       	std	Y+51, r19	; 0x33
 14a:	2a ab       	std	Y+50, r18	; 0x32
	csArray[0].cBal = 10000;
 14c:	80 e1       	ldi	r24, 0x10	; 16
 14e:	97 e2       	ldi	r25, 0x27	; 39
 150:	9d ab       	std	Y+53, r25	; 0x35
 152:	8c ab       	std	Y+52, r24	; 0x34

	strcpy(csArray[1].cID, "a211 153 231 17 \r\n");
 154:	83 e1       	ldi	r24, 0x13	; 19
 156:	e0 e1       	ldi	r30, 0x10	; 16
 158:	f1 e0       	ldi	r31, 0x01	; 1
 15a:	a2 e4       	ldi	r26, 0x42	; 66
 15c:	b2 e0       	ldi	r27, 0x02	; 2
 15e:	01 90       	ld	r0, Z+
 160:	0d 92       	st	X+, r0
 162:	8a 95       	dec	r24
 164:	e1 f7       	brne	.-8      	; 0x15e <dataInit+0x46>
	strcpy(csArray[1].cName, "Jack");
 166:	85 e0       	ldi	r24, 0x05	; 5
 168:	e3 e2       	ldi	r30, 0x23	; 35
 16a:	f1 e0       	ldi	r31, 0x01	; 1
 16c:	a0 e6       	ldi	r26, 0x60	; 96
 16e:	b2 e0       	ldi	r27, 0x02	; 2
 170:	01 90       	ld	r0, Z+
 172:	0d 92       	st	X+, r0
 174:	8a 95       	dec	r24
 176:	e1 f7       	brne	.-8      	; 0x170 <dataInit+0x58>
	//csArray[1].cID = "a211 153 231 17 \r\n";
	//csArray[1].cName = "Jack";
	csArray[1].cAge = 17;
 178:	81 e1       	ldi	r24, 0x11	; 17
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	90 93 75 02 	sts	0x0275, r25	; 0x800275 <csArray+0x69>
 180:	80 93 74 02 	sts	0x0274, r24	; 0x800274 <csArray+0x68>
	csArray[1].cBal = 30000;
 184:	80 e3       	ldi	r24, 0x30	; 48
 186:	95 e7       	ldi	r25, 0x75	; 117
 188:	90 93 77 02 	sts	0x0277, r25	; 0x800277 <csArray+0x6b>
 18c:	80 93 76 02 	sts	0x0276, r24	; 0x800276 <csArray+0x6a>

	strcpy(csArray[2].cID, "a213 153 231 17 \r\n");
 190:	83 e1       	ldi	r24, 0x13	; 19
 192:	e8 e2       	ldi	r30, 0x28	; 40
 194:	f1 e0       	ldi	r31, 0x01	; 1
 196:	a8 e7       	ldi	r26, 0x78	; 120
 198:	b2 e0       	ldi	r27, 0x02	; 2
 19a:	01 90       	ld	r0, Z+
 19c:	0d 92       	st	X+, r0
 19e:	8a 95       	dec	r24
 1a0:	e1 f7       	brne	.-8      	; 0x19a <dataInit+0x82>
	strcpy(csArray[2].cName, "John");
 1a2:	85 e0       	ldi	r24, 0x05	; 5
 1a4:	eb e3       	ldi	r30, 0x3B	; 59
 1a6:	f1 e0       	ldi	r31, 0x01	; 1
 1a8:	a6 e9       	ldi	r26, 0x96	; 150
 1aa:	b2 e0       	ldi	r27, 0x02	; 2
 1ac:	01 90       	ld	r0, Z+
 1ae:	0d 92       	st	X+, r0
 1b0:	8a 95       	dec	r24
 1b2:	e1 f7       	brne	.-8      	; 0x1ac <dataInit+0x94>
	//csArray[2].cID = "a213 153 231 17 \r\n";
	//csArray[2].cName = "John";
	csArray[2].cAge = 32;
 1b4:	80 e2       	ldi	r24, 0x20	; 32
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	90 93 ab 02 	sts	0x02AB, r25	; 0x8002ab <csArray+0x9f>
 1bc:	80 93 aa 02 	sts	0x02AA, r24	; 0x8002aa <csArray+0x9e>
	csArray[2].cBal = 40000;
 1c0:	80 e4       	ldi	r24, 0x40	; 64
 1c2:	9c e9       	ldi	r25, 0x9C	; 156
 1c4:	90 93 ad 02 	sts	0x02AD, r25	; 0x8002ad <csArray+0xa1>
 1c8:	80 93 ac 02 	sts	0x02AC, r24	; 0x8002ac <csArray+0xa0>

	strcpy(csArray[3].cID, "a211 153 561 17 \r\n");
 1cc:	83 e1       	ldi	r24, 0x13	; 19
 1ce:	e0 e4       	ldi	r30, 0x40	; 64
 1d0:	f1 e0       	ldi	r31, 0x01	; 1
 1d2:	ae ea       	ldi	r26, 0xAE	; 174
 1d4:	b2 e0       	ldi	r27, 0x02	; 2
 1d6:	01 90       	ld	r0, Z+
 1d8:	0d 92       	st	X+, r0
 1da:	8a 95       	dec	r24
 1dc:	e1 f7       	brne	.-8      	; 0x1d6 <dataInit+0xbe>
	strcpy(csArray[3].cName, "Jane");
 1de:	85 e0       	ldi	r24, 0x05	; 5
 1e0:	e3 e5       	ldi	r30, 0x53	; 83
 1e2:	f1 e0       	ldi	r31, 0x01	; 1
 1e4:	ac ec       	ldi	r26, 0xCC	; 204
 1e6:	b2 e0       	ldi	r27, 0x02	; 2
 1e8:	01 90       	ld	r0, Z+
 1ea:	0d 92       	st	X+, r0
 1ec:	8a 95       	dec	r24
 1ee:	e1 f7       	brne	.-8      	; 0x1e8 <dataInit+0xd0>
	//csArray[3].cID = "a211 153 561 17 \r\n";
	//csArray[3].cName = "Jane";
	csArray[3].cAge = 28;
 1f0:	8c e1       	ldi	r24, 0x1C	; 28
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	90 93 e1 02 	sts	0x02E1, r25	; 0x8002e1 <csArray+0xd5>
 1f8:	80 93 e0 02 	sts	0x02E0, r24	; 0x8002e0 <csArray+0xd4>
	csArray[3].cBal = 20000;
 1fc:	80 e2       	ldi	r24, 0x20	; 32
 1fe:	9e e4       	ldi	r25, 0x4E	; 78
 200:	90 93 e3 02 	sts	0x02E3, r25	; 0x8002e3 <csArray+0xd7>
 204:	80 93 e2 02 	sts	0x02E2, r24	; 0x8002e2 <csArray+0xd6>

	strcpy(csArray[4].cID, "a204 153 231 17 \r\n");
 208:	83 e1       	ldi	r24, 0x13	; 19
 20a:	e8 e5       	ldi	r30, 0x58	; 88
 20c:	f1 e0       	ldi	r31, 0x01	; 1
 20e:	a4 ee       	ldi	r26, 0xE4	; 228
 210:	b2 e0       	ldi	r27, 0x02	; 2
 212:	01 90       	ld	r0, Z+
 214:	0d 92       	st	X+, r0
 216:	8a 95       	dec	r24
 218:	e1 f7       	brne	.-8      	; 0x212 <dataInit+0xfa>
	strcpy(csArray[4].cName, "Mary");
 21a:	85 e0       	ldi	r24, 0x05	; 5
 21c:	eb e6       	ldi	r30, 0x6B	; 107
 21e:	f1 e0       	ldi	r31, 0x01	; 1
 220:	a2 e0       	ldi	r26, 0x02	; 2
 222:	b3 e0       	ldi	r27, 0x03	; 3
 224:	01 90       	ld	r0, Z+
 226:	0d 92       	st	X+, r0
 228:	8a 95       	dec	r24
 22a:	e1 f7       	brne	.-8      	; 0x224 <dataInit+0x10c>
	//csArray[4].cID = "a204 153 231 17 \r\n";
	//csArray[4].cName = "Mary";
	csArray[4].cAge = 56;
 22c:	88 e3       	ldi	r24, 0x38	; 56
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	90 93 17 03 	sts	0x0317, r25	; 0x800317 <csArray+0x10b>
 234:	80 93 16 03 	sts	0x0316, r24	; 0x800316 <csArray+0x10a>
	csArray[4].cBal = 64000;
 238:	80 e0       	ldi	r24, 0x00	; 0
 23a:	9a ef       	ldi	r25, 0xFA	; 250
 23c:	90 93 19 03 	sts	0x0319, r25	; 0x800319 <csArray+0x10d>
 240:	80 93 18 03 	sts	0x0318, r24	; 0x800318 <csArray+0x10c>

	/* 상품정보 데이터 저장 */
	strcpy(pArray[0].pName, "N/A");
 244:	ca e8       	ldi	r28, 0x8A	; 138
 246:	d1 e0       	ldi	r29, 0x01	; 1
 248:	8e e4       	ldi	r24, 0x4E	; 78
 24a:	9f e2       	ldi	r25, 0x2F	; 47
 24c:	99 83       	std	Y+1, r25	; 0x01
 24e:	88 83       	st	Y, r24
 250:	81 e4       	ldi	r24, 0x41	; 65
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	9b 83       	std	Y+3, r25	; 0x03
 256:	8a 83       	std	Y+2, r24	; 0x02
	pArray[0].price = 0;
 258:	1d 8a       	std	Y+21, r1	; 0x15
 25a:	1c 8a       	std	Y+20, r1	; 0x14
	pArray[0].age = 0;
 25c:	1f 8a       	std	Y+23, r1	; 0x17
 25e:	1e 8a       	std	Y+22, r1	; 0x16
	pArray[0].stock = 10;
 260:	8a e0       	ldi	r24, 0x0A	; 10
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	99 8f       	std	Y+25, r25	; 0x19
 266:	88 8f       	std	Y+24, r24	; 0x18
	
	strcpy(pArray[1].pName, "drink");
 268:	86 e0       	ldi	r24, 0x06	; 6
 26a:	e0 e7       	ldi	r30, 0x70	; 112
 26c:	f1 e0       	ldi	r31, 0x01	; 1
 26e:	a4 ea       	ldi	r26, 0xA4	; 164
 270:	b1 e0       	ldi	r27, 0x01	; 1
 272:	01 90       	ld	r0, Z+
 274:	0d 92       	st	X+, r0
 276:	8a 95       	dec	r24
 278:	e1 f7       	brne	.-8      	; 0x272 <dataInit+0x15a>
	pArray[1].price = 1500;
 27a:	8c ed       	ldi	r24, 0xDC	; 220
 27c:	95 e0       	ldi	r25, 0x05	; 5
 27e:	9f a7       	std	Y+47, r25	; 0x2f
 280:	8e a7       	std	Y+46, r24	; 0x2e
	pArray[1].age = 0;
 282:	19 aa       	std	Y+49, r1	; 0x31
 284:	18 aa       	std	Y+48, r1	; 0x30
	pArray[1].stock = 4;
 286:	84 e0       	ldi	r24, 0x04	; 4
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	9b ab       	std	Y+51, r25	; 0x33
 28c:	8a ab       	std	Y+50, r24	; 0x32
	
	strcpy(pArray[2].pName, "cigar");
 28e:	46 e0       	ldi	r20, 0x06	; 6
 290:	e6 e7       	ldi	r30, 0x76	; 118
 292:	f1 e0       	ldi	r31, 0x01	; 1
 294:	ae eb       	ldi	r26, 0xBE	; 190
 296:	b1 e0       	ldi	r27, 0x01	; 1
 298:	01 90       	ld	r0, Z+
 29a:	0d 92       	st	X+, r0
 29c:	4a 95       	dec	r20
 29e:	e1 f7       	brne	.-8      	; 0x298 <dataInit+0x180>
	pArray[2].price = 4000;
 2a0:	40 ea       	ldi	r20, 0xA0	; 160
 2a2:	5f e0       	ldi	r21, 0x0F	; 15
 2a4:	50 93 d3 01 	sts	0x01D3, r21	; 0x8001d3 <__data_end+0x49>
 2a8:	40 93 d2 01 	sts	0x01D2, r20	; 0x8001d2 <__data_end+0x48>
	pArray[2].age = 19;
 2ac:	43 e1       	ldi	r20, 0x13	; 19
 2ae:	50 e0       	ldi	r21, 0x00	; 0
 2b0:	50 93 d5 01 	sts	0x01D5, r21	; 0x8001d5 <__data_end+0x4b>
 2b4:	40 93 d4 01 	sts	0x01D4, r20	; 0x8001d4 <__data_end+0x4a>
	pArray[2].stock = 21;
 2b8:	30 93 d7 01 	sts	0x01D7, r19	; 0x8001d7 <__data_end+0x4d>
 2bc:	20 93 d6 01 	sts	0x01D6, r18	; 0x8001d6 <__data_end+0x4c>
	
	strcpy(pArray[3].pName, "snack");
 2c0:	26 e0       	ldi	r18, 0x06	; 6
 2c2:	ec e7       	ldi	r30, 0x7C	; 124
 2c4:	f1 e0       	ldi	r31, 0x01	; 1
 2c6:	a8 ed       	ldi	r26, 0xD8	; 216
 2c8:	b1 e0       	ldi	r27, 0x01	; 1
 2ca:	01 90       	ld	r0, Z+
 2cc:	0d 92       	st	X+, r0
 2ce:	2a 95       	dec	r18
 2d0:	e1 f7       	brne	.-8      	; 0x2ca <dataInit+0x1b2>
	pArray[3].price = 1700;
 2d2:	24 ea       	ldi	r18, 0xA4	; 164
 2d4:	36 e0       	ldi	r19, 0x06	; 6
 2d6:	30 93 ed 01 	sts	0x01ED, r19	; 0x8001ed <__data_end+0x63>
 2da:	20 93 ec 01 	sts	0x01EC, r18	; 0x8001ec <__data_end+0x62>
	pArray[3].age = 0;
 2de:	10 92 ef 01 	sts	0x01EF, r1	; 0x8001ef <__data_end+0x65>
 2e2:	10 92 ee 01 	sts	0x01EE, r1	; 0x8001ee <__data_end+0x64>
	pArray[3].stock = 4;
 2e6:	90 93 f1 01 	sts	0x01F1, r25	; 0x8001f1 <__data_end+0x67>
 2ea:	80 93 f0 01 	sts	0x01F0, r24	; 0x8001f0 <__data_end+0x66>
	
	strcpy(pArray[4].pName, "coffee");
 2ee:	87 e0       	ldi	r24, 0x07	; 7
 2f0:	e2 e8       	ldi	r30, 0x82	; 130
 2f2:	f1 e0       	ldi	r31, 0x01	; 1
 2f4:	a2 ef       	ldi	r26, 0xF2	; 242
 2f6:	b1 e0       	ldi	r27, 0x01	; 1
 2f8:	01 90       	ld	r0, Z+
 2fa:	0d 92       	st	X+, r0
 2fc:	8a 95       	dec	r24
 2fe:	e1 f7       	brne	.-8      	; 0x2f8 <dataInit+0x1e0>
	pArray[4].price = 2500;
 300:	84 ec       	ldi	r24, 0xC4	; 196
 302:	99 e0       	ldi	r25, 0x09	; 9
 304:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <__data_end+0x7d>
 308:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <__data_end+0x7c>
	pArray[4].age = 15;
 30c:	8f e0       	ldi	r24, 0x0F	; 15
 30e:	90 e0       	ldi	r25, 0x00	; 0
 310:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <__data_end+0x7f>
 314:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <__data_end+0x7e>
	pArray[4].stock = 9;
 318:	89 e0       	ldi	r24, 0x09	; 9
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <__data_end+0x81>
 320:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <__data_end+0x80>
		
	
 324:	df 91       	pop	r29
 326:	cf 91       	pop	r28
 328:	08 95       	ret

0000032a <main>:
*/
void dataInit(); // 고객정보 초기화


int main(void)
{
 32a:	cf 93       	push	r28
 32c:	df 93       	push	r29
 32e:	cd b7       	in	r28, 0x3d	; 61
 330:	de b7       	in	r29, 0x3e	; 62
 332:	6e 97       	sbiw	r28, 0x1e	; 30
 334:	0f b6       	in	r0, 0x3f	; 63
 336:	f8 94       	cli
 338:	de bf       	out	0x3e, r29	; 62
 33a:	0f be       	out	0x3f, r0	; 63
 33c:	cd bf       	out	0x3d, r28	; 61
	DDRE = 0x02; // Set TX output
 33e:	82 e0       	ldi	r24, 0x02	; 2
 340:	82 b9       	out	0x02, r24	; 2
	UCSR0B |= (1 << RXEN0 | 1 << TXEN0); // RXEN0 : receiver enable, TXEN0 : Transmitter enable
 342:	8a b1       	in	r24, 0x0a	; 10
 344:	88 61       	ori	r24, 0x18	; 24
 346:	8a b9       	out	0x0a, r24	; 10
	UCSR0C |= 0x06; // UCSZn1 : 1 UCSZn0 : 1 -> 8-bit
 348:	e5 e9       	ldi	r30, 0x95	; 149
 34a:	f0 e0       	ldi	r31, 0x00	; 0
 34c:	80 81       	ld	r24, Z
 34e:	86 60       	ori	r24, 0x06	; 6
 350:	80 83       	st	Z, r24
	UBRR0L = BAUDRATE_9600; // speed : 9600
 352:	8f e5       	ldi	r24, 0x5F	; 95
 354:	89 b9       	out	0x09, r24	; 9
	
	uint8_t cardToken; // 수신받은 문자
	char cardNum[30] = {0}; // 수신받은 카드 번호
 356:	fe 01       	movw	r30, r28
 358:	31 96       	adiw	r30, 0x01	; 1
 35a:	8e e1       	ldi	r24, 0x1E	; 30
 35c:	df 01       	movw	r26, r30
 35e:	1d 92       	st	X+, r1
 360:	8a 95       	dec	r24
 362:	e9 f7       	brne	.-6      	; 0x35e <main+0x34>
	char* chkChar;
	uint8_t cardIdx;
	char csIndex;
	
	dataInit(); // 고객정보 초기화
 364:	d9 de       	rcall	.-590    	; 0x118 <dataInit>
    /* Replace with your application code */
    while (1) 
    {
		cardIdx = 0;
		while(1){
			cardToken = UART0_receive();
 366:	10 e0       	ldi	r17, 0x00	; 0
 368:	b3 de       	rcall	.-666    	; 0xd0 <UART0_receive>
			//UART0_transmit(cardToken);
			
			cardNum[cardIdx++] = cardToken;
 36a:	91 e0       	ldi	r25, 0x01	; 1
 36c:	91 0f       	add	r25, r17
 36e:	e1 e0       	ldi	r30, 0x01	; 1
 370:	f0 e0       	ldi	r31, 0x00	; 0
 372:	ec 0f       	add	r30, r28
 374:	fd 1f       	adc	r31, r29
 376:	e1 0f       	add	r30, r17
 378:	f1 1d       	adc	r31, r1
 37a:	80 83       	st	Z, r24
 37c:	19 2f       	mov	r17, r25
			if(cardToken == 'E'){
 37e:	85 34       	cpi	r24, 0x45	; 69
 380:	99 f7       	brne	.-26     	; 0x368 <main+0x3e>
				cardNum[cardIdx] = '\0';
 382:	de 01       	movw	r26, r28
 384:	11 96       	adiw	r26, 0x01	; 1
 386:	fd 01       	movw	r30, r26
 388:	e9 0f       	add	r30, r25
 38a:	f1 1d       	adc	r31, r1
 38c:	10 82       	st	Z, r1
				break;
				}
		}
		
		if(((strlen(cardNum) > 13) && (strlen(cardNum) < 20)) && (cardNum[0] == 'a')){
 38e:	fd 01       	movw	r30, r26
 390:	01 90       	ld	r0, Z+
 392:	00 20       	and	r0, r0
 394:	e9 f7       	brne	.-6      	; 0x390 <main+0x66>
 396:	31 97       	sbiw	r30, 0x01	; 1
 398:	ea 1b       	sub	r30, r26
 39a:	fb 0b       	sbc	r31, r27
 39c:	ee 30       	cpi	r30, 0x0E	; 14
 39e:	f1 05       	cpc	r31, r1
 3a0:	d0 f0       	brcs	.+52     	; 0x3d6 <main+0xac>
 3a2:	74 97       	sbiw	r30, 0x14	; 20
 3a4:	c0 f4       	brcc	.+48     	; 0x3d6 <main+0xac>
 3a6:	89 81       	ldd	r24, Y+1	; 0x01
 3a8:	81 36       	cpi	r24, 0x61	; 97
 3aa:	a9 f4       	brne	.+42     	; 0x3d6 <main+0xac>
			
			chkChar = cardNum;
			while(*chkChar){
				UART0_transmit(*chkChar);
 3ac:	04 c0       	rjmp	.+8      	; 0x3b6 <main+0x8c>
 3ae:	8c de       	rcall	.-744    	; 0xc8 <UART0_transmit>
				chkChar++;
 3b0:	0f 5f       	subi	r16, 0xFF	; 255
 3b2:	1f 4f       	sbci	r17, 0xFF	; 255
 3b4:	03 c0       	rjmp	.+6      	; 0x3bc <main+0x92>
 3b6:	8e 01       	movw	r16, r28
 3b8:	0f 5f       	subi	r16, 0xFF	; 255
 3ba:	1f 4f       	sbci	r17, 0xFF	; 255
		}
		
		if(((strlen(cardNum) > 13) && (strlen(cardNum) < 20)) && (cardNum[0] == 'a')){
			
			chkChar = cardNum;
			while(*chkChar){
 3bc:	f8 01       	movw	r30, r16
 3be:	80 81       	ld	r24, Z
 3c0:	81 11       	cpse	r24, r1
				UART0_transmit(*chkChar);
				chkChar++;
			}
			
			
			csIndex = checkCard(cardNum);
 3c2:	f5 cf       	rjmp	.-22     	; 0x3ae <main+0x84>
 3c4:	ce 01       	movw	r24, r28
 3c6:	01 96       	adiw	r24, 0x01	; 1
			UART0_transmit(csIndex);
 3c8:	87 de       	rcall	.-754    	; 0xd8 <checkCard>
 3ca:	7e de       	rcall	.-772    	; 0xc8 <UART0_transmit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3cc:	86 e6       	ldi	r24, 0x66	; 102
 3ce:	9e e0       	ldi	r25, 0x0E	; 14
 3d0:	01 97       	sbiw	r24, 0x01	; 1
 3d2:	f1 f7       	brne	.-4      	; 0x3d0 <main+0xa6>
 3d4:	00 00       	nop
				sendInfo(cusInfoBle,2);
			}
			cardNum="";
			#endif
		}
		memset(cardNum, 0, sizeof(cardNum));
 3d6:	fe 01       	movw	r30, r28
 3d8:	31 96       	adiw	r30, 0x01	; 1
 3da:	8e e1       	ldi	r24, 0x1E	; 30
 3dc:	df 01       	movw	r26, r30
 3de:	1d 92       	st	X+, r1
 3e0:	8a 95       	dec	r24
 3e2:	e9 f7       	brne	.-6      	; 0x3de <main+0xb4>
		
			
		}
		#endif
		
    }
 3e4:	c0 cf       	rjmp	.-128    	; 0x366 <main+0x3c>

000003e6 <strcmp>:
 3e6:	fb 01       	movw	r30, r22
 3e8:	dc 01       	movw	r26, r24
 3ea:	8d 91       	ld	r24, X+
 3ec:	01 90       	ld	r0, Z+
 3ee:	80 19       	sub	r24, r0
 3f0:	01 10       	cpse	r0, r1
 3f2:	d9 f3       	breq	.-10     	; 0x3ea <strcmp+0x4>
 3f4:	99 0b       	sbc	r25, r25
 3f6:	08 95       	ret

000003f8 <_exit>:
 3f8:	f8 94       	cli

000003fa <__stop_program>:
 3fa:	ff cf       	rjmp	.-2      	; 0x3fa <__stop_program>
