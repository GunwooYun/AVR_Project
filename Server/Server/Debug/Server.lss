
Server.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000c4  00800100  00000eb6  00000f4a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000eb6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000194  008001c4  008001c4  0000100e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000100e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000106c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  000010ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000dc9  00000000  00000000  00001134  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000098d  00000000  00000000  00001efd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000632  00000000  00000000  0000288a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e8  00000000  00000000  00002ebc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000053d  00000000  00000000  000030a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005c7  00000000  00000000  000035e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  00003ba8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 eb       	ldi	r30, 0xB6	; 182
  a0:	fe e0       	ldi	r31, 0x0E	; 14
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 3c       	cpi	r26, 0xC4	; 196
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	23 e0       	ldi	r18, 0x03	; 3
  b4:	a4 ec       	ldi	r26, 0xC4	; 196
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a8 35       	cpi	r26, 0x58	; 88
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	7e d2       	rcall	.+1276   	; 0x5c0 <main>
  c4:	f6 c6       	rjmp	.+3564   	; 0xeb2 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <Init_BLUETOOTH>:
	while(1)
	{
		if((UCSR1A & (1 << RXC1))) break;
	}
	return UDR1;
}
  c8:	88 e0       	ldi	r24, 0x08	; 8
  ca:	81 bb       	out	0x11, r24	; 17
  cc:	10 92 9b 00 	sts	0x009B, r1	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
  d0:	88 e1       	ldi	r24, 0x18	; 24
  d2:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
  d6:	86 e0       	ldi	r24, 0x06	; 6
  d8:	80 93 9d 00 	sts	0x009D, r24	; 0x80009d <__TEXT_REGION_LENGTH__+0x7e009d>
  dc:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
  e0:	87 e0       	ldi	r24, 0x07	; 7
  e2:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
  e6:	08 95       	ret

000000e8 <UART1_transmit>:
  e8:	90 91 9b 00 	lds	r25, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
  ec:	95 ff       	sbrs	r25, 5
  ee:	fc cf       	rjmp	.-8      	; 0xe8 <UART1_transmit>
  f0:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
  f4:	08 95       	ret

000000f6 <UART0_transmit>:
{
	while(1)
	{
		
		// transmit buffer is ready to receive new data
		if((UCSR0A & (1 << UDRE0))) break;
  f6:	5d 9b       	sbis	0x0b, 5	; 11
  f8:	fe cf       	rjmp	.-4      	; 0xf6 <UART0_transmit>
	}
	UDR0 = token; // I/O Data Register
  fa:	8c b9       	out	0x0c, r24	; 12
  fc:	08 95       	ret

000000fe <UART0_receive>:

uint8_t UART0_receive(void)
{
	while(1)
	{
		if((UCSR0A & (1 << RXC1))) break;
  fe:	5f 9b       	sbis	0x0b, 7	; 11
 100:	fe cf       	rjmp	.-4      	; 0xfe <UART0_receive>
	}
	return UDR0;
 102:	8c b1       	in	r24, 0x0c	; 12
}
 104:	08 95       	ret

00000106 <getCusInfo>:


char* getCusInfo(uint8_t index)
{
 106:	0f 93       	push	r16
 108:	1f 93       	push	r17
 10a:	cf 93       	push	r28
 10c:	c8 2f       	mov	r28, r24
	char* pCusInfo;
	pCusInfo = (char *)malloc(sizeof(char) * 30);
 10e:	8e e1       	ldi	r24, 0x1E	; 30
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	ca d2       	rcall	.+1428   	; 0x6a8 <malloc>
 114:	8c 01       	movw	r16, r24
	if(pCusInfo == NULL){
 116:	89 2b       	or	r24, r25
 118:	29 f1       	breq	.+74     	; 0x164 <getCusInfo+0x5e>
		return NULL;
	}
	sprintf(pCusInfo, "b %s %d %d\n", csArray[index].cName, csArray[index].cAge, csArray[index].cBal);
 11a:	86 e3       	ldi	r24, 0x36	; 54
 11c:	c8 9f       	mul	r28, r24
 11e:	f0 01       	movw	r30, r0
 120:	11 24       	eor	r1, r1
 122:	cf 01       	movw	r24, r30
 124:	8c 59       	subi	r24, 0x9C	; 156
 126:	9d 4f       	sbci	r25, 0xFD	; 253
 128:	ea 5b       	subi	r30, 0xBA	; 186
 12a:	fd 4f       	sbci	r31, 0xFD	; 253
 12c:	25 a9       	ldd	r18, Z+53	; 0x35
 12e:	2f 93       	push	r18
 130:	24 a9       	ldd	r18, Z+52	; 0x34
 132:	2f 93       	push	r18
 134:	23 a9       	ldd	r18, Z+51	; 0x33
 136:	2f 93       	push	r18
 138:	22 a9       	ldd	r18, Z+50	; 0x32
 13a:	2f 93       	push	r18
 13c:	9f 93       	push	r25
 13e:	8f 93       	push	r24
 140:	86 e0       	ldi	r24, 0x06	; 6
 142:	91 e0       	ldi	r25, 0x01	; 1
 144:	9f 93       	push	r25
 146:	8f 93       	push	r24
 148:	1f 93       	push	r17
 14a:	0f 93       	push	r16
 14c:	d7 d3       	rcall	.+1966   	; 0x8fc <sprintf>
	return pCusInfo;
 14e:	8d b7       	in	r24, 0x3d	; 61
 150:	9e b7       	in	r25, 0x3e	; 62
 152:	0a 96       	adiw	r24, 0x0a	; 10
 154:	0f b6       	in	r0, 0x3f	; 63
 156:	f8 94       	cli
 158:	9e bf       	out	0x3e, r25	; 62
 15a:	0f be       	out	0x3f, r0	; 63
 15c:	8d bf       	out	0x3d, r24	; 61
 15e:	80 2f       	mov	r24, r16
 160:	91 2f       	mov	r25, r17
 162:	02 c0       	rjmp	.+4      	; 0x168 <getCusInfo+0x62>
char* getCusInfo(uint8_t index)
{
	char* pCusInfo;
	pCusInfo = (char *)malloc(sizeof(char) * 30);
	if(pCusInfo == NULL){
		return NULL;
 164:	80 e0       	ldi	r24, 0x00	; 0
 166:	90 e0       	ldi	r25, 0x00	; 0
	}
	sprintf(pCusInfo, "b %s %d %d\n", csArray[index].cName, csArray[index].cAge, csArray[index].cBal);
	return pCusInfo;
}
 168:	cf 91       	pop	r28
 16a:	1f 91       	pop	r17
 16c:	0f 91       	pop	r16
 16e:	08 95       	ret

00000170 <getBleInfo>:
char* getBleInfo(uint8_t index)
{
 170:	0f 93       	push	r16
 172:	1f 93       	push	r17
 174:	cf 93       	push	r28
 176:	c8 2f       	mov	r28, r24
	char* pBleInfo;
	pBleInfo = (char *)malloc(sizeof(char) * 30);
 178:	8e e1       	ldi	r24, 0x1E	; 30
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	95 d2       	rcall	.+1322   	; 0x6a8 <malloc>
 17e:	8c 01       	movw	r16, r24
	if(pBleInfo == NULL){
 180:	89 2b       	or	r24, r25
 182:	09 f1       	breq	.+66     	; 0x1c6 <getBleInfo+0x56>
		return NULL;
	}
	sprintf(pBleInfo, "Name: %s Age : %d\n", csArray[index].cName, csArray[index].cAge);
 184:	86 e3       	ldi	r24, 0x36	; 54
 186:	c8 9f       	mul	r28, r24
 188:	f0 01       	movw	r30, r0
 18a:	11 24       	eor	r1, r1
 18c:	cf 01       	movw	r24, r30
 18e:	8c 59       	subi	r24, 0x9C	; 156
 190:	9d 4f       	sbci	r25, 0xFD	; 253
 192:	ea 5b       	subi	r30, 0xBA	; 186
 194:	fd 4f       	sbci	r31, 0xFD	; 253
 196:	23 a9       	ldd	r18, Z+51	; 0x33
 198:	2f 93       	push	r18
 19a:	22 a9       	ldd	r18, Z+50	; 0x32
 19c:	2f 93       	push	r18
 19e:	9f 93       	push	r25
 1a0:	8f 93       	push	r24
 1a2:	82 e1       	ldi	r24, 0x12	; 18
 1a4:	91 e0       	ldi	r25, 0x01	; 1
 1a6:	9f 93       	push	r25
 1a8:	8f 93       	push	r24
 1aa:	1f 93       	push	r17
 1ac:	0f 93       	push	r16
 1ae:	a6 d3       	rcall	.+1868   	; 0x8fc <sprintf>
	return pBleInfo;
 1b0:	8d b7       	in	r24, 0x3d	; 61
 1b2:	9e b7       	in	r25, 0x3e	; 62
 1b4:	08 96       	adiw	r24, 0x08	; 8
 1b6:	0f b6       	in	r0, 0x3f	; 63
 1b8:	f8 94       	cli
 1ba:	9e bf       	out	0x3e, r25	; 62
 1bc:	0f be       	out	0x3f, r0	; 63
 1be:	8d bf       	out	0x3d, r24	; 61
 1c0:	80 2f       	mov	r24, r16
 1c2:	91 2f       	mov	r25, r17
 1c4:	02 c0       	rjmp	.+4      	; 0x1ca <getBleInfo+0x5a>
char* getBleInfo(uint8_t index)
{
	char* pBleInfo;
	pBleInfo = (char *)malloc(sizeof(char) * 30);
	if(pBleInfo == NULL){
		return NULL;
 1c6:	80 e0       	ldi	r24, 0x00	; 0
 1c8:	90 e0       	ldi	r25, 0x00	; 0
	}
	sprintf(pBleInfo, "Name: %s Age : %d\n", csArray[index].cName, csArray[index].cAge);
	return pBleInfo;
	//return "Name: " + (String)csArray[index].cName + " Age : " + (String)csArray[index].cAge+"\n";
}
 1ca:	cf 91       	pop	r28
 1cc:	1f 91       	pop	r17
 1ce:	0f 91       	pop	r16
 1d0:	08 95       	ret

000001d2 <getProInfo>:
#if 1
char* getProInfo(uint8_t index)
{
 1d2:	0f 93       	push	r16
 1d4:	1f 93       	push	r17
 1d6:	cf 93       	push	r28
 1d8:	c8 2f       	mov	r28, r24
	char* pProInfo;
	pProInfo = (char *)malloc(sizeof(char) * 30);
 1da:	8e e1       	ldi	r24, 0x1E	; 30
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	64 d2       	rcall	.+1224   	; 0x6a8 <malloc>
 1e0:	8c 01       	movw	r16, r24
	if(pProInfo == NULL){
 1e2:	89 2b       	or	r24, r25
 1e4:	11 f1       	breq	.+68     	; 0x22a <getProInfo+0x58>
		return NULL;
	}
	sprintf(pProInfo, "d %s %d %d", pArray[index].pName, pArray[index].age, pArray[index].price);
 1e6:	8a e1       	ldi	r24, 0x1A	; 26
 1e8:	c8 9f       	mul	r28, r24
 1ea:	f0 01       	movw	r30, r0
 1ec:	11 24       	eor	r1, r1
 1ee:	ec 53       	subi	r30, 0x3C	; 60
 1f0:	fe 4f       	sbci	r31, 0xFE	; 254
 1f2:	85 89       	ldd	r24, Z+21	; 0x15
 1f4:	8f 93       	push	r24
 1f6:	84 89       	ldd	r24, Z+20	; 0x14
 1f8:	8f 93       	push	r24
 1fa:	87 89       	ldd	r24, Z+23	; 0x17
 1fc:	8f 93       	push	r24
 1fe:	86 89       	ldd	r24, Z+22	; 0x16
 200:	8f 93       	push	r24
 202:	ff 93       	push	r31
 204:	ef 93       	push	r30
 206:	85 e2       	ldi	r24, 0x25	; 37
 208:	91 e0       	ldi	r25, 0x01	; 1
 20a:	9f 93       	push	r25
 20c:	8f 93       	push	r24
 20e:	1f 93       	push	r17
 210:	0f 93       	push	r16
 212:	74 d3       	rcall	.+1768   	; 0x8fc <sprintf>
	return pProInfo;
 214:	8d b7       	in	r24, 0x3d	; 61
 216:	9e b7       	in	r25, 0x3e	; 62
 218:	0a 96       	adiw	r24, 0x0a	; 10
 21a:	0f b6       	in	r0, 0x3f	; 63
 21c:	f8 94       	cli
 21e:	9e bf       	out	0x3e, r25	; 62
 220:	0f be       	out	0x3f, r0	; 63
 222:	8d bf       	out	0x3d, r24	; 61
 224:	80 2f       	mov	r24, r16
 226:	91 2f       	mov	r25, r17
 228:	02 c0       	rjmp	.+4      	; 0x22e <getProInfo+0x5c>
char* getProInfo(uint8_t index)
{
	char* pProInfo;
	pProInfo = (char *)malloc(sizeof(char) * 30);
	if(pProInfo == NULL){
		return NULL;
 22a:	80 e0       	ldi	r24, 0x00	; 0
 22c:	90 e0       	ldi	r25, 0x00	; 0
	}
	sprintf(pProInfo, "d %s %d %d", pArray[index].pName, pArray[index].age, pArray[index].price);
	return pProInfo;
	//return "d " + (String)productArr[index] + " " + (String)ageArr[index] + " " + (String)price[index];
}
 22e:	cf 91       	pop	r28
 230:	1f 91       	pop	r17
 232:	0f 91       	pop	r16
 234:	08 95       	ret

00000236 <getBleStock>:


char* getBleStock(uint8_t index)
{
 236:	0f 93       	push	r16
 238:	1f 93       	push	r17
 23a:	cf 93       	push	r28
 23c:	c8 2f       	mov	r28, r24
	char* pBleStock;
	pBleStock = (char *)malloc(sizeof(char) * 30);
 23e:	8e e1       	ldi	r24, 0x1E	; 30
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	32 d2       	rcall	.+1124   	; 0x6a8 <malloc>
 244:	8c 01       	movw	r16, r24
	if(pBleStock == NULL){
 246:	89 2b       	or	r24, r25
 248:	f1 f0       	breq	.+60     	; 0x286 <getBleStock+0x50>
		return NULL;
	}
	sprintf(pBleStock, "ID: %s Stock : %d\n", pArray[index].pName, pArray[index].stock);
 24a:	8a e1       	ldi	r24, 0x1A	; 26
 24c:	c8 9f       	mul	r28, r24
 24e:	f0 01       	movw	r30, r0
 250:	11 24       	eor	r1, r1
 252:	ec 53       	subi	r30, 0x3C	; 60
 254:	fe 4f       	sbci	r31, 0xFE	; 254
 256:	81 8d       	ldd	r24, Z+25	; 0x19
 258:	8f 93       	push	r24
 25a:	80 8d       	ldd	r24, Z+24	; 0x18
 25c:	8f 93       	push	r24
 25e:	ff 93       	push	r31
 260:	ef 93       	push	r30
 262:	80 e3       	ldi	r24, 0x30	; 48
 264:	91 e0       	ldi	r25, 0x01	; 1
 266:	9f 93       	push	r25
 268:	8f 93       	push	r24
 26a:	1f 93       	push	r17
 26c:	0f 93       	push	r16
 26e:	46 d3       	rcall	.+1676   	; 0x8fc <sprintf>
	return pBleStock;
 270:	8d b7       	in	r24, 0x3d	; 61
 272:	9e b7       	in	r25, 0x3e	; 62
 274:	08 96       	adiw	r24, 0x08	; 8
 276:	0f b6       	in	r0, 0x3f	; 63
 278:	f8 94       	cli
 27a:	9e bf       	out	0x3e, r25	; 62
 27c:	0f be       	out	0x3f, r0	; 63
 27e:	8d bf       	out	0x3d, r24	; 61
 280:	80 2f       	mov	r24, r16
 282:	91 2f       	mov	r25, r17
 284:	02 c0       	rjmp	.+4      	; 0x28a <getBleStock+0x54>
char* getBleStock(uint8_t index)
{
	char* pBleStock;
	pBleStock = (char *)malloc(sizeof(char) * 30);
	if(pBleStock == NULL){
		return NULL;
 286:	80 e0       	ldi	r24, 0x00	; 0
 288:	90 e0       	ldi	r25, 0x00	; 0
	}
	sprintf(pBleStock, "ID: %s Stock : %d\n", pArray[index].pName, pArray[index].stock);
	return pBleStock;
	//return "ID: " + (String)productArr[index] + " Stock : " + (String)stockArr[index]+"\n";
}
 28a:	cf 91       	pop	r28
 28c:	1f 91       	pop	r17
 28e:	0f 91       	pop	r16
 290:	08 95       	ret

00000292 <checkCard>:

#endif

uint8_t checkCard(char* cn)
{
 292:	0f 93       	push	r16
 294:	1f 93       	push	r17
 296:	cf 93       	push	r28
 298:	df 93       	push	r29
 29a:	8c 01       	movw	r16, r24
	for(int i = 0; i < NUM_OF_CUSTOMER; i++)
 29c:	c0 e0       	ldi	r28, 0x00	; 0
 29e:	d0 e0       	ldi	r29, 0x00	; 0
 2a0:	0d c0       	rjmp	.+26     	; 0x2bc <checkCard+0x2a>
	{
		if(!strcmp(csArray[i].cID, cn))
 2a2:	26 e3       	ldi	r18, 0x36	; 54
 2a4:	2c 9f       	mul	r18, r28
 2a6:	c0 01       	movw	r24, r0
 2a8:	2d 9f       	mul	r18, r29
 2aa:	90 0d       	add	r25, r0
 2ac:	11 24       	eor	r1, r1
 2ae:	b8 01       	movw	r22, r16
 2b0:	8a 5b       	subi	r24, 0xBA	; 186
 2b2:	9d 4f       	sbci	r25, 0xFD	; 253
 2b4:	1a d3       	rcall	.+1588   	; 0x8ea <strcmp>
 2b6:	89 2b       	or	r24, r25
 2b8:	31 f0       	breq	.+12     	; 0x2c6 <checkCard+0x34>

#endif

uint8_t checkCard(char* cn)
{
	for(int i = 0; i < NUM_OF_CUSTOMER; i++)
 2ba:	21 96       	adiw	r28, 0x01	; 1
 2bc:	c5 30       	cpi	r28, 0x05	; 5
 2be:	d1 05       	cpc	r29, r1
 2c0:	84 f3       	brlt	.-32     	; 0x2a2 <checkCard+0x10>
	{
		if(!strcmp(csArray[i].cID, cn))
		return 0;
	}
	return 1;
 2c2:	81 e0       	ldi	r24, 0x01	; 1
 2c4:	01 c0       	rjmp	.+2      	; 0x2c8 <checkCard+0x36>
uint8_t checkCard(char* cn)
{
	for(int i = 0; i < NUM_OF_CUSTOMER; i++)
	{
		if(!strcmp(csArray[i].cID, cn))
		return 0;
 2c6:	80 e0       	ldi	r24, 0x00	; 0
	}
	return 1;
}
 2c8:	df 91       	pop	r29
 2ca:	cf 91       	pop	r28
 2cc:	1f 91       	pop	r17
 2ce:	0f 91       	pop	r16
 2d0:	08 95       	ret

000002d2 <sendInfo>:

void sendInfo(char* info, uint8_t mode)
{
 2d2:	cf 93       	push	r28
 2d4:	df 93       	push	r29
 2d6:	ec 01       	movw	r28, r24
	char* sendToken;
	if(mode == UART){
 2d8:	61 30       	cpi	r22, 0x01	; 1
 2da:	39 f4       	brne	.+14     	; 0x2ea <sendInfo+0x18>
 2dc:	02 c0       	rjmp	.+4      	; 0x2e2 <sendInfo+0x10>
		sendToken = info;
		while(*sendToken){
			UART0_transmit(*sendToken);
 2de:	0b df       	rcall	.-490    	; 0xf6 <UART0_transmit>
			sendToken++;
 2e0:	21 96       	adiw	r28, 0x01	; 1
void sendInfo(char* info, uint8_t mode)
{
	char* sendToken;
	if(mode == UART){
		sendToken = info;
		while(*sendToken){
 2e2:	88 81       	ld	r24, Y
 2e4:	81 11       	cpse	r24, r1
 2e6:	fb cf       	rjmp	.-10     	; 0x2de <sendInfo+0xc>
 2e8:	08 c0       	rjmp	.+16     	; 0x2fa <sendInfo+0x28>
			UART0_transmit(*sendToken);
			sendToken++;
		}
	}
	else if(mode == BLUETOOTH)
 2ea:	62 30       	cpi	r22, 0x02	; 2
 2ec:	31 f4       	brne	.+12     	; 0x2fa <sendInfo+0x28>
	{
		sendToken = info;
		while(*sendToken){
			UART1_transmit(*sendToken);
 2ee:	02 c0       	rjmp	.+4      	; 0x2f4 <sendInfo+0x22>
 2f0:	fb de       	rcall	.-522    	; 0xe8 <UART1_transmit>
			sendToken++;
 2f2:	21 96       	adiw	r28, 0x01	; 1
		}
	}
	else if(mode == BLUETOOTH)
	{
		sendToken = info;
		while(*sendToken){
 2f4:	88 81       	ld	r24, Y
 2f6:	81 11       	cpse	r24, r1
 2f8:	fb cf       	rjmp	.-10     	; 0x2f0 <sendInfo+0x1e>
			UART1_transmit(*sendToken);
			sendToken++;
		}
		
	}
}
 2fa:	df 91       	pop	r29
 2fc:	cf 91       	pop	r28
 2fe:	08 95       	ret

00000300 <calBalance>:

void calBalance(uint8_t index, uint8_t pIndex)
{
	if(csArray[index].cAge < pArray[pIndex].age)
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	26 e3       	ldi	r18, 0x36	; 54
 304:	28 9f       	mul	r18, r24
 306:	f0 01       	movw	r30, r0
 308:	29 9f       	mul	r18, r25
 30a:	f0 0d       	add	r31, r0
 30c:	11 24       	eor	r1, r1
 30e:	ea 5b       	subi	r30, 0xBA	; 186
 310:	fd 4f       	sbci	r31, 0xFD	; 253
 312:	42 a9       	ldd	r20, Z+50	; 0x32
 314:	53 a9       	ldd	r21, Z+51	; 0x33
 316:	70 e0       	ldi	r23, 0x00	; 0
 318:	2a e1       	ldi	r18, 0x1A	; 26
 31a:	26 9f       	mul	r18, r22
 31c:	f0 01       	movw	r30, r0
 31e:	27 9f       	mul	r18, r23
 320:	f0 0d       	add	r31, r0
 322:	11 24       	eor	r1, r1
 324:	ec 53       	subi	r30, 0x3C	; 60
 326:	fe 4f       	sbci	r31, 0xFE	; 254
 328:	26 89       	ldd	r18, Z+22	; 0x16
 32a:	37 89       	ldd	r19, Z+23	; 0x17
 32c:	42 17       	cp	r20, r18
 32e:	53 07       	cpc	r21, r19
 330:	ec f1       	brlt	.+122    	; 0x3ac <calBalance+0xac>
		return;
	if(pArray[pIndex].stock <= 0) return;
 332:	2a e1       	ldi	r18, 0x1A	; 26
 334:	26 9f       	mul	r18, r22
 336:	f0 01       	movw	r30, r0
 338:	27 9f       	mul	r18, r23
 33a:	f0 0d       	add	r31, r0
 33c:	11 24       	eor	r1, r1
 33e:	ec 53       	subi	r30, 0x3C	; 60
 340:	fe 4f       	sbci	r31, 0xFE	; 254
 342:	20 8d       	ldd	r18, Z+24	; 0x18
 344:	31 8d       	ldd	r19, Z+25	; 0x19
 346:	12 16       	cp	r1, r18
 348:	13 06       	cpc	r1, r19
 34a:	84 f5       	brge	.+96     	; 0x3ac <calBalance+0xac>
	int bal = csArray[index].cBal - pArray[pIndex].price;
 34c:	46 e3       	ldi	r20, 0x36	; 54
 34e:	48 9f       	mul	r20, r24
 350:	f0 01       	movw	r30, r0
 352:	49 9f       	mul	r20, r25
 354:	f0 0d       	add	r31, r0
 356:	11 24       	eor	r1, r1
 358:	ea 5b       	subi	r30, 0xBA	; 186
 35a:	fd 4f       	sbci	r31, 0xFD	; 253
 35c:	44 a9       	ldd	r20, Z+52	; 0x34
 35e:	55 a9       	ldd	r21, Z+53	; 0x35
 360:	aa e1       	ldi	r26, 0x1A	; 26
 362:	a6 9f       	mul	r26, r22
 364:	f0 01       	movw	r30, r0
 366:	a7 9f       	mul	r26, r23
 368:	f0 0d       	add	r31, r0
 36a:	11 24       	eor	r1, r1
 36c:	ec 53       	subi	r30, 0x3C	; 60
 36e:	fe 4f       	sbci	r31, 0xFE	; 254
 370:	04 88       	ldd	r0, Z+20	; 0x14
 372:	f5 89       	ldd	r31, Z+21	; 0x15
 374:	e0 2d       	mov	r30, r0
 376:	4e 1b       	sub	r20, r30
 378:	5f 0b       	sbc	r21, r31
	if(bal > 0){
 37a:	14 16       	cp	r1, r20
 37c:	15 06       	cpc	r1, r21
 37e:	b4 f4       	brge	.+44     	; 0x3ac <calBalance+0xac>
		csArray[index].cBal = bal;
 380:	a6 e3       	ldi	r26, 0x36	; 54
 382:	a8 9f       	mul	r26, r24
 384:	f0 01       	movw	r30, r0
 386:	a9 9f       	mul	r26, r25
 388:	f0 0d       	add	r31, r0
 38a:	11 24       	eor	r1, r1
 38c:	ea 5b       	subi	r30, 0xBA	; 186
 38e:	fd 4f       	sbci	r31, 0xFD	; 253
 390:	55 ab       	std	Z+53, r21	; 0x35
 392:	44 ab       	std	Z+52, r20	; 0x34
		pArray[pIndex].stock--;
 394:	8a e1       	ldi	r24, 0x1A	; 26
 396:	86 9f       	mul	r24, r22
 398:	f0 01       	movw	r30, r0
 39a:	87 9f       	mul	r24, r23
 39c:	f0 0d       	add	r31, r0
 39e:	11 24       	eor	r1, r1
 3a0:	ec 53       	subi	r30, 0x3C	; 60
 3a2:	fe 4f       	sbci	r31, 0xFE	; 254
 3a4:	21 50       	subi	r18, 0x01	; 1
 3a6:	31 09       	sbc	r19, r1
 3a8:	31 8f       	std	Z+25, r19	; 0x19
 3aa:	20 8f       	std	Z+24, r18	; 0x18
 3ac:	08 95       	ret

000003ae <dataInit>:
	}
}

void dataInit()
{
 3ae:	cf 93       	push	r28
 3b0:	df 93       	push	r29
	/* 고객정보 데이터 저장 */
	strcpy(csArray[0].cID, "a179 15 232 17E");
 3b2:	c6 e4       	ldi	r28, 0x46	; 70
 3b4:	d2 e0       	ldi	r29, 0x02	; 2
 3b6:	80 e1       	ldi	r24, 0x10	; 16
 3b8:	e3 e4       	ldi	r30, 0x43	; 67
 3ba:	f1 e0       	ldi	r31, 0x01	; 1
 3bc:	de 01       	movw	r26, r28
 3be:	01 90       	ld	r0, Z+
 3c0:	0d 92       	st	X+, r0
 3c2:	8a 95       	dec	r24
 3c4:	e1 f7       	brne	.-8      	; 0x3be <dataInit+0x10>
	strcpy(csArray[0].cName, "Tom");
 3c6:	e4 e6       	ldi	r30, 0x64	; 100
 3c8:	f2 e0       	ldi	r31, 0x02	; 2
 3ca:	84 e5       	ldi	r24, 0x54	; 84
 3cc:	9f e6       	ldi	r25, 0x6F	; 111
 3ce:	91 83       	std	Z+1, r25	; 0x01
 3d0:	80 83       	st	Z, r24
 3d2:	8d e6       	ldi	r24, 0x6D	; 109
 3d4:	90 e0       	ldi	r25, 0x00	; 0
 3d6:	93 83       	std	Z+3, r25	; 0x03
 3d8:	82 83       	std	Z+2, r24	; 0x02
	//csArray[0].cID = "a179 15 232 17 \r\n";
	//csArray[0].cName = "Tom";
	csArray[0].cAge = 21;
 3da:	25 e1       	ldi	r18, 0x15	; 21
 3dc:	30 e0       	ldi	r19, 0x00	; 0
 3de:	3b ab       	std	Y+51, r19	; 0x33
 3e0:	2a ab       	std	Y+50, r18	; 0x32
	csArray[0].cBal = 10000;
 3e2:	80 e1       	ldi	r24, 0x10	; 16
 3e4:	97 e2       	ldi	r25, 0x27	; 39
 3e6:	9d ab       	std	Y+53, r25	; 0x35
 3e8:	8c ab       	std	Y+52, r24	; 0x34

	strcpy(csArray[1].cID, "a211 153 231 17E");
 3ea:	81 e1       	ldi	r24, 0x11	; 17
 3ec:	e3 e5       	ldi	r30, 0x53	; 83
 3ee:	f1 e0       	ldi	r31, 0x01	; 1
 3f0:	ac e7       	ldi	r26, 0x7C	; 124
 3f2:	b2 e0       	ldi	r27, 0x02	; 2
 3f4:	01 90       	ld	r0, Z+
 3f6:	0d 92       	st	X+, r0
 3f8:	8a 95       	dec	r24
 3fa:	e1 f7       	brne	.-8      	; 0x3f4 <dataInit+0x46>
	strcpy(csArray[1].cName, "Jack");
 3fc:	85 e0       	ldi	r24, 0x05	; 5
 3fe:	e4 e6       	ldi	r30, 0x64	; 100
 400:	f1 e0       	ldi	r31, 0x01	; 1
 402:	aa e9       	ldi	r26, 0x9A	; 154
 404:	b2 e0       	ldi	r27, 0x02	; 2
 406:	01 90       	ld	r0, Z+
 408:	0d 92       	st	X+, r0
 40a:	8a 95       	dec	r24
 40c:	e1 f7       	brne	.-8      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
	//csArray[1].cID = "a211 153 231 17 \r\n";
	//csArray[1].cName = "Jack";
	csArray[1].cAge = 17;
 40e:	81 e1       	ldi	r24, 0x11	; 17
 410:	90 e0       	ldi	r25, 0x00	; 0
 412:	90 93 af 02 	sts	0x02AF, r25	; 0x8002af <csArray+0x69>
 416:	80 93 ae 02 	sts	0x02AE, r24	; 0x8002ae <csArray+0x68>
	csArray[1].cBal = 30000;
 41a:	80 e3       	ldi	r24, 0x30	; 48
 41c:	95 e7       	ldi	r25, 0x75	; 117
 41e:	90 93 b1 02 	sts	0x02B1, r25	; 0x8002b1 <csArray+0x6b>
 422:	80 93 b0 02 	sts	0x02B0, r24	; 0x8002b0 <csArray+0x6a>

	strcpy(csArray[2].cID, "a213 153 231 17E");
 426:	81 e1       	ldi	r24, 0x11	; 17
 428:	e9 e6       	ldi	r30, 0x69	; 105
 42a:	f1 e0       	ldi	r31, 0x01	; 1
 42c:	a2 eb       	ldi	r26, 0xB2	; 178
 42e:	b2 e0       	ldi	r27, 0x02	; 2
 430:	01 90       	ld	r0, Z+
 432:	0d 92       	st	X+, r0
 434:	8a 95       	dec	r24
 436:	e1 f7       	brne	.-8      	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
	strcpy(csArray[2].cName, "John");
 438:	85 e0       	ldi	r24, 0x05	; 5
 43a:	ea e7       	ldi	r30, 0x7A	; 122
 43c:	f1 e0       	ldi	r31, 0x01	; 1
 43e:	a0 ed       	ldi	r26, 0xD0	; 208
 440:	b2 e0       	ldi	r27, 0x02	; 2
 442:	01 90       	ld	r0, Z+
 444:	0d 92       	st	X+, r0
 446:	8a 95       	dec	r24
 448:	e1 f7       	brne	.-8      	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
	//csArray[2].cID = "a213 153 231 17 \r\n";
	//csArray[2].cName = "John";
	csArray[2].cAge = 32;
 44a:	80 e2       	ldi	r24, 0x20	; 32
 44c:	90 e0       	ldi	r25, 0x00	; 0
 44e:	90 93 e5 02 	sts	0x02E5, r25	; 0x8002e5 <csArray+0x9f>
 452:	80 93 e4 02 	sts	0x02E4, r24	; 0x8002e4 <csArray+0x9e>
	csArray[2].cBal = 40000;
 456:	80 e4       	ldi	r24, 0x40	; 64
 458:	9c e9       	ldi	r25, 0x9C	; 156
 45a:	90 93 e7 02 	sts	0x02E7, r25	; 0x8002e7 <csArray+0xa1>
 45e:	80 93 e6 02 	sts	0x02E6, r24	; 0x8002e6 <csArray+0xa0>

	strcpy(csArray[3].cID, "a211 153 561 17E");
 462:	81 e1       	ldi	r24, 0x11	; 17
 464:	ef e7       	ldi	r30, 0x7F	; 127
 466:	f1 e0       	ldi	r31, 0x01	; 1
 468:	a8 ee       	ldi	r26, 0xE8	; 232
 46a:	b2 e0       	ldi	r27, 0x02	; 2
 46c:	01 90       	ld	r0, Z+
 46e:	0d 92       	st	X+, r0
 470:	8a 95       	dec	r24
 472:	e1 f7       	brne	.-8      	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
	strcpy(csArray[3].cName, "Jane");
 474:	85 e0       	ldi	r24, 0x05	; 5
 476:	e0 e9       	ldi	r30, 0x90	; 144
 478:	f1 e0       	ldi	r31, 0x01	; 1
 47a:	a6 e0       	ldi	r26, 0x06	; 6
 47c:	b3 e0       	ldi	r27, 0x03	; 3
 47e:	01 90       	ld	r0, Z+
 480:	0d 92       	st	X+, r0
 482:	8a 95       	dec	r24
 484:	e1 f7       	brne	.-8      	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
	//csArray[3].cID = "a211 153 561 17 \r\n";
	//csArray[3].cName = "Jane";
	csArray[3].cAge = 28;
 486:	8c e1       	ldi	r24, 0x1C	; 28
 488:	90 e0       	ldi	r25, 0x00	; 0
 48a:	90 93 1b 03 	sts	0x031B, r25	; 0x80031b <csArray+0xd5>
 48e:	80 93 1a 03 	sts	0x031A, r24	; 0x80031a <csArray+0xd4>
	csArray[3].cBal = 20000;
 492:	80 e2       	ldi	r24, 0x20	; 32
 494:	9e e4       	ldi	r25, 0x4E	; 78
 496:	90 93 1d 03 	sts	0x031D, r25	; 0x80031d <csArray+0xd7>
 49a:	80 93 1c 03 	sts	0x031C, r24	; 0x80031c <csArray+0xd6>

	strcpy(csArray[4].cID, "a204 153 231 17E");
 49e:	81 e1       	ldi	r24, 0x11	; 17
 4a0:	e5 e9       	ldi	r30, 0x95	; 149
 4a2:	f1 e0       	ldi	r31, 0x01	; 1
 4a4:	ae e1       	ldi	r26, 0x1E	; 30
 4a6:	b3 e0       	ldi	r27, 0x03	; 3
 4a8:	01 90       	ld	r0, Z+
 4aa:	0d 92       	st	X+, r0
 4ac:	8a 95       	dec	r24
 4ae:	e1 f7       	brne	.-8      	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
	strcpy(csArray[4].cName, "Mary");
 4b0:	85 e0       	ldi	r24, 0x05	; 5
 4b2:	e6 ea       	ldi	r30, 0xA6	; 166
 4b4:	f1 e0       	ldi	r31, 0x01	; 1
 4b6:	ac e3       	ldi	r26, 0x3C	; 60
 4b8:	b3 e0       	ldi	r27, 0x03	; 3
 4ba:	01 90       	ld	r0, Z+
 4bc:	0d 92       	st	X+, r0
 4be:	8a 95       	dec	r24
 4c0:	e1 f7       	brne	.-8      	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
	//csArray[4].cID = "a204 153 231 17 \r\n";
	//csArray[4].cName = "Mary";
	csArray[4].cAge = 56;
 4c2:	88 e3       	ldi	r24, 0x38	; 56
 4c4:	90 e0       	ldi	r25, 0x00	; 0
 4c6:	90 93 51 03 	sts	0x0351, r25	; 0x800351 <csArray+0x10b>
 4ca:	80 93 50 03 	sts	0x0350, r24	; 0x800350 <csArray+0x10a>
	csArray[4].cBal = 64000;
 4ce:	80 e0       	ldi	r24, 0x00	; 0
 4d0:	9a ef       	ldi	r25, 0xFA	; 250
 4d2:	90 93 53 03 	sts	0x0353, r25	; 0x800353 <csArray+0x10d>
 4d6:	80 93 52 03 	sts	0x0352, r24	; 0x800352 <csArray+0x10c>

	/* 상품정보 데이터 저장 */
	strcpy(pArray[0].pName, "N/A");
 4da:	c4 ec       	ldi	r28, 0xC4	; 196
 4dc:	d1 e0       	ldi	r29, 0x01	; 1
 4de:	8e e4       	ldi	r24, 0x4E	; 78
 4e0:	9f e2       	ldi	r25, 0x2F	; 47
 4e2:	99 83       	std	Y+1, r25	; 0x01
 4e4:	88 83       	st	Y, r24
 4e6:	81 e4       	ldi	r24, 0x41	; 65
 4e8:	90 e0       	ldi	r25, 0x00	; 0
 4ea:	9b 83       	std	Y+3, r25	; 0x03
 4ec:	8a 83       	std	Y+2, r24	; 0x02
	pArray[0].price = 0;
 4ee:	1d 8a       	std	Y+21, r1	; 0x15
 4f0:	1c 8a       	std	Y+20, r1	; 0x14
	pArray[0].age = 0;
 4f2:	1f 8a       	std	Y+23, r1	; 0x17
 4f4:	1e 8a       	std	Y+22, r1	; 0x16
	pArray[0].stock = 10;
 4f6:	8a e0       	ldi	r24, 0x0A	; 10
 4f8:	90 e0       	ldi	r25, 0x00	; 0
 4fa:	99 8f       	std	Y+25, r25	; 0x19
 4fc:	88 8f       	std	Y+24, r24	; 0x18
	
	strcpy(pArray[1].pName, "drink");
 4fe:	86 e0       	ldi	r24, 0x06	; 6
 500:	eb ea       	ldi	r30, 0xAB	; 171
 502:	f1 e0       	ldi	r31, 0x01	; 1
 504:	ae ed       	ldi	r26, 0xDE	; 222
 506:	b1 e0       	ldi	r27, 0x01	; 1
 508:	01 90       	ld	r0, Z+
 50a:	0d 92       	st	X+, r0
 50c:	8a 95       	dec	r24
 50e:	e1 f7       	brne	.-8      	; 0x508 <__LOCK_REGION_LENGTH__+0x108>
	pArray[1].price = 1500;
 510:	8c ed       	ldi	r24, 0xDC	; 220
 512:	95 e0       	ldi	r25, 0x05	; 5
 514:	9f a7       	std	Y+47, r25	; 0x2f
 516:	8e a7       	std	Y+46, r24	; 0x2e
	pArray[1].age = 0;
 518:	19 aa       	std	Y+49, r1	; 0x31
 51a:	18 aa       	std	Y+48, r1	; 0x30
	pArray[1].stock = 4;
 51c:	84 e0       	ldi	r24, 0x04	; 4
 51e:	90 e0       	ldi	r25, 0x00	; 0
 520:	9b ab       	std	Y+51, r25	; 0x33
 522:	8a ab       	std	Y+50, r24	; 0x32
	
	strcpy(pArray[2].pName, "cigar");
 524:	46 e0       	ldi	r20, 0x06	; 6
 526:	e1 eb       	ldi	r30, 0xB1	; 177
 528:	f1 e0       	ldi	r31, 0x01	; 1
 52a:	a8 ef       	ldi	r26, 0xF8	; 248
 52c:	b1 e0       	ldi	r27, 0x01	; 1
 52e:	01 90       	ld	r0, Z+
 530:	0d 92       	st	X+, r0
 532:	4a 95       	dec	r20
 534:	e1 f7       	brne	.-8      	; 0x52e <__LOCK_REGION_LENGTH__+0x12e>
	pArray[2].price = 4000;
 536:	40 ea       	ldi	r20, 0xA0	; 160
 538:	5f e0       	ldi	r21, 0x0F	; 15
 53a:	50 93 0d 02 	sts	0x020D, r21	; 0x80020d <__data_end+0x49>
 53e:	40 93 0c 02 	sts	0x020C, r20	; 0x80020c <__data_end+0x48>
	pArray[2].age = 19;
 542:	43 e1       	ldi	r20, 0x13	; 19
 544:	50 e0       	ldi	r21, 0x00	; 0
 546:	50 93 0f 02 	sts	0x020F, r21	; 0x80020f <__data_end+0x4b>
 54a:	40 93 0e 02 	sts	0x020E, r20	; 0x80020e <__data_end+0x4a>
	pArray[2].stock = 21;
 54e:	30 93 11 02 	sts	0x0211, r19	; 0x800211 <__data_end+0x4d>
 552:	20 93 10 02 	sts	0x0210, r18	; 0x800210 <__data_end+0x4c>
	
	strcpy(pArray[3].pName, "snack");
 556:	26 e0       	ldi	r18, 0x06	; 6
 558:	e7 eb       	ldi	r30, 0xB7	; 183
 55a:	f1 e0       	ldi	r31, 0x01	; 1
 55c:	a2 e1       	ldi	r26, 0x12	; 18
 55e:	b2 e0       	ldi	r27, 0x02	; 2
 560:	01 90       	ld	r0, Z+
 562:	0d 92       	st	X+, r0
 564:	2a 95       	dec	r18
 566:	e1 f7       	brne	.-8      	; 0x560 <__LOCK_REGION_LENGTH__+0x160>
	pArray[3].price = 1700;
 568:	24 ea       	ldi	r18, 0xA4	; 164
 56a:	36 e0       	ldi	r19, 0x06	; 6
 56c:	30 93 27 02 	sts	0x0227, r19	; 0x800227 <__data_end+0x63>
 570:	20 93 26 02 	sts	0x0226, r18	; 0x800226 <__data_end+0x62>
	pArray[3].age = 0;
 574:	10 92 29 02 	sts	0x0229, r1	; 0x800229 <__data_end+0x65>
 578:	10 92 28 02 	sts	0x0228, r1	; 0x800228 <__data_end+0x64>
	pArray[3].stock = 4;
 57c:	90 93 2b 02 	sts	0x022B, r25	; 0x80022b <__data_end+0x67>
 580:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <__data_end+0x66>
	
	strcpy(pArray[4].pName, "coffee");
 584:	87 e0       	ldi	r24, 0x07	; 7
 586:	ed eb       	ldi	r30, 0xBD	; 189
 588:	f1 e0       	ldi	r31, 0x01	; 1
 58a:	ac e2       	ldi	r26, 0x2C	; 44
 58c:	b2 e0       	ldi	r27, 0x02	; 2
 58e:	01 90       	ld	r0, Z+
 590:	0d 92       	st	X+, r0
 592:	8a 95       	dec	r24
 594:	e1 f7       	brne	.-8      	; 0x58e <__LOCK_REGION_LENGTH__+0x18e>
	pArray[4].price = 2500;
 596:	84 ec       	ldi	r24, 0xC4	; 196
 598:	99 e0       	ldi	r25, 0x09	; 9
 59a:	90 93 41 02 	sts	0x0241, r25	; 0x800241 <__data_end+0x7d>
 59e:	80 93 40 02 	sts	0x0240, r24	; 0x800240 <__data_end+0x7c>
	pArray[4].age = 15;
 5a2:	8f e0       	ldi	r24, 0x0F	; 15
 5a4:	90 e0       	ldi	r25, 0x00	; 0
 5a6:	90 93 43 02 	sts	0x0243, r25	; 0x800243 <__data_end+0x7f>
 5aa:	80 93 42 02 	sts	0x0242, r24	; 0x800242 <__data_end+0x7e>
	pArray[4].stock = 9;
 5ae:	89 e0       	ldi	r24, 0x09	; 9
 5b0:	90 e0       	ldi	r25, 0x00	; 0
 5b2:	90 93 45 02 	sts	0x0245, r25	; 0x800245 <__data_end+0x81>
 5b6:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <__data_end+0x80>
		
	
 5ba:	df 91       	pop	r29
 5bc:	cf 91       	pop	r28
 5be:	08 95       	ret

000005c0 <main>:
void calBalance(uint8_t index, uint8_t pIndex); //잔액계산

void dataInit(); // 고객정보 초기화

int main(void)
{
 5c0:	cf 93       	push	r28
 5c2:	df 93       	push	r29
 5c4:	cd b7       	in	r28, 0x3d	; 61
 5c6:	de b7       	in	r29, 0x3e	; 62
 5c8:	6e 97       	sbiw	r28, 0x1e	; 30
 5ca:	0f b6       	in	r0, 0x3f	; 63
 5cc:	f8 94       	cli
 5ce:	de bf       	out	0x3e, r29	; 62
 5d0:	0f be       	out	0x3f, r0	; 63
 5d2:	cd bf       	out	0x3d, r28	; 61
	DDRE = 0x02; // Set TX output
 5d4:	82 e0       	ldi	r24, 0x02	; 2
 5d6:	82 b9       	out	0x02, r24	; 2
	UCSR0B |= (1 << RXEN0 | 1 << TXEN0); // RXEN0 : receiver enable, TXEN0 : Transmitter enable
 5d8:	8a b1       	in	r24, 0x0a	; 10
 5da:	88 61       	ori	r24, 0x18	; 24
 5dc:	8a b9       	out	0x0a, r24	; 10
	UCSR0C |= 0x06; // UCSZn1 : 1 UCSZn0 : 1 -> 8-bit
 5de:	e5 e9       	ldi	r30, 0x95	; 149
 5e0:	f0 e0       	ldi	r31, 0x00	; 0
 5e2:	80 81       	ld	r24, Z
 5e4:	86 60       	ori	r24, 0x06	; 6
 5e6:	80 83       	st	Z, r24
	UBRR0L = BAUDRATE_9600; // speed : 9600
 5e8:	8f e5       	ldi	r24, 0x5F	; 95
 5ea:	89 b9       	out	0x09, r24	; 9
	
	Init_BLUETOOTH();
 5ec:	6d dd       	rcall	.-1318   	; 0xc8 <Init_BLUETOOTH>
	
	uint8_t cardToken; // 수신받은 문자
	char cardNum[30] = {0}; // 수신받은 카드 번호
 5ee:	fe 01       	movw	r30, r28
 5f0:	31 96       	adiw	r30, 0x01	; 1
 5f2:	8e e1       	ldi	r24, 0x1E	; 30
 5f4:	df 01       	movw	r26, r30
 5f6:	1d 92       	st	X+, r1
 5f8:	8a 95       	dec	r24
	uint8_t cardIdx; // 카드조회 인덱스
	uint8_t csIndex; // 고객정보 배열 인덱스
	
	dataInit(); // 고객정보 초기화
 5fa:	e9 f7       	brne	.-6      	; 0x5f6 <main+0x36>
    /* Replace with your application code */
    while (1) 
    {
		cardIdx = 0;
 5fc:	d8 de       	rcall	.-592    	; 0x3ae <dataInit>
		while(1){
			cardToken = UART0_receive();
 5fe:	10 e0       	ldi	r17, 0x00	; 0
 600:	7e dd       	rcall	.-1284   	; 0xfe <UART0_receive>
			//UART0_transmit(cardToken);
			
			cardNum[cardIdx++] = cardToken;
 602:	91 e0       	ldi	r25, 0x01	; 1
 604:	91 0f       	add	r25, r17
 606:	e1 e0       	ldi	r30, 0x01	; 1
 608:	f0 e0       	ldi	r31, 0x00	; 0
 60a:	ec 0f       	add	r30, r28
 60c:	fd 1f       	adc	r31, r29
 60e:	e1 0f       	add	r30, r17
 610:	f1 1d       	adc	r31, r1
 612:	80 83       	st	Z, r24
 614:	19 2f       	mov	r17, r25
			if(cardToken == 'E'){
 616:	85 34       	cpi	r24, 0x45	; 69
 618:	99 f7       	brne	.-26     	; 0x600 <main+0x40>
				cardNum[cardIdx] = '\0';
 61a:	de 01       	movw	r26, r28
 61c:	11 96       	adiw	r26, 0x01	; 1
 61e:	fd 01       	movw	r30, r26
 620:	e9 0f       	add	r30, r25
 622:	f1 1d       	adc	r31, r1
 624:	10 82       	st	Z, r1
				break;
				}
		}
		/* 고객 정보 조회 및 전송 */
		if(((strlen(cardNum) > 13) && (strlen(cardNum) < 20)) && (cardNum[0] == 'a')){
 626:	fd 01       	movw	r30, r26
 628:	01 90       	ld	r0, Z+
 62a:	00 20       	and	r0, r0
 62c:	e9 f7       	brne	.-6      	; 0x628 <main+0x68>
 62e:	31 97       	sbiw	r30, 0x01	; 1
 630:	ea 1b       	sub	r30, r26
 632:	fb 0b       	sbc	r31, r27
 634:	ee 30       	cpi	r30, 0x0E	; 14
 636:	f1 05       	cpc	r31, r1
 638:	c0 f0       	brcs	.+48     	; 0x66a <main+0xaa>
 63a:	74 97       	sbiw	r30, 0x14	; 20
 63c:	b0 f4       	brcc	.+44     	; 0x66a <main+0xaa>
 63e:	89 81       	ldd	r24, Y+1	; 0x01
 640:	81 36       	cpi	r24, 0x61	; 97
			csIndex = checkCard(cardNum); // 카드번호로 고객 조회
 642:	99 f4       	brne	.+38     	; 0x66a <main+0xaa>
 644:	cd 01       	movw	r24, r26
 646:	25 de       	rcall	.-950    	; 0x292 <checkCard>
				/* 고객정보 조회 실패 */
				sendInfo("1", 1);
			}
			else{
				/* 고객 정보 조회 성공 */
				char* cusInfoStr = getCusInfo(csIndex);
 648:	08 2f       	mov	r16, r24
 64a:	5d dd       	rcall	.-1350   	; 0x106 <getCusInfo>
 64c:	6c 01       	movw	r12, r24
				if(cusInfoStr == NULL){
					
				}
				char* cusInfoBle = getBleInfo(csIndex);
 64e:	80 2f       	mov	r24, r16
 650:	8f dd       	rcall	.-1250   	; 0x170 <getBleInfo>
 652:	7c 01       	movw	r14, r24
				if(cusInfoBle == NULL){
					
				}
				sendInfo(cusInfoStr,UART);
 654:	61 e0       	ldi	r22, 0x01	; 1
 656:	c6 01       	movw	r24, r12
 658:	3c de       	rcall	.-904    	; 0x2d2 <sendInfo>
				sendInfo(cusInfoBle,BLUETOOTH);
 65a:	62 e0       	ldi	r22, 0x02	; 2
 65c:	c7 01       	movw	r24, r14
 65e:	39 de       	rcall	.-910    	; 0x2d2 <sendInfo>
 660:	c6 01       	movw	r24, r12
				
				free(cusInfoStr);
 662:	ba d0       	rcall	.+372    	; 0x7d8 <free>
 664:	c7 01       	movw	r24, r14
 666:	b8 d0       	rcall	.+368    	; 0x7d8 <free>
				free(cusInfoBle);
 668:	17 c0       	rjmp	.+46     	; 0x698 <main+0xd8>
 66a:	89 81       	ldd	r24, Y+1	; 0x01
 66c:	83 36       	cpi	r24, 0x63	; 99
		}
		//memset(cardNum, 0, sizeof(cardNum));
		
		#if 1
		/* 상품 정보 조회 및 전송 */
		else if(cardNum[0] == 'c'){
 66e:	a1 f4       	brne	.+40     	; 0x698 <main+0xd8>
 670:	ea 80       	ldd	r14, Y+2	; 0x02
			int pIdx = cardNum[1]-'0';
 672:	f1 2c       	mov	r15, r1
 674:	b0 e3       	ldi	r27, 0x30	; 48
 676:	eb 1a       	sub	r14, r27
 678:	f1 08       	sbc	r15, r1
			char* proInfoStr = getProInfo(pIdx);
 67a:	8e 2d       	mov	r24, r14
 67c:	aa dd       	rcall	.-1196   	; 0x1d2 <getProInfo>
 67e:	5c 01       	movw	r10, r24
			if(proInfoStr == NULL){
				// malloc 실패
			}
			char* stoInfoStr = getBleStock(pIdx);
 680:	8e 2d       	mov	r24, r14
 682:	d9 dd       	rcall	.-1102   	; 0x236 <getBleStock>
 684:	6c 01       	movw	r12, r24
			if(stoInfoStr == NULL){
				// malloc 실패
			}
			calBalance(csIndex, pIdx);
 686:	6e 2d       	mov	r22, r14
 688:	80 2f       	mov	r24, r16
 68a:	3a de       	rcall	.-908    	; 0x300 <calBalance>
 68c:	61 e0       	ldi	r22, 0x01	; 1
			sendInfo(proInfoStr, UART);
 68e:	c5 01       	movw	r24, r10
 690:	20 de       	rcall	.-960    	; 0x2d2 <sendInfo>
 692:	62 e0       	ldi	r22, 0x02	; 2
 694:	c6 01       	movw	r24, r12
			sendInfo(stoInfoStr, BLUETOOTH);
 696:	1d de       	rcall	.-966    	; 0x2d2 <sendInfo>
 698:	fe 01       	movw	r30, r28
 69a:	31 96       	adiw	r30, 0x01	; 1
 69c:	8e e1       	ldi	r24, 0x1E	; 30
			
		}
		memset(cardNum, 0, sizeof(cardNum));
 69e:	df 01       	movw	r26, r30
 6a0:	1d 92       	st	X+, r1
 6a2:	8a 95       	dec	r24
 6a4:	e9 f7       	brne	.-6      	; 0x6a0 <main+0xe0>
 6a6:	ab cf       	rjmp	.-170    	; 0x5fe <main+0x3e>

000006a8 <malloc>:
 6a8:	0f 93       	push	r16
 6aa:	1f 93       	push	r17
		#endif
		
    }
 6ac:	cf 93       	push	r28
 6ae:	df 93       	push	r29
 6b0:	82 30       	cpi	r24, 0x02	; 2
 6b2:	91 05       	cpc	r25, r1
 6b4:	10 f4       	brcc	.+4      	; 0x6ba <malloc+0x12>
 6b6:	82 e0       	ldi	r24, 0x02	; 2
 6b8:	90 e0       	ldi	r25, 0x00	; 0
 6ba:	e0 91 56 03 	lds	r30, 0x0356	; 0x800356 <__flp>
 6be:	f0 91 57 03 	lds	r31, 0x0357	; 0x800357 <__flp+0x1>
 6c2:	20 e0       	ldi	r18, 0x00	; 0
 6c4:	30 e0       	ldi	r19, 0x00	; 0
 6c6:	a0 e0       	ldi	r26, 0x00	; 0
 6c8:	b0 e0       	ldi	r27, 0x00	; 0
 6ca:	30 97       	sbiw	r30, 0x00	; 0
 6cc:	19 f1       	breq	.+70     	; 0x714 <malloc+0x6c>
 6ce:	40 81       	ld	r20, Z
 6d0:	51 81       	ldd	r21, Z+1	; 0x01
 6d2:	02 81       	ldd	r16, Z+2	; 0x02
 6d4:	13 81       	ldd	r17, Z+3	; 0x03
 6d6:	48 17       	cp	r20, r24
 6d8:	59 07       	cpc	r21, r25
 6da:	c8 f0       	brcs	.+50     	; 0x70e <malloc+0x66>
 6dc:	84 17       	cp	r24, r20
 6de:	95 07       	cpc	r25, r21
 6e0:	69 f4       	brne	.+26     	; 0x6fc <malloc+0x54>
 6e2:	10 97       	sbiw	r26, 0x00	; 0
 6e4:	31 f0       	breq	.+12     	; 0x6f2 <malloc+0x4a>
 6e6:	12 96       	adiw	r26, 0x02	; 2
 6e8:	0c 93       	st	X, r16
 6ea:	12 97       	sbiw	r26, 0x02	; 2
 6ec:	13 96       	adiw	r26, 0x03	; 3
 6ee:	1c 93       	st	X, r17
 6f0:	27 c0       	rjmp	.+78     	; 0x740 <malloc+0x98>
 6f2:	00 93 56 03 	sts	0x0356, r16	; 0x800356 <__flp>
 6f6:	10 93 57 03 	sts	0x0357, r17	; 0x800357 <__flp+0x1>
 6fa:	22 c0       	rjmp	.+68     	; 0x740 <malloc+0x98>
 6fc:	21 15       	cp	r18, r1
 6fe:	31 05       	cpc	r19, r1
 700:	19 f0       	breq	.+6      	; 0x708 <malloc+0x60>
 702:	42 17       	cp	r20, r18
 704:	53 07       	cpc	r21, r19
 706:	18 f4       	brcc	.+6      	; 0x70e <malloc+0x66>
 708:	9a 01       	movw	r18, r20
 70a:	bd 01       	movw	r22, r26
 70c:	ef 01       	movw	r28, r30
 70e:	df 01       	movw	r26, r30
 710:	f8 01       	movw	r30, r16
 712:	db cf       	rjmp	.-74     	; 0x6ca <malloc+0x22>
 714:	21 15       	cp	r18, r1
 716:	31 05       	cpc	r19, r1
 718:	f9 f0       	breq	.+62     	; 0x758 <malloc+0xb0>
 71a:	28 1b       	sub	r18, r24
 71c:	39 0b       	sbc	r19, r25
 71e:	24 30       	cpi	r18, 0x04	; 4
 720:	31 05       	cpc	r19, r1
 722:	80 f4       	brcc	.+32     	; 0x744 <malloc+0x9c>
 724:	8a 81       	ldd	r24, Y+2	; 0x02
 726:	9b 81       	ldd	r25, Y+3	; 0x03
 728:	61 15       	cp	r22, r1
 72a:	71 05       	cpc	r23, r1
 72c:	21 f0       	breq	.+8      	; 0x736 <malloc+0x8e>
 72e:	fb 01       	movw	r30, r22
 730:	93 83       	std	Z+3, r25	; 0x03
 732:	82 83       	std	Z+2, r24	; 0x02
 734:	04 c0       	rjmp	.+8      	; 0x73e <malloc+0x96>
 736:	90 93 57 03 	sts	0x0357, r25	; 0x800357 <__flp+0x1>
 73a:	80 93 56 03 	sts	0x0356, r24	; 0x800356 <__flp>
 73e:	fe 01       	movw	r30, r28
 740:	32 96       	adiw	r30, 0x02	; 2
 742:	44 c0       	rjmp	.+136    	; 0x7cc <malloc+0x124>
 744:	fe 01       	movw	r30, r28
 746:	e2 0f       	add	r30, r18
 748:	f3 1f       	adc	r31, r19
 74a:	81 93       	st	Z+, r24
 74c:	91 93       	st	Z+, r25
 74e:	22 50       	subi	r18, 0x02	; 2
 750:	31 09       	sbc	r19, r1
 752:	39 83       	std	Y+1, r19	; 0x01
 754:	28 83       	st	Y, r18
 756:	3a c0       	rjmp	.+116    	; 0x7cc <malloc+0x124>
 758:	20 91 54 03 	lds	r18, 0x0354	; 0x800354 <__brkval>
 75c:	30 91 55 03 	lds	r19, 0x0355	; 0x800355 <__brkval+0x1>
 760:	23 2b       	or	r18, r19
 762:	41 f4       	brne	.+16     	; 0x774 <malloc+0xcc>
 764:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 768:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 76c:	30 93 55 03 	sts	0x0355, r19	; 0x800355 <__brkval+0x1>
 770:	20 93 54 03 	sts	0x0354, r18	; 0x800354 <__brkval>
 774:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 778:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 77c:	21 15       	cp	r18, r1
 77e:	31 05       	cpc	r19, r1
 780:	41 f4       	brne	.+16     	; 0x792 <malloc+0xea>
 782:	2d b7       	in	r18, 0x3d	; 61
 784:	3e b7       	in	r19, 0x3e	; 62
 786:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 78a:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 78e:	24 1b       	sub	r18, r20
 790:	35 0b       	sbc	r19, r21
 792:	e0 91 54 03 	lds	r30, 0x0354	; 0x800354 <__brkval>
 796:	f0 91 55 03 	lds	r31, 0x0355	; 0x800355 <__brkval+0x1>
 79a:	e2 17       	cp	r30, r18
 79c:	f3 07       	cpc	r31, r19
 79e:	a0 f4       	brcc	.+40     	; 0x7c8 <malloc+0x120>
 7a0:	2e 1b       	sub	r18, r30
 7a2:	3f 0b       	sbc	r19, r31
 7a4:	28 17       	cp	r18, r24
 7a6:	39 07       	cpc	r19, r25
 7a8:	78 f0       	brcs	.+30     	; 0x7c8 <malloc+0x120>
 7aa:	ac 01       	movw	r20, r24
 7ac:	4e 5f       	subi	r20, 0xFE	; 254
 7ae:	5f 4f       	sbci	r21, 0xFF	; 255
 7b0:	24 17       	cp	r18, r20
 7b2:	35 07       	cpc	r19, r21
 7b4:	48 f0       	brcs	.+18     	; 0x7c8 <malloc+0x120>
 7b6:	4e 0f       	add	r20, r30
 7b8:	5f 1f       	adc	r21, r31
 7ba:	50 93 55 03 	sts	0x0355, r21	; 0x800355 <__brkval+0x1>
 7be:	40 93 54 03 	sts	0x0354, r20	; 0x800354 <__brkval>
 7c2:	81 93       	st	Z+, r24
 7c4:	91 93       	st	Z+, r25
 7c6:	02 c0       	rjmp	.+4      	; 0x7cc <malloc+0x124>
 7c8:	e0 e0       	ldi	r30, 0x00	; 0
 7ca:	f0 e0       	ldi	r31, 0x00	; 0
 7cc:	cf 01       	movw	r24, r30
 7ce:	df 91       	pop	r29
 7d0:	cf 91       	pop	r28
 7d2:	1f 91       	pop	r17
 7d4:	0f 91       	pop	r16
 7d6:	08 95       	ret

000007d8 <free>:
 7d8:	cf 93       	push	r28
 7da:	df 93       	push	r29
 7dc:	00 97       	sbiw	r24, 0x00	; 0
 7de:	09 f4       	brne	.+2      	; 0x7e2 <free+0xa>
 7e0:	81 c0       	rjmp	.+258    	; 0x8e4 <free+0x10c>
 7e2:	fc 01       	movw	r30, r24
 7e4:	32 97       	sbiw	r30, 0x02	; 2
 7e6:	13 82       	std	Z+3, r1	; 0x03
 7e8:	12 82       	std	Z+2, r1	; 0x02
 7ea:	a0 91 56 03 	lds	r26, 0x0356	; 0x800356 <__flp>
 7ee:	b0 91 57 03 	lds	r27, 0x0357	; 0x800357 <__flp+0x1>
 7f2:	10 97       	sbiw	r26, 0x00	; 0
 7f4:	81 f4       	brne	.+32     	; 0x816 <free+0x3e>
 7f6:	20 81       	ld	r18, Z
 7f8:	31 81       	ldd	r19, Z+1	; 0x01
 7fa:	82 0f       	add	r24, r18
 7fc:	93 1f       	adc	r25, r19
 7fe:	20 91 54 03 	lds	r18, 0x0354	; 0x800354 <__brkval>
 802:	30 91 55 03 	lds	r19, 0x0355	; 0x800355 <__brkval+0x1>
 806:	28 17       	cp	r18, r24
 808:	39 07       	cpc	r19, r25
 80a:	51 f5       	brne	.+84     	; 0x860 <free+0x88>
 80c:	f0 93 55 03 	sts	0x0355, r31	; 0x800355 <__brkval+0x1>
 810:	e0 93 54 03 	sts	0x0354, r30	; 0x800354 <__brkval>
 814:	67 c0       	rjmp	.+206    	; 0x8e4 <free+0x10c>
 816:	ed 01       	movw	r28, r26
 818:	20 e0       	ldi	r18, 0x00	; 0
 81a:	30 e0       	ldi	r19, 0x00	; 0
 81c:	ce 17       	cp	r28, r30
 81e:	df 07       	cpc	r29, r31
 820:	40 f4       	brcc	.+16     	; 0x832 <free+0x5a>
 822:	4a 81       	ldd	r20, Y+2	; 0x02
 824:	5b 81       	ldd	r21, Y+3	; 0x03
 826:	9e 01       	movw	r18, r28
 828:	41 15       	cp	r20, r1
 82a:	51 05       	cpc	r21, r1
 82c:	f1 f0       	breq	.+60     	; 0x86a <free+0x92>
 82e:	ea 01       	movw	r28, r20
 830:	f5 cf       	rjmp	.-22     	; 0x81c <free+0x44>
 832:	d3 83       	std	Z+3, r29	; 0x03
 834:	c2 83       	std	Z+2, r28	; 0x02
 836:	40 81       	ld	r20, Z
 838:	51 81       	ldd	r21, Z+1	; 0x01
 83a:	84 0f       	add	r24, r20
 83c:	95 1f       	adc	r25, r21
 83e:	c8 17       	cp	r28, r24
 840:	d9 07       	cpc	r29, r25
 842:	59 f4       	brne	.+22     	; 0x85a <free+0x82>
 844:	88 81       	ld	r24, Y
 846:	99 81       	ldd	r25, Y+1	; 0x01
 848:	84 0f       	add	r24, r20
 84a:	95 1f       	adc	r25, r21
 84c:	02 96       	adiw	r24, 0x02	; 2
 84e:	91 83       	std	Z+1, r25	; 0x01
 850:	80 83       	st	Z, r24
 852:	8a 81       	ldd	r24, Y+2	; 0x02
 854:	9b 81       	ldd	r25, Y+3	; 0x03
 856:	93 83       	std	Z+3, r25	; 0x03
 858:	82 83       	std	Z+2, r24	; 0x02
 85a:	21 15       	cp	r18, r1
 85c:	31 05       	cpc	r19, r1
 85e:	29 f4       	brne	.+10     	; 0x86a <free+0x92>
 860:	f0 93 57 03 	sts	0x0357, r31	; 0x800357 <__flp+0x1>
 864:	e0 93 56 03 	sts	0x0356, r30	; 0x800356 <__flp>
 868:	3d c0       	rjmp	.+122    	; 0x8e4 <free+0x10c>
 86a:	e9 01       	movw	r28, r18
 86c:	fb 83       	std	Y+3, r31	; 0x03
 86e:	ea 83       	std	Y+2, r30	; 0x02
 870:	49 91       	ld	r20, Y+
 872:	59 91       	ld	r21, Y+
 874:	c4 0f       	add	r28, r20
 876:	d5 1f       	adc	r29, r21
 878:	ec 17       	cp	r30, r28
 87a:	fd 07       	cpc	r31, r29
 87c:	61 f4       	brne	.+24     	; 0x896 <free+0xbe>
 87e:	80 81       	ld	r24, Z
 880:	91 81       	ldd	r25, Z+1	; 0x01
 882:	84 0f       	add	r24, r20
 884:	95 1f       	adc	r25, r21
 886:	02 96       	adiw	r24, 0x02	; 2
 888:	e9 01       	movw	r28, r18
 88a:	99 83       	std	Y+1, r25	; 0x01
 88c:	88 83       	st	Y, r24
 88e:	82 81       	ldd	r24, Z+2	; 0x02
 890:	93 81       	ldd	r25, Z+3	; 0x03
 892:	9b 83       	std	Y+3, r25	; 0x03
 894:	8a 83       	std	Y+2, r24	; 0x02
 896:	e0 e0       	ldi	r30, 0x00	; 0
 898:	f0 e0       	ldi	r31, 0x00	; 0
 89a:	12 96       	adiw	r26, 0x02	; 2
 89c:	8d 91       	ld	r24, X+
 89e:	9c 91       	ld	r25, X
 8a0:	13 97       	sbiw	r26, 0x03	; 3
 8a2:	00 97       	sbiw	r24, 0x00	; 0
 8a4:	19 f0       	breq	.+6      	; 0x8ac <free+0xd4>
 8a6:	fd 01       	movw	r30, r26
 8a8:	dc 01       	movw	r26, r24
 8aa:	f7 cf       	rjmp	.-18     	; 0x89a <free+0xc2>
 8ac:	8d 91       	ld	r24, X+
 8ae:	9c 91       	ld	r25, X
 8b0:	11 97       	sbiw	r26, 0x01	; 1
 8b2:	9d 01       	movw	r18, r26
 8b4:	2e 5f       	subi	r18, 0xFE	; 254
 8b6:	3f 4f       	sbci	r19, 0xFF	; 255
 8b8:	82 0f       	add	r24, r18
 8ba:	93 1f       	adc	r25, r19
 8bc:	20 91 54 03 	lds	r18, 0x0354	; 0x800354 <__brkval>
 8c0:	30 91 55 03 	lds	r19, 0x0355	; 0x800355 <__brkval+0x1>
 8c4:	28 17       	cp	r18, r24
 8c6:	39 07       	cpc	r19, r25
 8c8:	69 f4       	brne	.+26     	; 0x8e4 <free+0x10c>
 8ca:	30 97       	sbiw	r30, 0x00	; 0
 8cc:	29 f4       	brne	.+10     	; 0x8d8 <free+0x100>
 8ce:	10 92 57 03 	sts	0x0357, r1	; 0x800357 <__flp+0x1>
 8d2:	10 92 56 03 	sts	0x0356, r1	; 0x800356 <__flp>
 8d6:	02 c0       	rjmp	.+4      	; 0x8dc <free+0x104>
 8d8:	13 82       	std	Z+3, r1	; 0x03
 8da:	12 82       	std	Z+2, r1	; 0x02
 8dc:	b0 93 55 03 	sts	0x0355, r27	; 0x800355 <__brkval+0x1>
 8e0:	a0 93 54 03 	sts	0x0354, r26	; 0x800354 <__brkval>
 8e4:	df 91       	pop	r29
 8e6:	cf 91       	pop	r28
 8e8:	08 95       	ret

000008ea <strcmp>:
 8ea:	fb 01       	movw	r30, r22
 8ec:	dc 01       	movw	r26, r24
 8ee:	8d 91       	ld	r24, X+
 8f0:	01 90       	ld	r0, Z+
 8f2:	80 19       	sub	r24, r0
 8f4:	01 10       	cpse	r0, r1
 8f6:	d9 f3       	breq	.-10     	; 0x8ee <strcmp+0x4>
 8f8:	99 0b       	sbc	r25, r25
 8fa:	08 95       	ret

000008fc <sprintf>:
 8fc:	0f 93       	push	r16
 8fe:	1f 93       	push	r17
 900:	cf 93       	push	r28
 902:	df 93       	push	r29
 904:	cd b7       	in	r28, 0x3d	; 61
 906:	de b7       	in	r29, 0x3e	; 62
 908:	2e 97       	sbiw	r28, 0x0e	; 14
 90a:	0f b6       	in	r0, 0x3f	; 63
 90c:	f8 94       	cli
 90e:	de bf       	out	0x3e, r29	; 62
 910:	0f be       	out	0x3f, r0	; 63
 912:	cd bf       	out	0x3d, r28	; 61
 914:	0d 89       	ldd	r16, Y+21	; 0x15
 916:	1e 89       	ldd	r17, Y+22	; 0x16
 918:	86 e0       	ldi	r24, 0x06	; 6
 91a:	8c 83       	std	Y+4, r24	; 0x04
 91c:	1a 83       	std	Y+2, r17	; 0x02
 91e:	09 83       	std	Y+1, r16	; 0x01
 920:	8f ef       	ldi	r24, 0xFF	; 255
 922:	9f e7       	ldi	r25, 0x7F	; 127
 924:	9e 83       	std	Y+6, r25	; 0x06
 926:	8d 83       	std	Y+5, r24	; 0x05
 928:	ae 01       	movw	r20, r28
 92a:	47 5e       	subi	r20, 0xE7	; 231
 92c:	5f 4f       	sbci	r21, 0xFF	; 255
 92e:	6f 89       	ldd	r22, Y+23	; 0x17
 930:	78 8d       	ldd	r23, Y+24	; 0x18
 932:	ce 01       	movw	r24, r28
 934:	01 96       	adiw	r24, 0x01	; 1
 936:	10 d0       	rcall	.+32     	; 0x958 <vfprintf>
 938:	ef 81       	ldd	r30, Y+7	; 0x07
 93a:	f8 85       	ldd	r31, Y+8	; 0x08
 93c:	e0 0f       	add	r30, r16
 93e:	f1 1f       	adc	r31, r17
 940:	10 82       	st	Z, r1
 942:	2e 96       	adiw	r28, 0x0e	; 14
 944:	0f b6       	in	r0, 0x3f	; 63
 946:	f8 94       	cli
 948:	de bf       	out	0x3e, r29	; 62
 94a:	0f be       	out	0x3f, r0	; 63
 94c:	cd bf       	out	0x3d, r28	; 61
 94e:	df 91       	pop	r29
 950:	cf 91       	pop	r28
 952:	1f 91       	pop	r17
 954:	0f 91       	pop	r16
 956:	08 95       	ret

00000958 <vfprintf>:
 958:	2f 92       	push	r2
 95a:	3f 92       	push	r3
 95c:	4f 92       	push	r4
 95e:	5f 92       	push	r5
 960:	6f 92       	push	r6
 962:	7f 92       	push	r7
 964:	8f 92       	push	r8
 966:	9f 92       	push	r9
 968:	af 92       	push	r10
 96a:	bf 92       	push	r11
 96c:	cf 92       	push	r12
 96e:	df 92       	push	r13
 970:	ef 92       	push	r14
 972:	ff 92       	push	r15
 974:	0f 93       	push	r16
 976:	1f 93       	push	r17
 978:	cf 93       	push	r28
 97a:	df 93       	push	r29
 97c:	cd b7       	in	r28, 0x3d	; 61
 97e:	de b7       	in	r29, 0x3e	; 62
 980:	2b 97       	sbiw	r28, 0x0b	; 11
 982:	0f b6       	in	r0, 0x3f	; 63
 984:	f8 94       	cli
 986:	de bf       	out	0x3e, r29	; 62
 988:	0f be       	out	0x3f, r0	; 63
 98a:	cd bf       	out	0x3d, r28	; 61
 98c:	6c 01       	movw	r12, r24
 98e:	7b 01       	movw	r14, r22
 990:	8a 01       	movw	r16, r20
 992:	fc 01       	movw	r30, r24
 994:	17 82       	std	Z+7, r1	; 0x07
 996:	16 82       	std	Z+6, r1	; 0x06
 998:	83 81       	ldd	r24, Z+3	; 0x03
 99a:	81 ff       	sbrs	r24, 1
 99c:	bf c1       	rjmp	.+894    	; 0xd1c <vfprintf+0x3c4>
 99e:	ce 01       	movw	r24, r28
 9a0:	01 96       	adiw	r24, 0x01	; 1
 9a2:	3c 01       	movw	r6, r24
 9a4:	f6 01       	movw	r30, r12
 9a6:	93 81       	ldd	r25, Z+3	; 0x03
 9a8:	f7 01       	movw	r30, r14
 9aa:	93 fd       	sbrc	r25, 3
 9ac:	85 91       	lpm	r24, Z+
 9ae:	93 ff       	sbrs	r25, 3
 9b0:	81 91       	ld	r24, Z+
 9b2:	7f 01       	movw	r14, r30
 9b4:	88 23       	and	r24, r24
 9b6:	09 f4       	brne	.+2      	; 0x9ba <vfprintf+0x62>
 9b8:	ad c1       	rjmp	.+858    	; 0xd14 <vfprintf+0x3bc>
 9ba:	85 32       	cpi	r24, 0x25	; 37
 9bc:	39 f4       	brne	.+14     	; 0x9cc <vfprintf+0x74>
 9be:	93 fd       	sbrc	r25, 3
 9c0:	85 91       	lpm	r24, Z+
 9c2:	93 ff       	sbrs	r25, 3
 9c4:	81 91       	ld	r24, Z+
 9c6:	7f 01       	movw	r14, r30
 9c8:	85 32       	cpi	r24, 0x25	; 37
 9ca:	21 f4       	brne	.+8      	; 0x9d4 <vfprintf+0x7c>
 9cc:	b6 01       	movw	r22, r12
 9ce:	90 e0       	ldi	r25, 0x00	; 0
 9d0:	d6 d1       	rcall	.+940    	; 0xd7e <fputc>
 9d2:	e8 cf       	rjmp	.-48     	; 0x9a4 <vfprintf+0x4c>
 9d4:	91 2c       	mov	r9, r1
 9d6:	21 2c       	mov	r2, r1
 9d8:	31 2c       	mov	r3, r1
 9da:	ff e1       	ldi	r31, 0x1F	; 31
 9dc:	f3 15       	cp	r31, r3
 9de:	d8 f0       	brcs	.+54     	; 0xa16 <vfprintf+0xbe>
 9e0:	8b 32       	cpi	r24, 0x2B	; 43
 9e2:	79 f0       	breq	.+30     	; 0xa02 <vfprintf+0xaa>
 9e4:	38 f4       	brcc	.+14     	; 0x9f4 <vfprintf+0x9c>
 9e6:	80 32       	cpi	r24, 0x20	; 32
 9e8:	79 f0       	breq	.+30     	; 0xa08 <vfprintf+0xb0>
 9ea:	83 32       	cpi	r24, 0x23	; 35
 9ec:	a1 f4       	brne	.+40     	; 0xa16 <vfprintf+0xbe>
 9ee:	23 2d       	mov	r18, r3
 9f0:	20 61       	ori	r18, 0x10	; 16
 9f2:	1d c0       	rjmp	.+58     	; 0xa2e <vfprintf+0xd6>
 9f4:	8d 32       	cpi	r24, 0x2D	; 45
 9f6:	61 f0       	breq	.+24     	; 0xa10 <vfprintf+0xb8>
 9f8:	80 33       	cpi	r24, 0x30	; 48
 9fa:	69 f4       	brne	.+26     	; 0xa16 <vfprintf+0xbe>
 9fc:	23 2d       	mov	r18, r3
 9fe:	21 60       	ori	r18, 0x01	; 1
 a00:	16 c0       	rjmp	.+44     	; 0xa2e <vfprintf+0xd6>
 a02:	83 2d       	mov	r24, r3
 a04:	82 60       	ori	r24, 0x02	; 2
 a06:	38 2e       	mov	r3, r24
 a08:	e3 2d       	mov	r30, r3
 a0a:	e4 60       	ori	r30, 0x04	; 4
 a0c:	3e 2e       	mov	r3, r30
 a0e:	2a c0       	rjmp	.+84     	; 0xa64 <vfprintf+0x10c>
 a10:	f3 2d       	mov	r31, r3
 a12:	f8 60       	ori	r31, 0x08	; 8
 a14:	1d c0       	rjmp	.+58     	; 0xa50 <vfprintf+0xf8>
 a16:	37 fc       	sbrc	r3, 7
 a18:	2d c0       	rjmp	.+90     	; 0xa74 <vfprintf+0x11c>
 a1a:	20 ed       	ldi	r18, 0xD0	; 208
 a1c:	28 0f       	add	r18, r24
 a1e:	2a 30       	cpi	r18, 0x0A	; 10
 a20:	40 f0       	brcs	.+16     	; 0xa32 <vfprintf+0xda>
 a22:	8e 32       	cpi	r24, 0x2E	; 46
 a24:	b9 f4       	brne	.+46     	; 0xa54 <vfprintf+0xfc>
 a26:	36 fc       	sbrc	r3, 6
 a28:	75 c1       	rjmp	.+746    	; 0xd14 <vfprintf+0x3bc>
 a2a:	23 2d       	mov	r18, r3
 a2c:	20 64       	ori	r18, 0x40	; 64
 a2e:	32 2e       	mov	r3, r18
 a30:	19 c0       	rjmp	.+50     	; 0xa64 <vfprintf+0x10c>
 a32:	36 fe       	sbrs	r3, 6
 a34:	06 c0       	rjmp	.+12     	; 0xa42 <vfprintf+0xea>
 a36:	8a e0       	ldi	r24, 0x0A	; 10
 a38:	98 9e       	mul	r9, r24
 a3a:	20 0d       	add	r18, r0
 a3c:	11 24       	eor	r1, r1
 a3e:	92 2e       	mov	r9, r18
 a40:	11 c0       	rjmp	.+34     	; 0xa64 <vfprintf+0x10c>
 a42:	ea e0       	ldi	r30, 0x0A	; 10
 a44:	2e 9e       	mul	r2, r30
 a46:	20 0d       	add	r18, r0
 a48:	11 24       	eor	r1, r1
 a4a:	22 2e       	mov	r2, r18
 a4c:	f3 2d       	mov	r31, r3
 a4e:	f0 62       	ori	r31, 0x20	; 32
 a50:	3f 2e       	mov	r3, r31
 a52:	08 c0       	rjmp	.+16     	; 0xa64 <vfprintf+0x10c>
 a54:	8c 36       	cpi	r24, 0x6C	; 108
 a56:	21 f4       	brne	.+8      	; 0xa60 <vfprintf+0x108>
 a58:	83 2d       	mov	r24, r3
 a5a:	80 68       	ori	r24, 0x80	; 128
 a5c:	38 2e       	mov	r3, r24
 a5e:	02 c0       	rjmp	.+4      	; 0xa64 <vfprintf+0x10c>
 a60:	88 36       	cpi	r24, 0x68	; 104
 a62:	41 f4       	brne	.+16     	; 0xa74 <vfprintf+0x11c>
 a64:	f7 01       	movw	r30, r14
 a66:	93 fd       	sbrc	r25, 3
 a68:	85 91       	lpm	r24, Z+
 a6a:	93 ff       	sbrs	r25, 3
 a6c:	81 91       	ld	r24, Z+
 a6e:	7f 01       	movw	r14, r30
 a70:	81 11       	cpse	r24, r1
 a72:	b3 cf       	rjmp	.-154    	; 0x9da <vfprintf+0x82>
 a74:	98 2f       	mov	r25, r24
 a76:	9f 7d       	andi	r25, 0xDF	; 223
 a78:	95 54       	subi	r25, 0x45	; 69
 a7a:	93 30       	cpi	r25, 0x03	; 3
 a7c:	28 f4       	brcc	.+10     	; 0xa88 <vfprintf+0x130>
 a7e:	0c 5f       	subi	r16, 0xFC	; 252
 a80:	1f 4f       	sbci	r17, 0xFF	; 255
 a82:	9f e3       	ldi	r25, 0x3F	; 63
 a84:	99 83       	std	Y+1, r25	; 0x01
 a86:	0d c0       	rjmp	.+26     	; 0xaa2 <vfprintf+0x14a>
 a88:	83 36       	cpi	r24, 0x63	; 99
 a8a:	31 f0       	breq	.+12     	; 0xa98 <vfprintf+0x140>
 a8c:	83 37       	cpi	r24, 0x73	; 115
 a8e:	71 f0       	breq	.+28     	; 0xaac <vfprintf+0x154>
 a90:	83 35       	cpi	r24, 0x53	; 83
 a92:	09 f0       	breq	.+2      	; 0xa96 <vfprintf+0x13e>
 a94:	55 c0       	rjmp	.+170    	; 0xb40 <vfprintf+0x1e8>
 a96:	20 c0       	rjmp	.+64     	; 0xad8 <vfprintf+0x180>
 a98:	f8 01       	movw	r30, r16
 a9a:	80 81       	ld	r24, Z
 a9c:	89 83       	std	Y+1, r24	; 0x01
 a9e:	0e 5f       	subi	r16, 0xFE	; 254
 aa0:	1f 4f       	sbci	r17, 0xFF	; 255
 aa2:	88 24       	eor	r8, r8
 aa4:	83 94       	inc	r8
 aa6:	91 2c       	mov	r9, r1
 aa8:	53 01       	movw	r10, r6
 aaa:	12 c0       	rjmp	.+36     	; 0xad0 <vfprintf+0x178>
 aac:	28 01       	movw	r4, r16
 aae:	f2 e0       	ldi	r31, 0x02	; 2
 ab0:	4f 0e       	add	r4, r31
 ab2:	51 1c       	adc	r5, r1
 ab4:	f8 01       	movw	r30, r16
 ab6:	a0 80       	ld	r10, Z
 ab8:	b1 80       	ldd	r11, Z+1	; 0x01
 aba:	36 fe       	sbrs	r3, 6
 abc:	03 c0       	rjmp	.+6      	; 0xac4 <vfprintf+0x16c>
 abe:	69 2d       	mov	r22, r9
 ac0:	70 e0       	ldi	r23, 0x00	; 0
 ac2:	02 c0       	rjmp	.+4      	; 0xac8 <vfprintf+0x170>
 ac4:	6f ef       	ldi	r22, 0xFF	; 255
 ac6:	7f ef       	ldi	r23, 0xFF	; 255
 ac8:	c5 01       	movw	r24, r10
 aca:	4e d1       	rcall	.+668    	; 0xd68 <strnlen>
 acc:	4c 01       	movw	r8, r24
 ace:	82 01       	movw	r16, r4
 ad0:	f3 2d       	mov	r31, r3
 ad2:	ff 77       	andi	r31, 0x7F	; 127
 ad4:	3f 2e       	mov	r3, r31
 ad6:	15 c0       	rjmp	.+42     	; 0xb02 <vfprintf+0x1aa>
 ad8:	28 01       	movw	r4, r16
 ada:	22 e0       	ldi	r18, 0x02	; 2
 adc:	42 0e       	add	r4, r18
 ade:	51 1c       	adc	r5, r1
 ae0:	f8 01       	movw	r30, r16
 ae2:	a0 80       	ld	r10, Z
 ae4:	b1 80       	ldd	r11, Z+1	; 0x01
 ae6:	36 fe       	sbrs	r3, 6
 ae8:	03 c0       	rjmp	.+6      	; 0xaf0 <vfprintf+0x198>
 aea:	69 2d       	mov	r22, r9
 aec:	70 e0       	ldi	r23, 0x00	; 0
 aee:	02 c0       	rjmp	.+4      	; 0xaf4 <vfprintf+0x19c>
 af0:	6f ef       	ldi	r22, 0xFF	; 255
 af2:	7f ef       	ldi	r23, 0xFF	; 255
 af4:	c5 01       	movw	r24, r10
 af6:	2d d1       	rcall	.+602    	; 0xd52 <strnlen_P>
 af8:	4c 01       	movw	r8, r24
 afa:	f3 2d       	mov	r31, r3
 afc:	f0 68       	ori	r31, 0x80	; 128
 afe:	3f 2e       	mov	r3, r31
 b00:	82 01       	movw	r16, r4
 b02:	33 fc       	sbrc	r3, 3
 b04:	19 c0       	rjmp	.+50     	; 0xb38 <vfprintf+0x1e0>
 b06:	82 2d       	mov	r24, r2
 b08:	90 e0       	ldi	r25, 0x00	; 0
 b0a:	88 16       	cp	r8, r24
 b0c:	99 06       	cpc	r9, r25
 b0e:	a0 f4       	brcc	.+40     	; 0xb38 <vfprintf+0x1e0>
 b10:	b6 01       	movw	r22, r12
 b12:	80 e2       	ldi	r24, 0x20	; 32
 b14:	90 e0       	ldi	r25, 0x00	; 0
 b16:	33 d1       	rcall	.+614    	; 0xd7e <fputc>
 b18:	2a 94       	dec	r2
 b1a:	f5 cf       	rjmp	.-22     	; 0xb06 <vfprintf+0x1ae>
 b1c:	f5 01       	movw	r30, r10
 b1e:	37 fc       	sbrc	r3, 7
 b20:	85 91       	lpm	r24, Z+
 b22:	37 fe       	sbrs	r3, 7
 b24:	81 91       	ld	r24, Z+
 b26:	5f 01       	movw	r10, r30
 b28:	b6 01       	movw	r22, r12
 b2a:	90 e0       	ldi	r25, 0x00	; 0
 b2c:	28 d1       	rcall	.+592    	; 0xd7e <fputc>
 b2e:	21 10       	cpse	r2, r1
 b30:	2a 94       	dec	r2
 b32:	21 e0       	ldi	r18, 0x01	; 1
 b34:	82 1a       	sub	r8, r18
 b36:	91 08       	sbc	r9, r1
 b38:	81 14       	cp	r8, r1
 b3a:	91 04       	cpc	r9, r1
 b3c:	79 f7       	brne	.-34     	; 0xb1c <vfprintf+0x1c4>
 b3e:	e1 c0       	rjmp	.+450    	; 0xd02 <vfprintf+0x3aa>
 b40:	84 36       	cpi	r24, 0x64	; 100
 b42:	11 f0       	breq	.+4      	; 0xb48 <vfprintf+0x1f0>
 b44:	89 36       	cpi	r24, 0x69	; 105
 b46:	39 f5       	brne	.+78     	; 0xb96 <vfprintf+0x23e>
 b48:	f8 01       	movw	r30, r16
 b4a:	37 fe       	sbrs	r3, 7
 b4c:	07 c0       	rjmp	.+14     	; 0xb5c <vfprintf+0x204>
 b4e:	60 81       	ld	r22, Z
 b50:	71 81       	ldd	r23, Z+1	; 0x01
 b52:	82 81       	ldd	r24, Z+2	; 0x02
 b54:	93 81       	ldd	r25, Z+3	; 0x03
 b56:	0c 5f       	subi	r16, 0xFC	; 252
 b58:	1f 4f       	sbci	r17, 0xFF	; 255
 b5a:	08 c0       	rjmp	.+16     	; 0xb6c <vfprintf+0x214>
 b5c:	60 81       	ld	r22, Z
 b5e:	71 81       	ldd	r23, Z+1	; 0x01
 b60:	07 2e       	mov	r0, r23
 b62:	00 0c       	add	r0, r0
 b64:	88 0b       	sbc	r24, r24
 b66:	99 0b       	sbc	r25, r25
 b68:	0e 5f       	subi	r16, 0xFE	; 254
 b6a:	1f 4f       	sbci	r17, 0xFF	; 255
 b6c:	f3 2d       	mov	r31, r3
 b6e:	ff 76       	andi	r31, 0x6F	; 111
 b70:	3f 2e       	mov	r3, r31
 b72:	97 ff       	sbrs	r25, 7
 b74:	09 c0       	rjmp	.+18     	; 0xb88 <vfprintf+0x230>
 b76:	90 95       	com	r25
 b78:	80 95       	com	r24
 b7a:	70 95       	com	r23
 b7c:	61 95       	neg	r22
 b7e:	7f 4f       	sbci	r23, 0xFF	; 255
 b80:	8f 4f       	sbci	r24, 0xFF	; 255
 b82:	9f 4f       	sbci	r25, 0xFF	; 255
 b84:	f0 68       	ori	r31, 0x80	; 128
 b86:	3f 2e       	mov	r3, r31
 b88:	2a e0       	ldi	r18, 0x0A	; 10
 b8a:	30 e0       	ldi	r19, 0x00	; 0
 b8c:	a3 01       	movw	r20, r6
 b8e:	33 d1       	rcall	.+614    	; 0xdf6 <__ultoa_invert>
 b90:	88 2e       	mov	r8, r24
 b92:	86 18       	sub	r8, r6
 b94:	44 c0       	rjmp	.+136    	; 0xc1e <vfprintf+0x2c6>
 b96:	85 37       	cpi	r24, 0x75	; 117
 b98:	31 f4       	brne	.+12     	; 0xba6 <vfprintf+0x24e>
 b9a:	23 2d       	mov	r18, r3
 b9c:	2f 7e       	andi	r18, 0xEF	; 239
 b9e:	b2 2e       	mov	r11, r18
 ba0:	2a e0       	ldi	r18, 0x0A	; 10
 ba2:	30 e0       	ldi	r19, 0x00	; 0
 ba4:	25 c0       	rjmp	.+74     	; 0xbf0 <vfprintf+0x298>
 ba6:	93 2d       	mov	r25, r3
 ba8:	99 7f       	andi	r25, 0xF9	; 249
 baa:	b9 2e       	mov	r11, r25
 bac:	8f 36       	cpi	r24, 0x6F	; 111
 bae:	c1 f0       	breq	.+48     	; 0xbe0 <vfprintf+0x288>
 bb0:	18 f4       	brcc	.+6      	; 0xbb8 <vfprintf+0x260>
 bb2:	88 35       	cpi	r24, 0x58	; 88
 bb4:	79 f0       	breq	.+30     	; 0xbd4 <vfprintf+0x27c>
 bb6:	ae c0       	rjmp	.+348    	; 0xd14 <vfprintf+0x3bc>
 bb8:	80 37       	cpi	r24, 0x70	; 112
 bba:	19 f0       	breq	.+6      	; 0xbc2 <vfprintf+0x26a>
 bbc:	88 37       	cpi	r24, 0x78	; 120
 bbe:	21 f0       	breq	.+8      	; 0xbc8 <vfprintf+0x270>
 bc0:	a9 c0       	rjmp	.+338    	; 0xd14 <vfprintf+0x3bc>
 bc2:	e9 2f       	mov	r30, r25
 bc4:	e0 61       	ori	r30, 0x10	; 16
 bc6:	be 2e       	mov	r11, r30
 bc8:	b4 fe       	sbrs	r11, 4
 bca:	0d c0       	rjmp	.+26     	; 0xbe6 <vfprintf+0x28e>
 bcc:	fb 2d       	mov	r31, r11
 bce:	f4 60       	ori	r31, 0x04	; 4
 bd0:	bf 2e       	mov	r11, r31
 bd2:	09 c0       	rjmp	.+18     	; 0xbe6 <vfprintf+0x28e>
 bd4:	34 fe       	sbrs	r3, 4
 bd6:	0a c0       	rjmp	.+20     	; 0xbec <vfprintf+0x294>
 bd8:	29 2f       	mov	r18, r25
 bda:	26 60       	ori	r18, 0x06	; 6
 bdc:	b2 2e       	mov	r11, r18
 bde:	06 c0       	rjmp	.+12     	; 0xbec <vfprintf+0x294>
 be0:	28 e0       	ldi	r18, 0x08	; 8
 be2:	30 e0       	ldi	r19, 0x00	; 0
 be4:	05 c0       	rjmp	.+10     	; 0xbf0 <vfprintf+0x298>
 be6:	20 e1       	ldi	r18, 0x10	; 16
 be8:	30 e0       	ldi	r19, 0x00	; 0
 bea:	02 c0       	rjmp	.+4      	; 0xbf0 <vfprintf+0x298>
 bec:	20 e1       	ldi	r18, 0x10	; 16
 bee:	32 e0       	ldi	r19, 0x02	; 2
 bf0:	f8 01       	movw	r30, r16
 bf2:	b7 fe       	sbrs	r11, 7
 bf4:	07 c0       	rjmp	.+14     	; 0xc04 <vfprintf+0x2ac>
 bf6:	60 81       	ld	r22, Z
 bf8:	71 81       	ldd	r23, Z+1	; 0x01
 bfa:	82 81       	ldd	r24, Z+2	; 0x02
 bfc:	93 81       	ldd	r25, Z+3	; 0x03
 bfe:	0c 5f       	subi	r16, 0xFC	; 252
 c00:	1f 4f       	sbci	r17, 0xFF	; 255
 c02:	06 c0       	rjmp	.+12     	; 0xc10 <vfprintf+0x2b8>
 c04:	60 81       	ld	r22, Z
 c06:	71 81       	ldd	r23, Z+1	; 0x01
 c08:	80 e0       	ldi	r24, 0x00	; 0
 c0a:	90 e0       	ldi	r25, 0x00	; 0
 c0c:	0e 5f       	subi	r16, 0xFE	; 254
 c0e:	1f 4f       	sbci	r17, 0xFF	; 255
 c10:	a3 01       	movw	r20, r6
 c12:	f1 d0       	rcall	.+482    	; 0xdf6 <__ultoa_invert>
 c14:	88 2e       	mov	r8, r24
 c16:	86 18       	sub	r8, r6
 c18:	fb 2d       	mov	r31, r11
 c1a:	ff 77       	andi	r31, 0x7F	; 127
 c1c:	3f 2e       	mov	r3, r31
 c1e:	36 fe       	sbrs	r3, 6
 c20:	0d c0       	rjmp	.+26     	; 0xc3c <vfprintf+0x2e4>
 c22:	23 2d       	mov	r18, r3
 c24:	2e 7f       	andi	r18, 0xFE	; 254
 c26:	a2 2e       	mov	r10, r18
 c28:	89 14       	cp	r8, r9
 c2a:	58 f4       	brcc	.+22     	; 0xc42 <vfprintf+0x2ea>
 c2c:	34 fe       	sbrs	r3, 4
 c2e:	0b c0       	rjmp	.+22     	; 0xc46 <vfprintf+0x2ee>
 c30:	32 fc       	sbrc	r3, 2
 c32:	09 c0       	rjmp	.+18     	; 0xc46 <vfprintf+0x2ee>
 c34:	83 2d       	mov	r24, r3
 c36:	8e 7e       	andi	r24, 0xEE	; 238
 c38:	a8 2e       	mov	r10, r24
 c3a:	05 c0       	rjmp	.+10     	; 0xc46 <vfprintf+0x2ee>
 c3c:	b8 2c       	mov	r11, r8
 c3e:	a3 2c       	mov	r10, r3
 c40:	03 c0       	rjmp	.+6      	; 0xc48 <vfprintf+0x2f0>
 c42:	b8 2c       	mov	r11, r8
 c44:	01 c0       	rjmp	.+2      	; 0xc48 <vfprintf+0x2f0>
 c46:	b9 2c       	mov	r11, r9
 c48:	a4 fe       	sbrs	r10, 4
 c4a:	0f c0       	rjmp	.+30     	; 0xc6a <vfprintf+0x312>
 c4c:	fe 01       	movw	r30, r28
 c4e:	e8 0d       	add	r30, r8
 c50:	f1 1d       	adc	r31, r1
 c52:	80 81       	ld	r24, Z
 c54:	80 33       	cpi	r24, 0x30	; 48
 c56:	21 f4       	brne	.+8      	; 0xc60 <vfprintf+0x308>
 c58:	9a 2d       	mov	r25, r10
 c5a:	99 7e       	andi	r25, 0xE9	; 233
 c5c:	a9 2e       	mov	r10, r25
 c5e:	09 c0       	rjmp	.+18     	; 0xc72 <vfprintf+0x31a>
 c60:	a2 fe       	sbrs	r10, 2
 c62:	06 c0       	rjmp	.+12     	; 0xc70 <vfprintf+0x318>
 c64:	b3 94       	inc	r11
 c66:	b3 94       	inc	r11
 c68:	04 c0       	rjmp	.+8      	; 0xc72 <vfprintf+0x31a>
 c6a:	8a 2d       	mov	r24, r10
 c6c:	86 78       	andi	r24, 0x86	; 134
 c6e:	09 f0       	breq	.+2      	; 0xc72 <vfprintf+0x31a>
 c70:	b3 94       	inc	r11
 c72:	a3 fc       	sbrc	r10, 3
 c74:	10 c0       	rjmp	.+32     	; 0xc96 <vfprintf+0x33e>
 c76:	a0 fe       	sbrs	r10, 0
 c78:	06 c0       	rjmp	.+12     	; 0xc86 <vfprintf+0x32e>
 c7a:	b2 14       	cp	r11, r2
 c7c:	80 f4       	brcc	.+32     	; 0xc9e <vfprintf+0x346>
 c7e:	28 0c       	add	r2, r8
 c80:	92 2c       	mov	r9, r2
 c82:	9b 18       	sub	r9, r11
 c84:	0d c0       	rjmp	.+26     	; 0xca0 <vfprintf+0x348>
 c86:	b2 14       	cp	r11, r2
 c88:	58 f4       	brcc	.+22     	; 0xca0 <vfprintf+0x348>
 c8a:	b6 01       	movw	r22, r12
 c8c:	80 e2       	ldi	r24, 0x20	; 32
 c8e:	90 e0       	ldi	r25, 0x00	; 0
 c90:	76 d0       	rcall	.+236    	; 0xd7e <fputc>
 c92:	b3 94       	inc	r11
 c94:	f8 cf       	rjmp	.-16     	; 0xc86 <vfprintf+0x32e>
 c96:	b2 14       	cp	r11, r2
 c98:	18 f4       	brcc	.+6      	; 0xca0 <vfprintf+0x348>
 c9a:	2b 18       	sub	r2, r11
 c9c:	02 c0       	rjmp	.+4      	; 0xca2 <vfprintf+0x34a>
 c9e:	98 2c       	mov	r9, r8
 ca0:	21 2c       	mov	r2, r1
 ca2:	a4 fe       	sbrs	r10, 4
 ca4:	0f c0       	rjmp	.+30     	; 0xcc4 <vfprintf+0x36c>
 ca6:	b6 01       	movw	r22, r12
 ca8:	80 e3       	ldi	r24, 0x30	; 48
 caa:	90 e0       	ldi	r25, 0x00	; 0
 cac:	68 d0       	rcall	.+208    	; 0xd7e <fputc>
 cae:	a2 fe       	sbrs	r10, 2
 cb0:	16 c0       	rjmp	.+44     	; 0xcde <vfprintf+0x386>
 cb2:	a1 fc       	sbrc	r10, 1
 cb4:	03 c0       	rjmp	.+6      	; 0xcbc <vfprintf+0x364>
 cb6:	88 e7       	ldi	r24, 0x78	; 120
 cb8:	90 e0       	ldi	r25, 0x00	; 0
 cba:	02 c0       	rjmp	.+4      	; 0xcc0 <vfprintf+0x368>
 cbc:	88 e5       	ldi	r24, 0x58	; 88
 cbe:	90 e0       	ldi	r25, 0x00	; 0
 cc0:	b6 01       	movw	r22, r12
 cc2:	0c c0       	rjmp	.+24     	; 0xcdc <vfprintf+0x384>
 cc4:	8a 2d       	mov	r24, r10
 cc6:	86 78       	andi	r24, 0x86	; 134
 cc8:	51 f0       	breq	.+20     	; 0xcde <vfprintf+0x386>
 cca:	a1 fe       	sbrs	r10, 1
 ccc:	02 c0       	rjmp	.+4      	; 0xcd2 <vfprintf+0x37a>
 cce:	8b e2       	ldi	r24, 0x2B	; 43
 cd0:	01 c0       	rjmp	.+2      	; 0xcd4 <vfprintf+0x37c>
 cd2:	80 e2       	ldi	r24, 0x20	; 32
 cd4:	a7 fc       	sbrc	r10, 7
 cd6:	8d e2       	ldi	r24, 0x2D	; 45
 cd8:	b6 01       	movw	r22, r12
 cda:	90 e0       	ldi	r25, 0x00	; 0
 cdc:	50 d0       	rcall	.+160    	; 0xd7e <fputc>
 cde:	89 14       	cp	r8, r9
 ce0:	30 f4       	brcc	.+12     	; 0xcee <vfprintf+0x396>
 ce2:	b6 01       	movw	r22, r12
 ce4:	80 e3       	ldi	r24, 0x30	; 48
 ce6:	90 e0       	ldi	r25, 0x00	; 0
 ce8:	4a d0       	rcall	.+148    	; 0xd7e <fputc>
 cea:	9a 94       	dec	r9
 cec:	f8 cf       	rjmp	.-16     	; 0xcde <vfprintf+0x386>
 cee:	8a 94       	dec	r8
 cf0:	f3 01       	movw	r30, r6
 cf2:	e8 0d       	add	r30, r8
 cf4:	f1 1d       	adc	r31, r1
 cf6:	80 81       	ld	r24, Z
 cf8:	b6 01       	movw	r22, r12
 cfa:	90 e0       	ldi	r25, 0x00	; 0
 cfc:	40 d0       	rcall	.+128    	; 0xd7e <fputc>
 cfe:	81 10       	cpse	r8, r1
 d00:	f6 cf       	rjmp	.-20     	; 0xcee <vfprintf+0x396>
 d02:	22 20       	and	r2, r2
 d04:	09 f4       	brne	.+2      	; 0xd08 <vfprintf+0x3b0>
 d06:	4e ce       	rjmp	.-868    	; 0x9a4 <vfprintf+0x4c>
 d08:	b6 01       	movw	r22, r12
 d0a:	80 e2       	ldi	r24, 0x20	; 32
 d0c:	90 e0       	ldi	r25, 0x00	; 0
 d0e:	37 d0       	rcall	.+110    	; 0xd7e <fputc>
 d10:	2a 94       	dec	r2
 d12:	f7 cf       	rjmp	.-18     	; 0xd02 <vfprintf+0x3aa>
 d14:	f6 01       	movw	r30, r12
 d16:	86 81       	ldd	r24, Z+6	; 0x06
 d18:	97 81       	ldd	r25, Z+7	; 0x07
 d1a:	02 c0       	rjmp	.+4      	; 0xd20 <vfprintf+0x3c8>
 d1c:	8f ef       	ldi	r24, 0xFF	; 255
 d1e:	9f ef       	ldi	r25, 0xFF	; 255
 d20:	2b 96       	adiw	r28, 0x0b	; 11
 d22:	0f b6       	in	r0, 0x3f	; 63
 d24:	f8 94       	cli
 d26:	de bf       	out	0x3e, r29	; 62
 d28:	0f be       	out	0x3f, r0	; 63
 d2a:	cd bf       	out	0x3d, r28	; 61
 d2c:	df 91       	pop	r29
 d2e:	cf 91       	pop	r28
 d30:	1f 91       	pop	r17
 d32:	0f 91       	pop	r16
 d34:	ff 90       	pop	r15
 d36:	ef 90       	pop	r14
 d38:	df 90       	pop	r13
 d3a:	cf 90       	pop	r12
 d3c:	bf 90       	pop	r11
 d3e:	af 90       	pop	r10
 d40:	9f 90       	pop	r9
 d42:	8f 90       	pop	r8
 d44:	7f 90       	pop	r7
 d46:	6f 90       	pop	r6
 d48:	5f 90       	pop	r5
 d4a:	4f 90       	pop	r4
 d4c:	3f 90       	pop	r3
 d4e:	2f 90       	pop	r2
 d50:	08 95       	ret

00000d52 <strnlen_P>:
 d52:	fc 01       	movw	r30, r24
 d54:	05 90       	lpm	r0, Z+
 d56:	61 50       	subi	r22, 0x01	; 1
 d58:	70 40       	sbci	r23, 0x00	; 0
 d5a:	01 10       	cpse	r0, r1
 d5c:	d8 f7       	brcc	.-10     	; 0xd54 <strnlen_P+0x2>
 d5e:	80 95       	com	r24
 d60:	90 95       	com	r25
 d62:	8e 0f       	add	r24, r30
 d64:	9f 1f       	adc	r25, r31
 d66:	08 95       	ret

00000d68 <strnlen>:
 d68:	fc 01       	movw	r30, r24
 d6a:	61 50       	subi	r22, 0x01	; 1
 d6c:	70 40       	sbci	r23, 0x00	; 0
 d6e:	01 90       	ld	r0, Z+
 d70:	01 10       	cpse	r0, r1
 d72:	d8 f7       	brcc	.-10     	; 0xd6a <strnlen+0x2>
 d74:	80 95       	com	r24
 d76:	90 95       	com	r25
 d78:	8e 0f       	add	r24, r30
 d7a:	9f 1f       	adc	r25, r31
 d7c:	08 95       	ret

00000d7e <fputc>:
 d7e:	0f 93       	push	r16
 d80:	1f 93       	push	r17
 d82:	cf 93       	push	r28
 d84:	df 93       	push	r29
 d86:	fb 01       	movw	r30, r22
 d88:	23 81       	ldd	r18, Z+3	; 0x03
 d8a:	21 fd       	sbrc	r18, 1
 d8c:	03 c0       	rjmp	.+6      	; 0xd94 <fputc+0x16>
 d8e:	8f ef       	ldi	r24, 0xFF	; 255
 d90:	9f ef       	ldi	r25, 0xFF	; 255
 d92:	2c c0       	rjmp	.+88     	; 0xdec <fputc+0x6e>
 d94:	22 ff       	sbrs	r18, 2
 d96:	16 c0       	rjmp	.+44     	; 0xdc4 <fputc+0x46>
 d98:	46 81       	ldd	r20, Z+6	; 0x06
 d9a:	57 81       	ldd	r21, Z+7	; 0x07
 d9c:	24 81       	ldd	r18, Z+4	; 0x04
 d9e:	35 81       	ldd	r19, Z+5	; 0x05
 da0:	42 17       	cp	r20, r18
 da2:	53 07       	cpc	r21, r19
 da4:	44 f4       	brge	.+16     	; 0xdb6 <fputc+0x38>
 da6:	a0 81       	ld	r26, Z
 da8:	b1 81       	ldd	r27, Z+1	; 0x01
 daa:	9d 01       	movw	r18, r26
 dac:	2f 5f       	subi	r18, 0xFF	; 255
 dae:	3f 4f       	sbci	r19, 0xFF	; 255
 db0:	31 83       	std	Z+1, r19	; 0x01
 db2:	20 83       	st	Z, r18
 db4:	8c 93       	st	X, r24
 db6:	26 81       	ldd	r18, Z+6	; 0x06
 db8:	37 81       	ldd	r19, Z+7	; 0x07
 dba:	2f 5f       	subi	r18, 0xFF	; 255
 dbc:	3f 4f       	sbci	r19, 0xFF	; 255
 dbe:	37 83       	std	Z+7, r19	; 0x07
 dc0:	26 83       	std	Z+6, r18	; 0x06
 dc2:	14 c0       	rjmp	.+40     	; 0xdec <fputc+0x6e>
 dc4:	8b 01       	movw	r16, r22
 dc6:	ec 01       	movw	r28, r24
 dc8:	fb 01       	movw	r30, r22
 dca:	00 84       	ldd	r0, Z+8	; 0x08
 dcc:	f1 85       	ldd	r31, Z+9	; 0x09
 dce:	e0 2d       	mov	r30, r0
 dd0:	09 95       	icall
 dd2:	89 2b       	or	r24, r25
 dd4:	e1 f6       	brne	.-72     	; 0xd8e <fputc+0x10>
 dd6:	d8 01       	movw	r26, r16
 dd8:	16 96       	adiw	r26, 0x06	; 6
 dda:	8d 91       	ld	r24, X+
 ddc:	9c 91       	ld	r25, X
 dde:	17 97       	sbiw	r26, 0x07	; 7
 de0:	01 96       	adiw	r24, 0x01	; 1
 de2:	17 96       	adiw	r26, 0x07	; 7
 de4:	9c 93       	st	X, r25
 de6:	8e 93       	st	-X, r24
 de8:	16 97       	sbiw	r26, 0x06	; 6
 dea:	ce 01       	movw	r24, r28
 dec:	df 91       	pop	r29
 dee:	cf 91       	pop	r28
 df0:	1f 91       	pop	r17
 df2:	0f 91       	pop	r16
 df4:	08 95       	ret

00000df6 <__ultoa_invert>:
 df6:	fa 01       	movw	r30, r20
 df8:	aa 27       	eor	r26, r26
 dfa:	28 30       	cpi	r18, 0x08	; 8
 dfc:	51 f1       	breq	.+84     	; 0xe52 <__ultoa_invert+0x5c>
 dfe:	20 31       	cpi	r18, 0x10	; 16
 e00:	81 f1       	breq	.+96     	; 0xe62 <__ultoa_invert+0x6c>
 e02:	e8 94       	clt
 e04:	6f 93       	push	r22
 e06:	6e 7f       	andi	r22, 0xFE	; 254
 e08:	6e 5f       	subi	r22, 0xFE	; 254
 e0a:	7f 4f       	sbci	r23, 0xFF	; 255
 e0c:	8f 4f       	sbci	r24, 0xFF	; 255
 e0e:	9f 4f       	sbci	r25, 0xFF	; 255
 e10:	af 4f       	sbci	r26, 0xFF	; 255
 e12:	b1 e0       	ldi	r27, 0x01	; 1
 e14:	3e d0       	rcall	.+124    	; 0xe92 <__ultoa_invert+0x9c>
 e16:	b4 e0       	ldi	r27, 0x04	; 4
 e18:	3c d0       	rcall	.+120    	; 0xe92 <__ultoa_invert+0x9c>
 e1a:	67 0f       	add	r22, r23
 e1c:	78 1f       	adc	r23, r24
 e1e:	89 1f       	adc	r24, r25
 e20:	9a 1f       	adc	r25, r26
 e22:	a1 1d       	adc	r26, r1
 e24:	68 0f       	add	r22, r24
 e26:	79 1f       	adc	r23, r25
 e28:	8a 1f       	adc	r24, r26
 e2a:	91 1d       	adc	r25, r1
 e2c:	a1 1d       	adc	r26, r1
 e2e:	6a 0f       	add	r22, r26
 e30:	71 1d       	adc	r23, r1
 e32:	81 1d       	adc	r24, r1
 e34:	91 1d       	adc	r25, r1
 e36:	a1 1d       	adc	r26, r1
 e38:	20 d0       	rcall	.+64     	; 0xe7a <__ultoa_invert+0x84>
 e3a:	09 f4       	brne	.+2      	; 0xe3e <__ultoa_invert+0x48>
 e3c:	68 94       	set
 e3e:	3f 91       	pop	r19
 e40:	2a e0       	ldi	r18, 0x0A	; 10
 e42:	26 9f       	mul	r18, r22
 e44:	11 24       	eor	r1, r1
 e46:	30 19       	sub	r19, r0
 e48:	30 5d       	subi	r19, 0xD0	; 208
 e4a:	31 93       	st	Z+, r19
 e4c:	de f6       	brtc	.-74     	; 0xe04 <__ultoa_invert+0xe>
 e4e:	cf 01       	movw	r24, r30
 e50:	08 95       	ret
 e52:	46 2f       	mov	r20, r22
 e54:	47 70       	andi	r20, 0x07	; 7
 e56:	40 5d       	subi	r20, 0xD0	; 208
 e58:	41 93       	st	Z+, r20
 e5a:	b3 e0       	ldi	r27, 0x03	; 3
 e5c:	0f d0       	rcall	.+30     	; 0xe7c <__ultoa_invert+0x86>
 e5e:	c9 f7       	brne	.-14     	; 0xe52 <__ultoa_invert+0x5c>
 e60:	f6 cf       	rjmp	.-20     	; 0xe4e <__ultoa_invert+0x58>
 e62:	46 2f       	mov	r20, r22
 e64:	4f 70       	andi	r20, 0x0F	; 15
 e66:	40 5d       	subi	r20, 0xD0	; 208
 e68:	4a 33       	cpi	r20, 0x3A	; 58
 e6a:	18 f0       	brcs	.+6      	; 0xe72 <__ultoa_invert+0x7c>
 e6c:	49 5d       	subi	r20, 0xD9	; 217
 e6e:	31 fd       	sbrc	r19, 1
 e70:	40 52       	subi	r20, 0x20	; 32
 e72:	41 93       	st	Z+, r20
 e74:	02 d0       	rcall	.+4      	; 0xe7a <__ultoa_invert+0x84>
 e76:	a9 f7       	brne	.-22     	; 0xe62 <__ultoa_invert+0x6c>
 e78:	ea cf       	rjmp	.-44     	; 0xe4e <__ultoa_invert+0x58>
 e7a:	b4 e0       	ldi	r27, 0x04	; 4
 e7c:	a6 95       	lsr	r26
 e7e:	97 95       	ror	r25
 e80:	87 95       	ror	r24
 e82:	77 95       	ror	r23
 e84:	67 95       	ror	r22
 e86:	ba 95       	dec	r27
 e88:	c9 f7       	brne	.-14     	; 0xe7c <__ultoa_invert+0x86>
 e8a:	00 97       	sbiw	r24, 0x00	; 0
 e8c:	61 05       	cpc	r22, r1
 e8e:	71 05       	cpc	r23, r1
 e90:	08 95       	ret
 e92:	9b 01       	movw	r18, r22
 e94:	ac 01       	movw	r20, r24
 e96:	0a 2e       	mov	r0, r26
 e98:	06 94       	lsr	r0
 e9a:	57 95       	ror	r21
 e9c:	47 95       	ror	r20
 e9e:	37 95       	ror	r19
 ea0:	27 95       	ror	r18
 ea2:	ba 95       	dec	r27
 ea4:	c9 f7       	brne	.-14     	; 0xe98 <__ultoa_invert+0xa2>
 ea6:	62 0f       	add	r22, r18
 ea8:	73 1f       	adc	r23, r19
 eaa:	84 1f       	adc	r24, r20
 eac:	95 1f       	adc	r25, r21
 eae:	a0 1d       	adc	r26, r0
 eb0:	08 95       	ret

00000eb2 <_exit>:
 eb2:	f8 94       	cli

00000eb4 <__stop_program>:
 eb4:	ff cf       	rjmp	.-2      	; 0xeb4 <__stop_program>
